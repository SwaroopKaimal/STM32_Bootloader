
Bootloader_STM32L496xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d88  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08004f38  08004f38  00005f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005384  08005384  00007084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005384  08005384  00006384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800538c  0800538c  00007084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800538c  0800538c  0000638c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005390  08005390  00006390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08005394  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20000084  08005418  00007084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08005418  000073ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbb6  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000221e  00000000  00000000  00013c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00015e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008cc  00000000  00000000  00016a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028de0  00000000  00000000  000172dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e4e1  00000000  00000000  000400bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f79f1  00000000  00000000  0004e59d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145f8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000332c  00000000  00000000  00145fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00149300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004f20 	.word	0x08004f20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08004f20 	.word	0x08004f20

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 ff2f 	bl	8001432 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f824 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 f8f4 	bl	80007c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005dc:	f000 f8c2 	bl	8000764 <MX_USART2_UART_Init>
  MX_CRC_Init();
 80005e0:	f000 f872 	bl	80006c8 <MX_CRC_Init>
  MX_LPUART1_UART_Init();
 80005e4:	f000 f892 	bl	800070c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

    /* Check whether button is pressed or not, if not pressed jump to user application */
  if ( HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin) == GPIO_PIN_SET ) { /*On Nucleo-boards pressing implies making it low*/
 80005e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ec:	4809      	ldr	r0, [pc, #36]	@ (8000614 <main+0x48>)
 80005ee:	f001 fdd9 	bl	80021a4 <HAL_GPIO_ReadPin>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d105      	bne.n	8000604 <main+0x38>
	  printmsg("BL_DEBUG_MSG:Button is pressed.. going to BL mode\n\r");
 80005f8:	4807      	ldr	r0, [pc, #28]	@ (8000618 <main+0x4c>)
 80005fa:	f000 f98f 	bl	800091c <printmsg>

	  //we should continue in boot loader mode
	  bootloader_uart_read_data();
 80005fe:	f000 f9df 	bl	80009c0 <bootloader_uart_read_data>
 8000602:	e005      	b.n	8000610 <main+0x44>
  } else {
	  printmsg("BL_DEBUG_MSG:Button is not pressed.. executing user application\n\r");
 8000604:	4805      	ldr	r0, [pc, #20]	@ (800061c <main+0x50>)
 8000606:	f000 f989 	bl	800091c <printmsg>

	  //jump to user application
	  bootloader_jump_to_user_app();
 800060a:	f000 f9ad 	bl	8000968 <bootloader_jump_to_user_app>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060e:	bf00      	nop
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <main+0x44>
 8000614:	48000800 	.word	0x48000800
 8000618:	08004f38 	.word	0x08004f38
 800061c:	08004f6c 	.word	0x08004f6c

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b096      	sub	sp, #88	@ 0x58
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	2244      	movs	r2, #68	@ 0x44
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f003 fff8 	bl	8004624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	463b      	mov	r3, r7
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000642:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000646:	f001 fdeb 	bl	8002220 <HAL_PWREx_ControlVoltageScaling>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000650:	f000 fd60 	bl	8001114 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000654:	2310      	movs	r3, #16
 8000656:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000660:	2360      	movs	r3, #96	@ 0x60
 8000662:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000668:	2301      	movs	r3, #1
 800066a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800066c:	2301      	movs	r3, #1
 800066e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000670:	2328      	movs	r3, #40	@ 0x28
 8000672:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fe31 	bl	80022ec <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000690:	f000 fd40 	bl	8001114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2303      	movs	r3, #3
 800069a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006aa:	463b      	mov	r3, r7
 80006ac:	2104      	movs	r1, #4
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 fa36 	bl	8002b20 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ba:	f000 fd2b 	bl	8001114 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3758      	adds	r7, #88	@ 0x58
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <MX_CRC_Init+0x3c>)
 80006ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000708 <MX_CRC_Init+0x40>)
 80006d0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_CRC_Init+0x3c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <MX_CRC_Init+0x3c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_CRC_Init+0x3c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <MX_CRC_Init+0x3c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_CRC_Init+0x3c>)
 80006ec:	2203      	movs	r2, #3
 80006ee:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	@ (8000704 <MX_CRC_Init+0x3c>)
 80006f2:	f000 fff9 	bl	80016e8 <HAL_CRC_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80006fc:	f000 fd0a 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200000a0 	.word	0x200000a0
 8000708:	40023000 	.word	0x40023000

0800070c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000710:	4b12      	ldr	r3, [pc, #72]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 8000712:	4a13      	ldr	r2, [pc, #76]	@ (8000760 <MX_LPUART1_UART_Init+0x54>)
 8000714:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b0a      	ldr	r3, [pc, #40]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073c:	4b07      	ldr	r3, [pc, #28]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 800074a:	f003 f8d7 	bl	80038fc <HAL_UART_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000754:	f000 fcde 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200000c4 	.word	0x200000c4
 8000760:	40008000 	.word	0x40008000

08000764 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000768:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 800076a:	4a15      	ldr	r2, [pc, #84]	@ (80007c0 <MX_USART2_UART_Init+0x5c>)
 800076c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076e:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 80007a8:	f003 f8a8 	bl	80038fc <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007b2:	f000 fcaf 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	2000014c 	.word	0x2000014c
 80007c0:	40004400 	.word	0x40004400

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	@ 0x28
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	4b4c      	ldr	r3, [pc, #304]	@ (800090c <MX_GPIO_Init+0x148>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	4a4b      	ldr	r2, [pc, #300]	@ (800090c <MX_GPIO_Init+0x148>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e6:	4b49      	ldr	r3, [pc, #292]	@ (800090c <MX_GPIO_Init+0x148>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f2:	4b46      	ldr	r3, [pc, #280]	@ (800090c <MX_GPIO_Init+0x148>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	4a45      	ldr	r2, [pc, #276]	@ (800090c <MX_GPIO_Init+0x148>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007fe:	4b43      	ldr	r3, [pc, #268]	@ (800090c <MX_GPIO_Init+0x148>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b40      	ldr	r3, [pc, #256]	@ (800090c <MX_GPIO_Init+0x148>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	4a3f      	ldr	r2, [pc, #252]	@ (800090c <MX_GPIO_Init+0x148>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000816:	4b3d      	ldr	r3, [pc, #244]	@ (800090c <MX_GPIO_Init+0x148>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b3a      	ldr	r3, [pc, #232]	@ (800090c <MX_GPIO_Init+0x148>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	4a39      	ldr	r2, [pc, #228]	@ (800090c <MX_GPIO_Init+0x148>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082e:	4b37      	ldr	r3, [pc, #220]	@ (800090c <MX_GPIO_Init+0x148>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800083a:	4b34      	ldr	r3, [pc, #208]	@ (800090c <MX_GPIO_Init+0x148>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	4a33      	ldr	r2, [pc, #204]	@ (800090c <MX_GPIO_Init+0x148>)
 8000840:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000846:	4b31      	ldr	r3, [pc, #196]	@ (800090c <MX_GPIO_Init+0x148>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8000852:	f001 fd3b 	bl	80022cc <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 800085c:	482c      	ldr	r0, [pc, #176]	@ (8000910 <MX_GPIO_Init+0x14c>)
 800085e:	f001 fcb9 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 5131 	mov.w	r1, #11328	@ 0x2c40
 8000868:	482a      	ldr	r0, [pc, #168]	@ (8000914 <MX_GPIO_Init+0x150>)
 800086a:	f001 fcb3 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800086e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000874:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	4824      	ldr	r0, [pc, #144]	@ (8000918 <MX_GPIO_Init+0x154>)
 8000886:	f001 fafb 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800088a:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	481b      	ldr	r0, [pc, #108]	@ (8000910 <MX_GPIO_Init+0x14c>)
 80008a4:	f001 faec 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 80008a8:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	4815      	ldr	r0, [pc, #84]	@ (8000914 <MX_GPIO_Init+0x150>)
 80008be:	f001 fadf 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 80008c2:	f44f 5331 	mov.w	r3, #11328	@ 0x2c40
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	480e      	ldr	r0, [pc, #56]	@ (8000914 <MX_GPIO_Init+0x150>)
 80008dc:	f001 fad0 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008e0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008f2:	230a      	movs	r3, #10
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000900:	f001 fabe 	bl	8001e80 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000904:	bf00      	nop
 8000906:	3728      	adds	r7, #40	@ 0x28
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40021000 	.word	0x40021000
 8000910:	48000400 	.word	0x48000400
 8000914:	48001800 	.word	0x48001800
 8000918:	48000800 	.word	0x48000800

0800091c <printmsg>:

/*Prints formatted string to console over UART
 * HAL_UART_Transmit() only sends raw bytes
 * If we want to print variables (integers, floats, hex values, etc.), we need to format them */
void printmsg(char *format,...)
{
 800091c:	b40f      	push	{r0, r1, r2, r3}
 800091e:	b580      	push	{r7, lr}
 8000920:	b096      	sub	sp, #88	@ 0x58
 8000922:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];

	/*Extract the argument list using C VA APIs*/
	va_list args;
	va_start(args, format);
 8000924:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000928:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000932:	4618      	mov	r0, r3
 8000934:	f003 fe6c 	bl	8004610 <vsiprintf>
	HAL_UART_Transmit(D_UART, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000938:	f107 0308 	add.w	r3, r7, #8
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fc57 	bl	80001f0 <strlen>
 8000942:	4603      	mov	r3, r0
 8000944:	b29a      	uxth	r2, r3
 8000946:	f107 0108 	add.w	r1, r7, #8
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	4805      	ldr	r0, [pc, #20]	@ (8000964 <printmsg+0x48>)
 8000950:	f003 f822 	bl	8003998 <HAL_UART_Transmit>
	va_end(args);
#endif
}
 8000954:	bf00      	nop
 8000956:	3758      	adds	r7, #88	@ 0x58
 8000958:	46bd      	mov	sp, r7
 800095a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800095e:	b004      	add	sp, #16
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	200000c4 	.word	0x200000c4

08000968 <bootloader_jump_to_user_app>:


void bootloader_jump_to_user_app(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
	 */

	// A 'function pointer' to hold the address of the reset handler of the user application
	void (*app_reset_handler) (void); /*Used in Step 2 */

	printmsg("BL_DEBUG_MSG:bootloader_jump_to_user_app\n");
 800096e:	480f      	ldr	r0, [pc, #60]	@ (80009ac <bootloader_jump_to_user_app+0x44>)
 8000970:	f7ff ffd4 	bl	800091c <printmsg>

	/*The first byte at address of the FLASH area holds the value of MSP and next byte holds the Reset Handler
	 * according to ARM-Cortex Architecture */

	/*1. Configure the Main Stack Pointer (MSP) by reading the value form the flash base address of desired sector*/
	uint32_t msp_value = *(volatile uint32_t*)FLASH_APP_CODE_BASEADDR;
 8000974:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <bootloader_jump_to_user_app+0x48>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	f383 8808 	msr	MSP, r3
}
 8000984:	bf00      	nop

	/* Set MSP function form CMSIS*/
	__set_MSP(msp_value);

	/* Re-map vector table to user application base address */
	SCB->VTOR = FLASH_APP_CODE_BASEADDR; /* System Control Block - Vector Table Offset Register */
 8000986:	4b0b      	ldr	r3, [pc, #44]	@ (80009b4 <bootloader_jump_to_user_app+0x4c>)
 8000988:	4a09      	ldr	r2, [pc, #36]	@ (80009b0 <bootloader_jump_to_user_app+0x48>)
 800098a:	609a      	str	r2, [r3, #8]

	/* 2. Now fetch the reset handler address of the user application
	 * from the location FLASH_SECTOR2_BASE_ADDRESS + 4*/

	uint32_t resethandler_address = *(volatile uint32_t *) (FLASH_APP_CODE_BASEADDR + 4);
 800098c:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <bootloader_jump_to_user_app+0x50>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	60bb      	str	r3, [r7, #8]

	app_reset_handler = (void*) resethandler_address; /*Initializing function pointer with reset handler*/
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	607b      	str	r3, [r7, #4]

	printmsg("BL_DEBUG_MSG: Application reset handler address : %#x\n",app_reset_handler);
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	4808      	ldr	r0, [pc, #32]	@ (80009bc <bootloader_jump_to_user_app+0x54>)
 800099a:	f7ff ffbf 	bl	800091c <printmsg>

	/*3. Jumping to the reset handler of user application - Now this address will be loaded into the Program Counter*/
	app_reset_handler();
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4798      	blx	r3

}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	08004fb0 	.word	0x08004fb0
 80009b0:	08008000 	.word	0x08008000
 80009b4:	e000ed00 	.word	0xe000ed00
 80009b8:	08008004 	.word	0x08008004
 80009bc:	08004fdc 	.word	0x08004fdc

080009c0 <bootloader_uart_read_data>:

void bootloader_uart_read_data(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
	/*First read only one byte, which is the length. Then read the other bytes from UART */

	uint8_t rcv_len=0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		memset(bl_rx_buffer, 0, 200); //??
 80009ca:	22c8      	movs	r2, #200	@ 0xc8
 80009cc:	2100      	movs	r1, #0
 80009ce:	4835      	ldr	r0, [pc, #212]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 80009d0:	f003 fe28 	bl	8004624 <memset>

		HAL_UART_Receive(C_UART, (uint8_t*)&bl_rx_buffer, 1, HAL_MAX_DELAY);
 80009d4:	f04f 33ff 	mov.w	r3, #4294967295
 80009d8:	2201      	movs	r2, #1
 80009da:	4932      	ldr	r1, [pc, #200]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 80009dc:	4832      	ldr	r0, [pc, #200]	@ (8000aa8 <bootloader_uart_read_data+0xe8>)
 80009de:	f003 f864 	bl	8003aaa <HAL_UART_Receive>
		rcv_len = bl_rx_buffer[0];
 80009e2:	4b30      	ldr	r3, [pc, #192]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(C_UART, &bl_rx_buffer[1], rcv_len, HAL_MAX_DELAY);
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295
 80009f0:	492e      	ldr	r1, [pc, #184]	@ (8000aac <bootloader_uart_read_data+0xec>)
 80009f2:	482d      	ldr	r0, [pc, #180]	@ (8000aa8 <bootloader_uart_read_data+0xe8>)
 80009f4:	f003 f859 	bl	8003aaa <HAL_UART_Receive>

		switch(bl_rx_buffer[1]) /* To check for command codes */
 80009f8:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 80009fa:	785b      	ldrb	r3, [r3, #1]
 80009fc:	3b51      	subs	r3, #81	@ 0x51
 80009fe:	2b0b      	cmp	r3, #11
 8000a00:	d84a      	bhi.n	8000a98 <bootloader_uart_read_data+0xd8>
 8000a02:	a201      	add	r2, pc, #4	@ (adr r2, 8000a08 <bootloader_uart_read_data+0x48>)
 8000a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a08:	08000a39 	.word	0x08000a39
 8000a0c:	08000a41 	.word	0x08000a41
 8000a10:	08000a49 	.word	0x08000a49
 8000a14:	08000a51 	.word	0x08000a51
 8000a18:	08000a59 	.word	0x08000a59
 8000a1c:	08000a61 	.word	0x08000a61
 8000a20:	08000a69 	.word	0x08000a69
 8000a24:	08000a71 	.word	0x08000a71
 8000a28:	08000a79 	.word	0x08000a79
 8000a2c:	08000a81 	.word	0x08000a81
 8000a30:	08000a89 	.word	0x08000a89
 8000a34:	08000a91 	.word	0x08000a91
		{
		case BL_GET_VER:
			bootloader_handle_getver_cmd(bl_rx_buffer);
 8000a38:	481a      	ldr	r0, [pc, #104]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 8000a3a:	f000 f83b 	bl	8000ab4 <bootloader_handle_getver_cmd>
			break;
 8000a3e:	e02f      	b.n	8000aa0 <bootloader_uart_read_data+0xe0>
		case BL_GET_HELP:
			bootloader_handle_gethelp_cmd(bl_rx_buffer);
 8000a40:	4818      	ldr	r0, [pc, #96]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 8000a42:	f000 f87f 	bl	8000b44 <bootloader_handle_gethelp_cmd>
			break;
 8000a46:	e02b      	b.n	8000aa0 <bootloader_uart_read_data+0xe0>
		case BL_GET_CID:
			bootloader_handle_getcid_cmd(bl_rx_buffer);
 8000a48:	4816      	ldr	r0, [pc, #88]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 8000a4a:	f000 f8b7 	bl	8000bbc <bootloader_handle_getcid_cmd>
			break;
 8000a4e:	e027      	b.n	8000aa0 <bootloader_uart_read_data+0xe0>
		case BL_GET_RDP_STATUS:
			bootloader_handle_getrdp_cmd(bl_rx_buffer);
 8000a50:	4814      	ldr	r0, [pc, #80]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 8000a52:	f000 f8ff 	bl	8000c54 <bootloader_handle_getrdp_cmd>
			break;
 8000a56:	e023      	b.n	8000aa0 <bootloader_uart_read_data+0xe0>
		case BL_GO_TO_ADDR:
			bootloader_handle_go_cmd(bl_rx_buffer);
 8000a58:	4812      	ldr	r0, [pc, #72]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 8000a5a:	f000 f947 	bl	8000cec <bootloader_handle_go_cmd>
			break;
 8000a5e:	e01f      	b.n	8000aa0 <bootloader_uart_read_data+0xe0>
		case BL_FLASH_ERASE:
			bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8000a60:	4810      	ldr	r0, [pc, #64]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 8000a62:	f000 f9ad 	bl	8000dc0 <bootloader_handle_flash_erase_cmd>
			break;
 8000a66:	e01b      	b.n	8000aa0 <bootloader_uart_read_data+0xe0>
		case BL_MEM_WRITE:
			bootloader_handle_mem_write_cmd(bl_rx_buffer);
 8000a68:	480e      	ldr	r0, [pc, #56]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 8000a6a:	f000 fa15 	bl	8000e98 <bootloader_handle_mem_write_cmd>
			break;
 8000a6e:	e017      	b.n	8000aa0 <bootloader_uart_read_data+0xe0>
		case BL_EN_RW_PROTECT:
			bootloader_handle_en_rw_protect(bl_rx_buffer);
 8000a70:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 8000a72:	f000 fa1b 	bl	8000eac <bootloader_handle_en_rw_protect>
			break;
 8000a76:	e013      	b.n	8000aa0 <bootloader_uart_read_data+0xe0>
		case BL_MEM_READ:
			bootloader_handle_mem_read(bl_rx_buffer);
 8000a78:	480a      	ldr	r0, [pc, #40]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 8000a7a:	f000 fa21 	bl	8000ec0 <bootloader_handle_mem_read>
			break;
 8000a7e:	e00f      	b.n	8000aa0 <bootloader_uart_read_data+0xe0>
		case BL_READ_SECTOR_P_STATUS:
			bootloader_handle_read_sector_protection_status(bl_rx_buffer);
 8000a80:	4808      	ldr	r0, [pc, #32]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 8000a82:	f000 fa27 	bl	8000ed4 <bootloader_handle_read_sector_protection_status>
			break;
 8000a86:	e00b      	b.n	8000aa0 <bootloader_uart_read_data+0xe0>
		case BL_OTP_READ:
			bootloader_handle_read_otp(bl_rx_buffer);
 8000a88:	4806      	ldr	r0, [pc, #24]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 8000a8a:	f000 fa2d 	bl	8000ee8 <bootloader_handle_read_otp>
			break;
 8000a8e:	e007      	b.n	8000aa0 <bootloader_uart_read_data+0xe0>
		case BL_DIS_R_W_PROTECT:
			bootloader_handle_dis_rw_protect(bl_rx_buffer);
 8000a90:	4804      	ldr	r0, [pc, #16]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 8000a92:	f000 fa33 	bl	8000efc <bootloader_handle_dis_rw_protect>
			break;
 8000a96:	e003      	b.n	8000aa0 <bootloader_uart_read_data+0xe0>
		default:
			printmsg("BL_DEBUG_MSG:Invalid command code received from host \n");
 8000a98:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <bootloader_uart_read_data+0xf0>)
 8000a9a:	f7ff ff3f 	bl	800091c <printmsg>
			break;
 8000a9e:	bf00      	nop
		memset(bl_rx_buffer, 0, 200); //??
 8000aa0:	e793      	b.n	80009ca <bootloader_uart_read_data+0xa>
 8000aa2:	bf00      	nop
 8000aa4:	200001d4 	.word	0x200001d4
 8000aa8:	2000014c 	.word	0x2000014c
 8000aac:	200001d5 	.word	0x200001d5
 8000ab0:	08005014 	.word	0x08005014

08000ab4 <bootloader_handle_getver_cmd>:
}

/******************* Boot loader handler functions *******************/

void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	uint8_t bl_version;

	/*Total length of command packet*/
	uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]

	/*Extract the 4 bytes of CRC32 sent by the host*/
	uint32_t host_crc = *((uint32_t*) (bl_rx_buffer + command_packet_len - 4)); /* ?? */
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	3b04      	subs	r3, #4
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	4413      	add	r3, r2
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	613b      	str	r3, [r7, #16]

	/*Verify the checksum */
	printmsg("BL_DEBUG_MSG: bootloader_handle_getver_cmd\n");
 8000ad0:	4818      	ldr	r0, [pc, #96]	@ (8000b34 <bootloader_handle_getver_cmd+0x80>)
 8000ad2:	f7ff ff23 	bl	800091c <printmsg>
	if(! bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc)) /*Subtract the CRC bytes - ??*/
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	3b04      	subs	r3, #4
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4619      	mov	r1, r3
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f000 fa42 	bl	8000f68 <bootloader_verify_crc>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d11a      	bne.n	8000b20 <bootloader_handle_getver_cmd+0x6c>
	{
		/*Checksum is correct*/
		printmsg("BL_DEBUG_MSG: Checksum success...!\n");
 8000aea:	4813      	ldr	r0, [pc, #76]	@ (8000b38 <bootloader_handle_getver_cmd+0x84>)
 8000aec:	f7ff ff16 	bl	800091c <printmsg>
		bootloader_send_ack(bl_rx_buffer[0], 1);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2101      	movs	r1, #1
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 fa1c 	bl	8000f34 <bootloader_send_ack>
		bl_version = get_bootloader_version();
 8000afc:	f000 fa68 	bl	8000fd0 <get_bootloader_version>
 8000b00:	4603      	mov	r3, r0
 8000b02:	73fb      	strb	r3, [r7, #15]
		printmsg("BL_DEBUG_MSG: BL_VER: %d &#x\n", bl_version, bl_version);
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	4619      	mov	r1, r3
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	480b      	ldr	r0, [pc, #44]	@ (8000b3c <bootloader_handle_getver_cmd+0x88>)
 8000b0e:	f7ff ff05 	bl	800091c <printmsg>
		bootloader_uart_write_data(&bl_version, 1); /* Sends data back to the HOST */
 8000b12:	f107 030f 	add.w	r3, r7, #15
 8000b16:	2101      	movs	r1, #1
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 fa61 	bl	8000fe0 <bootloader_uart_write_data>
		printmsg("BL_DEBUG_MSG: Checksum failed...!\n");
		bootloader_send_nack();

	}

}
 8000b1e:	e004      	b.n	8000b2a <bootloader_handle_getver_cmd+0x76>
		printmsg("BL_DEBUG_MSG: Checksum failed...!\n");
 8000b20:	4807      	ldr	r0, [pc, #28]	@ (8000b40 <bootloader_handle_getver_cmd+0x8c>)
 8000b22:	f7ff fefb 	bl	800091c <printmsg>
		bootloader_send_nack();
 8000b26:	f000 f9f3 	bl	8000f10 <bootloader_send_nack>
}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	0800504c 	.word	0x0800504c
 8000b38:	08005078 	.word	0x08005078
 8000b3c:	0800509c 	.word	0x0800509c
 8000b40:	080050bc 	.word	0x080050bc

08000b44 <bootloader_handle_gethelp_cmd>:

void bootloader_handle_gethelp_cmd(uint8_t *pBuffer) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

  printmsg("BL_DEBUG_MSG:bootloader_handle_gethelp_cmd\n");
 8000b4c:	4816      	ldr	r0, [pc, #88]	@ (8000ba8 <bootloader_handle_gethelp_cmd+0x64>)
 8000b4e:	f7ff fee5 	bl	800091c <printmsg>

  //Total length of the command packet
  uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000b52:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <bootloader_handle_gethelp_cmd+0x68>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	3301      	adds	r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]

  //extract the CRC32 sent by the Host
  uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	3b04      	subs	r3, #4
 8000b5e:	4a13      	ldr	r2, [pc, #76]	@ (8000bac <bootloader_handle_gethelp_cmd+0x68>)
 8000b60:	4413      	add	r3, r2
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	60bb      	str	r3, [r7, #8]

  if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc)) {
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	3b04      	subs	r3, #4
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480f      	ldr	r0, [pc, #60]	@ (8000bac <bootloader_handle_gethelp_cmd+0x68>)
 8000b70:	f000 f9fa 	bl	8000f68 <bootloader_verify_crc>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d10d      	bne.n	8000b96 <bootloader_handle_gethelp_cmd+0x52>
    printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000b7a:	480d      	ldr	r0, [pc, #52]	@ (8000bb0 <bootloader_handle_gethelp_cmd+0x6c>)
 8000b7c:	f7ff fece 	bl	800091c <printmsg>
    bootloader_send_ack(pBuffer[0],sizeof(supported_commands));
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2108      	movs	r1, #8
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f9d4 	bl	8000f34 <bootloader_send_ack>
    bootloader_uart_write_data(supported_commands,sizeof(supported_commands) );
 8000b8c:	2108      	movs	r1, #8
 8000b8e:	4809      	ldr	r0, [pc, #36]	@ (8000bb4 <bootloader_handle_gethelp_cmd+0x70>)
 8000b90:	f000 fa26 	bl	8000fe0 <bootloader_uart_write_data>

  } else {
    printmsg("BL_DEBUG_MSG:checksum fail !!\n");
    bootloader_send_nack();
  }
}
 8000b94:	e004      	b.n	8000ba0 <bootloader_handle_gethelp_cmd+0x5c>
    printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000b96:	4808      	ldr	r0, [pc, #32]	@ (8000bb8 <bootloader_handle_gethelp_cmd+0x74>)
 8000b98:	f7ff fec0 	bl	800091c <printmsg>
    bootloader_send_nack();
 8000b9c:	f000 f9b8 	bl	8000f10 <bootloader_send_nack>
}
 8000ba0:	bf00      	nop
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	080050e0 	.word	0x080050e0
 8000bac:	200001d4 	.word	0x200001d4
 8000bb0:	0800510c 	.word	0x0800510c
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	08005130 	.word	0x08005130

08000bbc <bootloader_handle_getcid_cmd>:

void bootloader_handle_getcid_cmd(uint8_t *pBuffer)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

	printmsg("BL_DEBUG_MSG:bootloader_handle_getcid_cmd\n");
 8000bc4:	481e      	ldr	r0, [pc, #120]	@ (8000c40 <bootloader_handle_getcid_cmd+0x84>)
 8000bc6:	f7ff fea9 	bl	800091c <printmsg>

	uint16_t bl_cid_num = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	81fb      	strh	r3, [r7, #14]

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0] + 1 ;
 8000bce:	4b1d      	ldr	r3, [pc, #116]	@ (8000c44 <bootloader_handle_getcid_cmd+0x88>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3b04      	subs	r3, #4
 8000bda:	4a1a      	ldr	r2, [pc, #104]	@ (8000c44 <bootloader_handle_getcid_cmd+0x88>)
 8000bdc:	4413      	add	r3, r2
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc)) {
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3b04      	subs	r3, #4
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	4619      	mov	r1, r3
 8000bea:	4816      	ldr	r0, [pc, #88]	@ (8000c44 <bootloader_handle_getcid_cmd+0x88>)
 8000bec:	f000 f9bc 	bl	8000f68 <bootloader_verify_crc>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d11a      	bne.n	8000c2c <bootloader_handle_getcid_cmd+0x70>

		printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000bf6:	4814      	ldr	r0, [pc, #80]	@ (8000c48 <bootloader_handle_getcid_cmd+0x8c>)
 8000bf8:	f7ff fe90 	bl	800091c <printmsg>
		bootloader_send_ack(pBuffer[0],2);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2102      	movs	r1, #2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f996 	bl	8000f34 <bootloader_send_ack>
		bl_cid_num = get_mcu_chip_id();
 8000c08:	f000 f9fe 	bl	8001008 <get_mcu_chip_id>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	81fb      	strh	r3, [r7, #14]
		printmsg("BL_DEBUG_MSG:MCU id : %d %#x !!\n",bl_cid_num, bl_cid_num);
 8000c10:	89fb      	ldrh	r3, [r7, #14]
 8000c12:	4619      	mov	r1, r3
 8000c14:	89fb      	ldrh	r3, [r7, #14]
 8000c16:	461a      	mov	r2, r3
 8000c18:	480c      	ldr	r0, [pc, #48]	@ (8000c4c <bootloader_handle_getcid_cmd+0x90>)
 8000c1a:	f7ff fe7f 	bl	800091c <printmsg>
		bootloader_uart_write_data((uint8_t *)&bl_cid_num,2);
 8000c1e:	f107 030e 	add.w	r3, r7, #14
 8000c22:	2102      	movs	r1, #2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 f9db 	bl	8000fe0 <bootloader_uart_write_data>
	} else {
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}

}
 8000c2a:	e004      	b.n	8000c36 <bootloader_handle_getcid_cmd+0x7a>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000c2c:	4808      	ldr	r0, [pc, #32]	@ (8000c50 <bootloader_handle_getcid_cmd+0x94>)
 8000c2e:	f7ff fe75 	bl	800091c <printmsg>
		bootloader_send_nack();
 8000c32:	f000 f96d 	bl	8000f10 <bootloader_send_nack>
}
 8000c36:	bf00      	nop
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	08005150 	.word	0x08005150
 8000c44:	200001d4 	.word	0x200001d4
 8000c48:	0800510c 	.word	0x0800510c
 8000c4c:	0800517c 	.word	0x0800517c
 8000c50:	08005130 	.word	0x08005130

08000c54 <bootloader_handle_getrdp_cmd>:

void bootloader_handle_getrdp_cmd(uint8_t *pBuffer) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint8_t rdp_level = 0x00;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73fb      	strb	r3, [r7, #15]
  printmsg("BL_DEBUG_MSG:bootloader_handle_getrdp_cmd\n");
 8000c60:	481d      	ldr	r0, [pc, #116]	@ (8000cd8 <bootloader_handle_getrdp_cmd+0x84>)
 8000c62:	f7ff fe5b 	bl	800091c <printmsg>

  //Total length of the command packet
  uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000c66:	4b1d      	ldr	r3, [pc, #116]	@ (8000cdc <bootloader_handle_getrdp_cmd+0x88>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	617b      	str	r3, [r7, #20]

  //extract the CRC32 sent by the Host
  uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	3b04      	subs	r3, #4
 8000c72:	4a1a      	ldr	r2, [pc, #104]	@ (8000cdc <bootloader_handle_getrdp_cmd+0x88>)
 8000c74:	4413      	add	r3, r2
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	613b      	str	r3, [r7, #16]

  if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc)) {
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	3b04      	subs	r3, #4
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4619      	mov	r1, r3
 8000c82:	4816      	ldr	r0, [pc, #88]	@ (8000cdc <bootloader_handle_getrdp_cmd+0x88>)
 8000c84:	f000 f970 	bl	8000f68 <bootloader_verify_crc>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d11a      	bne.n	8000cc4 <bootloader_handle_getrdp_cmd+0x70>
    printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000c8e:	4814      	ldr	r0, [pc, #80]	@ (8000ce0 <bootloader_handle_getrdp_cmd+0x8c>)
 8000c90:	f7ff fe44 	bl	800091c <printmsg>
    bootloader_send_ack(pBuffer[0],1);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2101      	movs	r1, #1
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f94a 	bl	8000f34 <bootloader_send_ack>
    rdp_level = get_flash_rdp_level();
 8000ca0:	f000 f9c4 	bl	800102c <get_flash_rdp_level>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:RDP level: %d %#x\n",rdp_level,rdp_level);
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	4619      	mov	r1, r3
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <bootloader_handle_getrdp_cmd+0x90>)
 8000cb2:	f7ff fe33 	bl	800091c <printmsg>
    bootloader_uart_write_data(&rdp_level,1);
 8000cb6:	f107 030f 	add.w	r3, r7, #15
 8000cba:	2101      	movs	r1, #1
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 f98f 	bl	8000fe0 <bootloader_uart_write_data>

  } else {
    printmsg("BL_DEBUG_MSG:checksum fail !!\n");
    bootloader_send_nack();
  }
}
 8000cc2:	e004      	b.n	8000cce <bootloader_handle_getrdp_cmd+0x7a>
    printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000cc4:	4808      	ldr	r0, [pc, #32]	@ (8000ce8 <bootloader_handle_getrdp_cmd+0x94>)
 8000cc6:	f7ff fe29 	bl	800091c <printmsg>
    bootloader_send_nack();
 8000cca:	f000 f921 	bl	8000f10 <bootloader_send_nack>
}
 8000cce:	bf00      	nop
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	080051a0 	.word	0x080051a0
 8000cdc:	200001d4 	.word	0x200001d4
 8000ce0:	0800510c 	.word	0x0800510c
 8000ce4:	080051cc 	.word	0x080051cc
 8000ce8:	08005130 	.word	0x08005130

08000cec <bootloader_handle_go_cmd>:


void bootloader_handle_go_cmd(uint8_t *pBuffer) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  uint32_t go_address=0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
  uint8_t addr_valid = ADDR_VALID;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73fb      	strb	r3, [r7, #15]
  uint8_t addr_invalid = ADDR_INVALID;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	73bb      	strb	r3, [r7, #14]

  printmsg("BL_DEBUG_MSG:bootloader_handle_go_cmd\n");
 8000d00:	4828      	ldr	r0, [pc, #160]	@ (8000da4 <bootloader_handle_go_cmd+0xb8>)
 8000d02:	f7ff fe0b 	bl	800091c <printmsg>

  //Total length of the command packet
  uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000d06:	4b28      	ldr	r3, [pc, #160]	@ (8000da8 <bootloader_handle_go_cmd+0xbc>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	61bb      	str	r3, [r7, #24]

  //extract the CRC32 sent by the Host
  uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	3b04      	subs	r3, #4
 8000d12:	4a25      	ldr	r2, [pc, #148]	@ (8000da8 <bootloader_handle_go_cmd+0xbc>)
 8000d14:	4413      	add	r3, r2
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	617b      	str	r3, [r7, #20]

  if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc)) {
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	3b04      	subs	r3, #4
 8000d1e:	697a      	ldr	r2, [r7, #20]
 8000d20:	4619      	mov	r1, r3
 8000d22:	4821      	ldr	r0, [pc, #132]	@ (8000da8 <bootloader_handle_go_cmd+0xbc>)
 8000d24:	f000 f920 	bl	8000f68 <bootloader_verify_crc>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d131      	bne.n	8000d92 <bootloader_handle_go_cmd+0xa6>

    printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000d2e:	481f      	ldr	r0, [pc, #124]	@ (8000dac <bootloader_handle_go_cmd+0xc0>)
 8000d30:	f7ff fdf4 	bl	800091c <printmsg>

    bootloader_send_ack(pBuffer[0],1);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2101      	movs	r1, #1
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f8fa 	bl	8000f34 <bootloader_send_ack>

    //extract the go address
    go_address = *((uint32_t *)&pBuffer[2] ); /*Retrieve 4 bytes of Address Data*/
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000d46:	61fb      	str	r3, [r7, #28]
    printmsg("BL_DEBUG_MSG:GO addr: %#x\n",go_address);
 8000d48:	69f9      	ldr	r1, [r7, #28]
 8000d4a:	4819      	ldr	r0, [pc, #100]	@ (8000db0 <bootloader_handle_go_cmd+0xc4>)
 8000d4c:	f7ff fde6 	bl	800091c <printmsg>

  if( verify_address(go_address) == ADDR_VALID ) {
 8000d50:	69f8      	ldr	r0, [r7, #28]
 8000d52:	f000 f97f 	bl	8001054 <verify_address>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d110      	bne.n	8000d7e <bootloader_handle_go_cmd+0x92>
    //tell host that address is fine
    bootloader_uart_write_data(&addr_valid,1);
 8000d5c:	f107 030f 	add.w	r3, r7, #15
 8000d60:	2101      	movs	r1, #1
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f93c 	bl	8000fe0 <bootloader_uart_write_data>
    /*jump to "go" address. Boot loader does not know what code is present at that address*/

    /* Not doing the below line will result in hard fault exception for ARM Cortex-M */
    //watch : https://www.youtube.com/watch?v=VX_12SjnNhY

    go_address+=1; //make Thumb bit T =1
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	61fb      	str	r3, [r7, #28]

    void (*lets_jump)(void) = (void *)go_address;
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	613b      	str	r3, [r7, #16]

    printmsg("BL_DEBUG_MSG: jumping to go address! \n");
 8000d72:	4810      	ldr	r0, [pc, #64]	@ (8000db4 <bootloader_handle_go_cmd+0xc8>)
 8000d74:	f7ff fdd2 	bl	800091c <printmsg>

    lets_jump();
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	4798      	blx	r3
   * NOTE:
   * While jumping to a user code with the BL_GO_TO_ADDR command, enter the second byte at at the address (which is the reset handler)
   * and do minus 1. This is because the last bit accounts for T bit in ARM processors in Thumb Mode. For example: if address of reset
   * handler found is 0x08008A59, enter 0x08008A58 in the boot loader host application.
   */
}
 8000d7c:	e00e      	b.n	8000d9c <bootloader_handle_go_cmd+0xb0>
    printmsg("BL_DEBUG_MSG:GO addr invalid ! \n");
 8000d7e:	480e      	ldr	r0, [pc, #56]	@ (8000db8 <bootloader_handle_go_cmd+0xcc>)
 8000d80:	f7ff fdcc 	bl	800091c <printmsg>
    bootloader_uart_write_data(&addr_invalid,1);
 8000d84:	f107 030e 	add.w	r3, r7, #14
 8000d88:	2101      	movs	r1, #1
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f928 	bl	8000fe0 <bootloader_uart_write_data>
}
 8000d90:	e004      	b.n	8000d9c <bootloader_handle_go_cmd+0xb0>
    printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000d92:	480a      	ldr	r0, [pc, #40]	@ (8000dbc <bootloader_handle_go_cmd+0xd0>)
 8000d94:	f7ff fdc2 	bl	800091c <printmsg>
    bootloader_send_nack();
 8000d98:	f000 f8ba 	bl	8000f10 <bootloader_send_nack>
}
 8000d9c:	bf00      	nop
 8000d9e:	3720      	adds	r7, #32
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	080051ec 	.word	0x080051ec
 8000da8:	200001d4 	.word	0x200001d4
 8000dac:	0800510c 	.word	0x0800510c
 8000db0:	08005214 	.word	0x08005214
 8000db4:	08005230 	.word	0x08005230
 8000db8:	08005258 	.word	0x08005258
 8000dbc:	08005130 	.word	0x08005130

08000dc0 <bootloader_handle_flash_erase_cmd>:

void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]

  uint8_t erase_status = 0x00;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73fb      	strb	r3, [r7, #15]
  printmsg("BL_DEBUG_MSG:bootloader_handle_flash_erase_cmd\n");
 8000dcc:	482b      	ldr	r0, [pc, #172]	@ (8000e7c <bootloader_handle_flash_erase_cmd+0xbc>)
 8000dce:	f7ff fda5 	bl	800091c <printmsg>

  //Total length of the command packet
  uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000dd2:	4b2b      	ldr	r3, [pc, #172]	@ (8000e80 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	617b      	str	r3, [r7, #20]

  //extract the CRC32 sent by the Host
  uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	3b04      	subs	r3, #4
 8000dde:	4a28      	ldr	r2, [pc, #160]	@ (8000e80 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000de0:	4413      	add	r3, r2
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	613b      	str	r3, [r7, #16]

  if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc)) {
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	3b04      	subs	r3, #4
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4619      	mov	r1, r3
 8000dee:	4824      	ldr	r0, [pc, #144]	@ (8000e80 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000df0:	f000 f8ba 	bl	8000f68 <bootloader_verify_crc>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d137      	bne.n	8000e6a <bootloader_handle_flash_erase_cmd+0xaa>

    printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000dfa:	4822      	ldr	r0, [pc, #136]	@ (8000e84 <bootloader_handle_flash_erase_cmd+0xc4>)
 8000dfc:	f7ff fd8e 	bl	800091c <printmsg>
    bootloader_send_ack(pBuffer[0],1);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2101      	movs	r1, #1
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 f894 	bl	8000f34 <bootloader_send_ack>
    printmsg("BL_DEBUG_MSG:initial_sector : %d  no_ofsectors: %d\n",pBuffer[2],pBuffer[3]);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3302      	adds	r3, #2
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	4619      	mov	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3303      	adds	r3, #3
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	481a      	ldr	r0, [pc, #104]	@ (8000e88 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000e1e:	f7ff fd7d 	bl	800091c <printmsg>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,1);
 8000e22:	2201      	movs	r2, #1
 8000e24:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e28:	4818      	ldr	r0, [pc, #96]	@ (8000e8c <bootloader_handle_flash_erase_cmd+0xcc>)
 8000e2a:	f001 f9d3 	bl	80021d4 <HAL_GPIO_WritePin>
    erase_status = execute_flash_erase(pBuffer[2] , pBuffer[3]);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3302      	adds	r3, #2
 8000e32:	781a      	ldrb	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3303      	adds	r3, #3
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	f000 f937 	bl	80010b0 <execute_flash_erase>
 8000e42:	4603      	mov	r3, r0
 8000e44:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e4c:	480f      	ldr	r0, [pc, #60]	@ (8000e8c <bootloader_handle_flash_erase_cmd+0xcc>)
 8000e4e:	f001 f9c1 	bl	80021d4 <HAL_GPIO_WritePin>

    printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",erase_status);
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	4619      	mov	r1, r3
 8000e56:	480e      	ldr	r0, [pc, #56]	@ (8000e90 <bootloader_handle_flash_erase_cmd+0xd0>)
 8000e58:	f7ff fd60 	bl	800091c <printmsg>

    bootloader_uart_write_data(&erase_status,1);
 8000e5c:	f107 030f 	add.w	r3, r7, #15
 8000e60:	2101      	movs	r1, #1
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f8bc 	bl	8000fe0 <bootloader_uart_write_data>
  } else {

    printmsg("BL_DEBUG_MSG:checksum fail !!\n");
    bootloader_send_nack();
  }
}
 8000e68:	e004      	b.n	8000e74 <bootloader_handle_flash_erase_cmd+0xb4>
    printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000e6a:	480a      	ldr	r0, [pc, #40]	@ (8000e94 <bootloader_handle_flash_erase_cmd+0xd4>)
 8000e6c:	f7ff fd56 	bl	800091c <printmsg>
    bootloader_send_nack();
 8000e70:	f000 f84e 	bl	8000f10 <bootloader_send_nack>
}
 8000e74:	bf00      	nop
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	0800527c 	.word	0x0800527c
 8000e80:	200001d4 	.word	0x200001d4
 8000e84:	0800510c 	.word	0x0800510c
 8000e88:	080052ac 	.word	0x080052ac
 8000e8c:	48000400 	.word	0x48000400
 8000e90:	080052e0 	.word	0x080052e0
 8000e94:	08005130 	.word	0x08005130

08000e98 <bootloader_handle_mem_write_cmd>:

void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]



}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <bootloader_handle_en_rw_protect>:

void bootloader_handle_en_rw_protect(uint8_t *pBuffer)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <bootloader_handle_mem_read>:

void bootloader_handle_mem_read(uint8_t *pBuffer)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <bootloader_handle_read_sector_protection_status>:

void bootloader_handle_read_sector_protection_status(uint8_t *pBuffer)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <bootloader_handle_read_otp>:

void bootloader_handle_read_otp(uint8_t *pBuffer)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <bootloader_handle_dis_rw_protect>:

void bootloader_handle_dis_rw_protect(uint8_t *pBuffer)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <bootloader_send_nack>:

void bootloader_send_nack(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 8000f16:	237f      	movs	r3, #127	@ 0x7f
 8000f18:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(C_UART, (uint8_t*)&nack, 1, HAL_MAX_DELAY);
 8000f1a:	1df9      	adds	r1, r7, #7
 8000f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f20:	2201      	movs	r2, #1
 8000f22:	4803      	ldr	r0, [pc, #12]	@ (8000f30 <bootloader_send_nack+0x20>)
 8000f24:	f002 fd38 	bl	8003998 <HAL_UART_Transmit>

}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	2000014c 	.word	0x2000014c

08000f34 <bootloader_send_ack>:

void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	460a      	mov	r2, r1
 8000f3e:	71fb      	strb	r3, [r7, #7]
 8000f40:	4613      	mov	r3, r2
 8000f42:	71bb      	strb	r3, [r7, #6]
	/* 2 Bytes are sent, first byte is ACK and second is the length value */
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 8000f44:	23a5      	movs	r3, #165	@ 0xa5
 8000f46:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 8000f48:	79bb      	ldrb	r3, [r7, #6]
 8000f4a:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(C_UART, (uint8_t*)&ack_buf, 2, HAL_MAX_DELAY);
 8000f4c:	f107 010c 	add.w	r1, r7, #12
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
 8000f54:	2202      	movs	r2, #2
 8000f56:	4803      	ldr	r0, [pc, #12]	@ (8000f64 <bootloader_send_ack+0x30>)
 8000f58:	f002 fd1e 	bl	8003998 <HAL_UART_Transmit>
}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	2000014c 	.word	0x2000014c

08000f68 <bootloader_verify_crc>:

uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len,uint32_t crc_host)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
	uint32_t uwCRCValue = 0xff;
 8000f74:	23ff      	movs	r3, #255	@ 0xff
 8000f76:	61fb      	str	r3, [r7, #28]

	for(uint32_t i=0; i<len; i++)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61bb      	str	r3, [r7, #24]
 8000f7c:	e00f      	b.n	8000f9e <bootloader_verify_crc+0x36>
	{
		uint32_t i_data = pData[i];
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	4413      	add	r3, r2
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	617b      	str	r3, [r7, #20]
		uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480e      	ldr	r0, [pc, #56]	@ (8000fcc <bootloader_verify_crc+0x64>)
 8000f92:	f000 fc0d 	bl	80017b0 <HAL_CRC_Accumulate>
 8000f96:	61f8      	str	r0, [r7, #28]
	for(uint32_t i=0; i<len; i++)
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	61bb      	str	r3, [r7, #24]
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d3eb      	bcc.n	8000f7e <bootloader_verify_crc+0x16>
	}

	/* Reset CRC Calculation Unit */
	__HAL_CRC_DR_RESET(&hcrc);
 8000fa6:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <bootloader_verify_crc+0x64>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	4b07      	ldr	r3, [pc, #28]	@ (8000fcc <bootloader_verify_crc+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f042 0201 	orr.w	r2, r2, #1
 8000fb4:	609a      	str	r2, [r3, #8]

	if(uwCRCValue == crc_host)
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d101      	bne.n	8000fc2 <bootloader_verify_crc+0x5a>
	{
		return VERIFY_CRC_SUCCESS;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e000      	b.n	8000fc4 <bootloader_verify_crc+0x5c>
	}
	return VERIFY_CRC_FAIL;
 8000fc2:	2301      	movs	r3, #1
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3720      	adds	r7, #32
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	200000a0 	.word	0x200000a0

08000fd0 <get_bootloader_version>:

uint8_t get_bootloader_version(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
	return (uint8_t)BL_VERSION;
 8000fd4:	2310      	movs	r3, #16
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <bootloader_uart_write_data>:

void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(C_UART, pBuffer, len, HAL_MAX_DELAY);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	4803      	ldr	r0, [pc, #12]	@ (8001004 <bootloader_uart_write_data+0x24>)
 8000ff6:	f002 fccf 	bl	8003998 <HAL_UART_Transmit>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000014c 	.word	0x2000014c

08001008 <get_mcu_chip_id>:

uint16_t get_mcu_chip_id(void)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
	   the user software. It is even accessible while the MCU is under system reset.
	 */

	uint16_t cid;
	/* Reading the register and masking the unnecessary bits */
	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 800100e:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <get_mcu_chip_id+0x20>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	b29b      	uxth	r3, r3
 8001014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001018:	80fb      	strh	r3, [r7, #6]
	return  cid;
 800101a:	88fb      	ldrh	r3, [r7, #6]

}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e0042000 	.word	0xe0042000

0800102c <get_flash_rdp_level>:

uint8_t get_flash_rdp_level(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef  ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
	rdp_status = (uint8_t)ob_handle.RDPLevel;
#else

	uint8_t rdp_status = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	71fb      	strb	r3, [r7, #7]

	volatile uint32_t *pOB_addr = (uint32_t*) 0x1FFF7800; /* Address of User and read protection option bytes register*/
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <get_flash_rdp_level+0x24>)
 8001038:	603b      	str	r3, [r7, #0]
	rdp_status = (uint8_t)(*pOB_addr); /*The the first byte from LSB of the register for RDP*/
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	71fb      	strb	r3, [r7, #7]

	return rdp_status;
 8001040:	79fb      	ldrb	r3, [r7, #7]
#endif
}
 8001042:	4618      	mov	r0, r3
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	1fff7800 	.word	0x1fff7800

08001054 <verify_address>:

uint8_t verify_address(uint32_t go_address)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	/*Jump to FLASH, System Memory, SRAM1, SRAM2, Backup SRAM allowed,
	 * others such as peripheral memory not allowed*/

	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001062:	d305      	bcc.n	8001070 <verify_address+0x1c>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a10      	ldr	r2, [pc, #64]	@ (80010a8 <verify_address+0x54>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d801      	bhi.n	8001070 <verify_address+0x1c>

		return ADDR_VALID;
 800106c:	2300      	movs	r3, #0
 800106e:	e014      	b.n	800109a <verify_address+0x46>
	} else if ( go_address >= SRAM2_BASE && go_address <= SRAM2_END) {
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001076:	d305      	bcc.n	8001084 <verify_address+0x30>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a0c      	ldr	r2, [pc, #48]	@ (80010ac <verify_address+0x58>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d801      	bhi.n	8001084 <verify_address+0x30>

		return ADDR_VALID;
 8001080:	2300      	movs	r3, #0
 8001082:	e00a      	b.n	800109a <verify_address+0x46>
	} else if ( go_address >= FLASH_BASE && go_address <= FLASH_END) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800108a:	d305      	bcc.n	8001098 <verify_address+0x44>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8001092:	d201      	bcs.n	8001098 <verify_address+0x44>

		return ADDR_VALID;
 8001094:	2300      	movs	r3, #0
 8001096:	e000      	b.n	800109a <verify_address+0x46>
	}else
	return ADDR_INVALID;
 8001098:	2301      	movs	r3, #1
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20040000 	.word	0x20040000
 80010ac:	10010000 	.word	0x10010000

080010b0 <execute_flash_erase>:


uint8_t execute_flash_erase(uint8_t page_number , uint8_t number_of_pages) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	460a      	mov	r2, r1
 80010ba:	71fb      	strb	r3, [r7, #7]
 80010bc:	4613      	mov	r3, r2
 80010be:	71bb      	strb	r3, [r7, #6]

  if( number_of_pages > 511 )
    return INVALID_SECTOR;

  if( (page_number == 0xff ) || (page_number <= 511) ) {
    if(page_number == (uint8_t) 0xff) {
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	2bff      	cmp	r3, #255	@ 0xff
 80010c4:	d102      	bne.n	80010cc <execute_flash_erase+0x1c>
    flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 80010c6:	2301      	movs	r3, #1
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	e00e      	b.n	80010ea <execute_flash_erase+0x3a>

    } else {
      /*Here we are just calculating how many sectors needs to erased */
      uint8_t remanining_page = 511 - page_number;
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	77fb      	strb	r3, [r7, #31]
      if( number_of_pages > remanining_page) {
 80010d2:	79ba      	ldrb	r2, [r7, #6]
 80010d4:	7ffb      	ldrb	r3, [r7, #31]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d901      	bls.n	80010de <execute_flash_erase+0x2e>

    	  number_of_pages = remanining_page;
 80010da:	7ffb      	ldrb	r3, [r7, #31]
 80010dc:	71bb      	strb	r3, [r7, #6]
      }
      flashErase_handle.TypeErase = FLASH_TYPEERASE_PAGES; /*Macro from HAL*/
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
      flashErase_handle.Page = page_number; // This is the initial page
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	617b      	str	r3, [r7, #20]
      flashErase_handle.NbPages = number_of_pages;
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	61bb      	str	r3, [r7, #24]
    }
    flashErase_handle.Banks = FLASH_BANK_1;
 80010ea:	2301      	movs	r3, #1
 80010ec:	613b      	str	r3, [r7, #16]

    /*Get access to the flash registers, unlock them first */
    HAL_FLASH_Unlock();
 80010ee:	f000 fcfb 	bl	8001ae8 <HAL_FLASH_Unlock>
    status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 80010f2:	f107 0208 	add.w	r2, r7, #8
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 fd7b 	bl	8001bf8 <HAL_FLASHEx_Erase>
 8001102:	4603      	mov	r3, r0
 8001104:	77bb      	strb	r3, [r7, #30]
    HAL_FLASH_Lock();
 8001106:	f000 fd11 	bl	8001b2c <HAL_FLASH_Lock>

    return status;
 800110a:	7fbb      	ldrb	r3, [r7, #30]
  }

  return INVALID_SECTOR;
}
 800110c:	4618      	mov	r0, r3
 800110e:	3720      	adds	r7, #32
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001118:	b672      	cpsid	i
}
 800111a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <Error_Handler+0x8>

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <HAL_MspInit+0x44>)
 8001128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800112a:	4a0e      	ldr	r2, [pc, #56]	@ (8001164 <HAL_MspInit+0x44>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6613      	str	r3, [r2, #96]	@ 0x60
 8001132:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <HAL_MspInit+0x44>)
 8001134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <HAL_MspInit+0x44>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001142:	4a08      	ldr	r2, [pc, #32]	@ (8001164 <HAL_MspInit+0x44>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001148:	6593      	str	r3, [r2, #88]	@ 0x58
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_MspInit+0x44>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000

08001168 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <HAL_CRC_MspInit+0x38>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d10b      	bne.n	8001192 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800117a:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <HAL_CRC_MspInit+0x3c>)
 800117c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800117e:	4a09      	ldr	r2, [pc, #36]	@ (80011a4 <HAL_CRC_MspInit+0x3c>)
 8001180:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001184:	6493      	str	r3, [r2, #72]	@ 0x48
 8001186:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <HAL_CRC_MspInit+0x3c>)
 8001188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800118a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001192:	bf00      	nop
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40023000 	.word	0x40023000
 80011a4:	40021000 	.word	0x40021000

080011a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b0ae      	sub	sp, #184	@ 0xb8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c0:	f107 0318 	add.w	r3, r7, #24
 80011c4:	228c      	movs	r2, #140	@ 0x8c
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f003 fa2b 	bl	8004624 <memset>
  if(huart->Instance==LPUART1)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a43      	ldr	r2, [pc, #268]	@ (80012e0 <HAL_UART_MspInit+0x138>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d13e      	bne.n	8001256 <HAL_UART_MspInit+0xae>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80011d8:	2320      	movs	r3, #32
 80011da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80011dc:	2300      	movs	r3, #0
 80011de:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e0:	f107 0318 	add.w	r3, r7, #24
 80011e4:	4618      	mov	r0, r3
 80011e6:	f001 febf 	bl	8002f68 <HAL_RCCEx_PeriphCLKConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011f0:	f7ff ff90 	bl	8001114 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80011f4:	4b3b      	ldr	r3, [pc, #236]	@ (80012e4 <HAL_UART_MspInit+0x13c>)
 80011f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011f8:	4a3a      	ldr	r2, [pc, #232]	@ (80012e4 <HAL_UART_MspInit+0x13c>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001200:	4b38      	ldr	r3, [pc, #224]	@ (80012e4 <HAL_UART_MspInit+0x13c>)
 8001202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800120c:	4b35      	ldr	r3, [pc, #212]	@ (80012e4 <HAL_UART_MspInit+0x13c>)
 800120e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001210:	4a34      	ldr	r2, [pc, #208]	@ (80012e4 <HAL_UART_MspInit+0x13c>)
 8001212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001216:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001218:	4b32      	ldr	r3, [pc, #200]	@ (80012e4 <HAL_UART_MspInit+0x13c>)
 800121a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001224:	f001 f852 	bl	80022cc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001228:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800122c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001242:	2308      	movs	r3, #8
 8001244:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001248:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800124c:	4619      	mov	r1, r3
 800124e:	4826      	ldr	r0, [pc, #152]	@ (80012e8 <HAL_UART_MspInit+0x140>)
 8001250:	f000 fe16 	bl	8001e80 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001254:	e040      	b.n	80012d8 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART2)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a24      	ldr	r2, [pc, #144]	@ (80012ec <HAL_UART_MspInit+0x144>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d13b      	bne.n	80012d8 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001260:	2302      	movs	r3, #2
 8001262:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001264:	2300      	movs	r3, #0
 8001266:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001268:	f107 0318 	add.w	r3, r7, #24
 800126c:	4618      	mov	r0, r3
 800126e:	f001 fe7b 	bl	8002f68 <HAL_RCCEx_PeriphCLKConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001278:	f7ff ff4c 	bl	8001114 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800127c:	4b19      	ldr	r3, [pc, #100]	@ (80012e4 <HAL_UART_MspInit+0x13c>)
 800127e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001280:	4a18      	ldr	r2, [pc, #96]	@ (80012e4 <HAL_UART_MspInit+0x13c>)
 8001282:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001286:	6593      	str	r3, [r2, #88]	@ 0x58
 8001288:	4b16      	ldr	r3, [pc, #88]	@ (80012e4 <HAL_UART_MspInit+0x13c>)
 800128a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001294:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <HAL_UART_MspInit+0x13c>)
 8001296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001298:	4a12      	ldr	r2, [pc, #72]	@ (80012e4 <HAL_UART_MspInit+0x13c>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a0:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <HAL_UART_MspInit+0x13c>)
 80012a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012ac:	230c      	movs	r3, #12
 80012ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012c4:	2307      	movs	r3, #7
 80012c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012ce:	4619      	mov	r1, r3
 80012d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d4:	f000 fdd4 	bl	8001e80 <HAL_GPIO_Init>
}
 80012d8:	bf00      	nop
 80012da:	37b8      	adds	r7, #184	@ 0xb8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40008000 	.word	0x40008000
 80012e4:	40021000 	.word	0x40021000
 80012e8:	48001800 	.word	0x48001800
 80012ec:	40004400 	.word	0x40004400

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <NMI_Handler+0x4>

080012f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <HardFault_Handler+0x4>

08001300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <MemManage_Handler+0x4>

08001308 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <BusFault_Handler+0x4>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <UsageFault_Handler+0x4>

08001318 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001346:	f000 f8c9 	bl	80014dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001358:	4a14      	ldr	r2, [pc, #80]	@ (80013ac <_sbrk+0x5c>)
 800135a:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <_sbrk+0x60>)
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001364:	4b13      	ldr	r3, [pc, #76]	@ (80013b4 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d102      	bne.n	8001372 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800136c:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <_sbrk+0x64>)
 800136e:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <_sbrk+0x68>)
 8001370:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001372:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	429a      	cmp	r2, r3
 800137e:	d207      	bcs.n	8001390 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001380:	f003 f958 	bl	8004634 <__errno>
 8001384:	4603      	mov	r3, r0
 8001386:	220c      	movs	r2, #12
 8001388:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	e009      	b.n	80013a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001390:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <_sbrk+0x64>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001396:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <_sbrk+0x64>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	4a05      	ldr	r2, [pc, #20]	@ (80013b4 <_sbrk+0x64>)
 80013a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013a2:	68fb      	ldr	r3, [r7, #12]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20040000 	.word	0x20040000
 80013b0:	00000400 	.word	0x00000400
 80013b4:	2000029c 	.word	0x2000029c
 80013b8:	200003f0 	.word	0x200003f0

080013bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <SystemInit+0x20>)
 80013c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013c6:	4a05      	ldr	r2, [pc, #20]	@ (80013dc <SystemInit+0x20>)
 80013c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001418 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013e4:	f7ff ffea 	bl	80013bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e8:	480c      	ldr	r0, [pc, #48]	@ (800141c <LoopForever+0x6>)
  ldr r1, =_edata
 80013ea:	490d      	ldr	r1, [pc, #52]	@ (8001420 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001424 <LoopForever+0xe>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001428 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001400:	4c0a      	ldr	r4, [pc, #40]	@ (800142c <LoopForever+0x16>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800140e:	f003 f917 	bl	8004640 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001412:	f7ff f8db 	bl	80005cc <main>

08001416 <LoopForever>:

LoopForever:
    b LoopForever
 8001416:	e7fe      	b.n	8001416 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001418:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800141c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001420:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001424:	08005394 	.word	0x08005394
  ldr r2, =_sbss
 8001428:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 800142c:	200003ec 	.word	0x200003ec

08001430 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001430:	e7fe      	b.n	8001430 <ADC1_2_IRQHandler>

08001432 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800143c:	2003      	movs	r0, #3
 800143e:	f000 f91f 	bl	8001680 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001442:	2000      	movs	r0, #0
 8001444:	f000 f80e 	bl	8001464 <HAL_InitTick>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d002      	beq.n	8001454 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	71fb      	strb	r3, [r7, #7]
 8001452:	e001      	b.n	8001458 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001454:	f7ff fe64 	bl	8001120 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001458:	79fb      	ldrb	r3, [r7, #7]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001470:	4b17      	ldr	r3, [pc, #92]	@ (80014d0 <HAL_InitTick+0x6c>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d023      	beq.n	80014c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001478:	4b16      	ldr	r3, [pc, #88]	@ (80014d4 <HAL_InitTick+0x70>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b14      	ldr	r3, [pc, #80]	@ (80014d0 <HAL_InitTick+0x6c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001486:	fbb3 f3f1 	udiv	r3, r3, r1
 800148a:	fbb2 f3f3 	udiv	r3, r2, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f91d 	bl	80016ce <HAL_SYSTICK_Config>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10f      	bne.n	80014ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	d809      	bhi.n	80014b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a0:	2200      	movs	r2, #0
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f000 f8f5 	bl	8001696 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014ac:	4a0a      	ldr	r2, [pc, #40]	@ (80014d8 <HAL_InitTick+0x74>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e007      	b.n	80014c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	e004      	b.n	80014c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	73fb      	strb	r3, [r7, #15]
 80014be:	e001      	b.n	80014c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000010 	.word	0x20000010
 80014d4:	20000008 	.word	0x20000008
 80014d8:	2000000c 	.word	0x2000000c

080014dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014e0:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <HAL_IncTick+0x20>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <HAL_IncTick+0x24>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	4a04      	ldr	r2, [pc, #16]	@ (8001500 <HAL_IncTick+0x24>)
 80014ee:	6013      	str	r3, [r2, #0]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000010 	.word	0x20000010
 8001500:	200002a0 	.word	0x200002a0

08001504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return uwTick;
 8001508:	4b03      	ldr	r3, [pc, #12]	@ (8001518 <HAL_GetTick+0x14>)
 800150a:	681b      	ldr	r3, [r3, #0]
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	200002a0 	.word	0x200002a0

0800151c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001538:	4013      	ands	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001544:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800154c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154e:	4a04      	ldr	r2, [pc, #16]	@ (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	60d3      	str	r3, [r2, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b04      	ldr	r3, [pc, #16]	@ (800157c <__NVIC_GetPriorityGrouping+0x18>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 0307 	and.w	r3, r3, #7
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001590:	2b00      	cmp	r3, #0
 8001592:	db0a      	blt.n	80015aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	b2da      	uxtb	r2, r3
 8001598:	490c      	ldr	r1, [pc, #48]	@ (80015cc <__NVIC_SetPriority+0x4c>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	440b      	add	r3, r1
 80015a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a8:	e00a      	b.n	80015c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4908      	ldr	r1, [pc, #32]	@ (80015d0 <__NVIC_SetPriority+0x50>)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	3b04      	subs	r3, #4
 80015b8:	0112      	lsls	r2, r2, #4
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	440b      	add	r3, r1
 80015be:	761a      	strb	r2, [r3, #24]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000e100 	.word	0xe000e100
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	@ 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f1c3 0307 	rsb	r3, r3, #7
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	bf28      	it	cs
 80015f2:	2304      	movcs	r3, #4
 80015f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3304      	adds	r3, #4
 80015fa:	2b06      	cmp	r3, #6
 80015fc:	d902      	bls.n	8001604 <NVIC_EncodePriority+0x30>
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3b03      	subs	r3, #3
 8001602:	e000      	b.n	8001606 <NVIC_EncodePriority+0x32>
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	f04f 32ff 	mov.w	r2, #4294967295
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43da      	mvns	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	401a      	ands	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800161c:	f04f 31ff 	mov.w	r1, #4294967295
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	43d9      	mvns	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	4313      	orrs	r3, r2
         );
}
 800162e:	4618      	mov	r0, r3
 8001630:	3724      	adds	r7, #36	@ 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800164c:	d301      	bcc.n	8001652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164e:	2301      	movs	r3, #1
 8001650:	e00f      	b.n	8001672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001652:	4a0a      	ldr	r2, [pc, #40]	@ (800167c <SysTick_Config+0x40>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165a:	210f      	movs	r1, #15
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f7ff ff8e 	bl	8001580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001664:	4b05      	ldr	r3, [pc, #20]	@ (800167c <SysTick_Config+0x40>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166a:	4b04      	ldr	r3, [pc, #16]	@ (800167c <SysTick_Config+0x40>)
 800166c:	2207      	movs	r2, #7
 800166e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	e000e010 	.word	0xe000e010

08001680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ff47 	bl	800151c <__NVIC_SetPriorityGrouping>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016a8:	f7ff ff5c 	bl	8001564 <__NVIC_GetPriorityGrouping>
 80016ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	6978      	ldr	r0, [r7, #20]
 80016b4:	f7ff ff8e 	bl	80015d4 <NVIC_EncodePriority>
 80016b8:	4602      	mov	r2, r0
 80016ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff5d 	bl	8001580 <__NVIC_SetPriority>
}
 80016c6:	bf00      	nop
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff ffb0 	bl	800163c <SysTick_Config>
 80016dc:	4603      	mov	r3, r0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e054      	b.n	80017a4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7f5b      	ldrb	r3, [r3, #29]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d105      	bne.n	8001710 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff fd2c 	bl	8001168 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2202      	movs	r2, #2
 8001714:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	791b      	ldrb	r3, [r3, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10c      	bne.n	8001738 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a22      	ldr	r2, [pc, #136]	@ (80017ac <HAL_CRC_Init+0xc4>)
 8001724:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0218 	bic.w	r2, r2, #24
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	e00c      	b.n	8001752 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6899      	ldr	r1, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	461a      	mov	r2, r3
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f942 	bl	80019cc <HAL_CRCEx_Polynomial_Set>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e028      	b.n	80017a4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	795b      	ldrb	r3, [r3, #5]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d105      	bne.n	8001766 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f04f 32ff 	mov.w	r2, #4294967295
 8001762:	611a      	str	r2, [r3, #16]
 8001764:	e004      	b.n	8001770 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6912      	ldr	r2, [r2, #16]
 800176e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695a      	ldr	r2, [r3, #20]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699a      	ldr	r2, [r3, #24]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	04c11db7 	.word	0x04c11db7

080017b0 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80017bc:	2300      	movs	r3, #0
 80017be:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2202      	movs	r2, #2
 80017c4:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d006      	beq.n	80017dc <HAL_CRC_Accumulate+0x2c>
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d829      	bhi.n	8001826 <HAL_CRC_Accumulate+0x76>
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d019      	beq.n	800180a <HAL_CRC_Accumulate+0x5a>
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d01e      	beq.n	8001818 <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 80017da:	e024      	b.n	8001826 <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	e00a      	b.n	80017f8 <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	441a      	add	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d3f0      	bcc.n	80017e2 <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	613b      	str	r3, [r7, #16]
      break;
 8001808:	e00e      	b.n	8001828 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	68b9      	ldr	r1, [r7, #8]
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 f812 	bl	8001838 <CRC_Handle_8>
 8001814:	6138      	str	r0, [r7, #16]
      break;
 8001816:	e007      	b.n	8001828 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	68b9      	ldr	r1, [r7, #8]
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f000 f89b 	bl	8001958 <CRC_Handle_16>
 8001822:	6138      	str	r0, [r7, #16]
      break;
 8001824:	e000      	b.n	8001828 <HAL_CRC_Accumulate+0x78>
      break;
 8001826:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2201      	movs	r2, #1
 800182c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800182e:	693b      	ldr	r3, [r7, #16]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	@ 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
 8001848:	e023      	b.n	8001892 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	4413      	add	r3, r2
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	3301      	adds	r3, #1
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	440b      	add	r3, r1
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001864:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	3302      	adds	r3, #2
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	440b      	add	r3, r1
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001874:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	3303      	adds	r3, #3
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	440b      	add	r3, r1
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001888:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800188a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	3301      	adds	r3, #1
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	089b      	lsrs	r3, r3, #2
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	429a      	cmp	r2, r3
 800189a:	d3d6      	bcc.n	800184a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d04f      	beq.n	8001946 <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d107      	bne.n	80018c0 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	68ba      	ldr	r2, [r7, #8]
 80018b6:	4413      	add	r3, r2
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d117      	bne.n	80018fa <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	4413      	add	r3, r2
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	b21b      	sxth	r3, r3
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	b21a      	sxth	r2, r3
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	3301      	adds	r3, #1
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	440b      	add	r3, r1
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	b21b      	sxth	r3, r3
 80018e8:	4313      	orrs	r3, r2
 80018ea:	b21b      	sxth	r3, r3
 80018ec:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	8b7a      	ldrh	r2, [r7, #26]
 80018f8:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b03      	cmp	r3, #3
 8001902:	d120      	bne.n	8001946 <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	4413      	add	r3, r2
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	b21b      	sxth	r3, r3
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	b21a      	sxth	r2, r3
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	3301      	adds	r3, #1
 800191a:	68b9      	ldr	r1, [r7, #8]
 800191c:	440b      	add	r3, r1
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b21b      	sxth	r3, r3
 8001922:	4313      	orrs	r3, r2
 8001924:	b21b      	sxth	r3, r3
 8001926:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	8b7a      	ldrh	r2, [r7, #26]
 8001932:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	3302      	adds	r3, #2
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	4413      	add	r3, r2
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3724      	adds	r7, #36	@ 0x24
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	e013      	b.n	8001992 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	4413      	add	r3, r2
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	041a      	lsls	r2, r3, #16
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	3302      	adds	r3, #2
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	440b      	add	r3, r1
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	4619      	mov	r1, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	3301      	adds	r3, #1
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	085b      	lsrs	r3, r3, #1
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	429a      	cmp	r2, r3
 800199a:	d3e6      	bcc.n	800196a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d009      	beq.n	80019ba <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	4413      	add	r3, r2
 80019b4:	881a      	ldrh	r2, [r3, #0]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	371c      	adds	r7, #28
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80019dc:	231f      	movs	r3, #31
 80019de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d102      	bne.n	80019f0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	75fb      	strb	r3, [r7, #23]
 80019ee:	e063      	b.n	8001ab8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80019f0:	bf00      	nop
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1e5a      	subs	r2, r3, #1
 80019f6:	613a      	str	r2, [r7, #16]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d009      	beq.n	8001a10 <HAL_CRCEx_Polynomial_Set+0x44>
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	f003 031f 	and.w	r3, r3, #31
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	fa22 f303 	lsr.w	r3, r2, r3
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0f0      	beq.n	80019f2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b18      	cmp	r3, #24
 8001a14:	d846      	bhi.n	8001aa4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001a16:	a201      	add	r2, pc, #4	@ (adr r2, 8001a1c <HAL_CRCEx_Polynomial_Set+0x50>)
 8001a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1c:	08001aab 	.word	0x08001aab
 8001a20:	08001aa5 	.word	0x08001aa5
 8001a24:	08001aa5 	.word	0x08001aa5
 8001a28:	08001aa5 	.word	0x08001aa5
 8001a2c:	08001aa5 	.word	0x08001aa5
 8001a30:	08001aa5 	.word	0x08001aa5
 8001a34:	08001aa5 	.word	0x08001aa5
 8001a38:	08001aa5 	.word	0x08001aa5
 8001a3c:	08001a99 	.word	0x08001a99
 8001a40:	08001aa5 	.word	0x08001aa5
 8001a44:	08001aa5 	.word	0x08001aa5
 8001a48:	08001aa5 	.word	0x08001aa5
 8001a4c:	08001aa5 	.word	0x08001aa5
 8001a50:	08001aa5 	.word	0x08001aa5
 8001a54:	08001aa5 	.word	0x08001aa5
 8001a58:	08001aa5 	.word	0x08001aa5
 8001a5c:	08001a8d 	.word	0x08001a8d
 8001a60:	08001aa5 	.word	0x08001aa5
 8001a64:	08001aa5 	.word	0x08001aa5
 8001a68:	08001aa5 	.word	0x08001aa5
 8001a6c:	08001aa5 	.word	0x08001aa5
 8001a70:	08001aa5 	.word	0x08001aa5
 8001a74:	08001aa5 	.word	0x08001aa5
 8001a78:	08001aa5 	.word	0x08001aa5
 8001a7c:	08001a81 	.word	0x08001a81
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d913      	bls.n	8001aae <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001a8a:	e010      	b.n	8001aae <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	2b07      	cmp	r3, #7
 8001a90:	d90f      	bls.n	8001ab2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001a96:	e00c      	b.n	8001ab2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	2b0f      	cmp	r3, #15
 8001a9c:	d90b      	bls.n	8001ab6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001aa2:	e008      	b.n	8001ab6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	75fb      	strb	r3, [r7, #23]
        break;
 8001aa8:	e006      	b.n	8001ab8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001aaa:	bf00      	nop
 8001aac:	e004      	b.n	8001ab8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001aae:	bf00      	nop
 8001ab0:	e002      	b.n	8001ab8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001ab2:	bf00      	nop
 8001ab4:	e000      	b.n	8001ab8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001ab6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10d      	bne.n	8001ada <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f023 0118 	bic.w	r1, r3, #24
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	371c      	adds	r7, #28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001af2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b20 <HAL_FLASH_Unlock+0x38>)
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	da0b      	bge.n	8001b12 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001afa:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <HAL_FLASH_Unlock+0x38>)
 8001afc:	4a09      	ldr	r2, [pc, #36]	@ (8001b24 <HAL_FLASH_Unlock+0x3c>)
 8001afe:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001b00:	4b07      	ldr	r3, [pc, #28]	@ (8001b20 <HAL_FLASH_Unlock+0x38>)
 8001b02:	4a09      	ldr	r2, [pc, #36]	@ (8001b28 <HAL_FLASH_Unlock+0x40>)
 8001b04:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001b06:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <HAL_FLASH_Unlock+0x38>)
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	da01      	bge.n	8001b12 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001b12:	79fb      	ldrb	r3, [r7, #7]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	40022000 	.word	0x40022000
 8001b24:	45670123 	.word	0x45670123
 8001b28:	cdef89ab 	.word	0xcdef89ab

08001b2c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001b30:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <HAL_FLASH_Lock+0x1c>)
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	4a04      	ldr	r2, [pc, #16]	@ (8001b48 <HAL_FLASH_Lock+0x1c>)
 8001b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001b3a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	40022000 	.word	0x40022000

08001b4c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001b54:	f7ff fcd6 	bl	8001504 <HAL_GetTick>
 8001b58:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001b5a:	e00d      	b.n	8001b78 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b62:	d009      	beq.n	8001b78 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001b64:	f7ff fcce 	bl	8001504 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d801      	bhi.n	8001b78 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e036      	b.n	8001be6 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001b78:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf0 <FLASH_WaitForLastOperation+0xa4>)
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1eb      	bne.n	8001b5c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001b84:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf0 <FLASH_WaitForLastOperation+0xa4>)
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d01d      	beq.n	8001bd2 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001b96:	4b17      	ldr	r3, [pc, #92]	@ (8001bf4 <FLASH_WaitForLastOperation+0xa8>)
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	4a15      	ldr	r2, [pc, #84]	@ (8001bf4 <FLASH_WaitForLastOperation+0xa8>)
 8001ba0:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ba8:	d307      	bcc.n	8001bba <FLASH_WaitForLastOperation+0x6e>
 8001baa:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <FLASH_WaitForLastOperation+0xa4>)
 8001bac:	699a      	ldr	r2, [r3, #24]
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8001bb4:	490e      	ldr	r1, [pc, #56]	@ (8001bf0 <FLASH_WaitForLastOperation+0xa4>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	618b      	str	r3, [r1, #24]
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d004      	beq.n	8001bce <FLASH_WaitForLastOperation+0x82>
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <FLASH_WaitForLastOperation+0xa4>)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001bcc:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e009      	b.n	8001be6 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001bd2:	4b07      	ldr	r3, [pc, #28]	@ (8001bf0 <FLASH_WaitForLastOperation+0xa4>)
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001bde:	4b04      	ldr	r3, [pc, #16]	@ (8001bf0 <FLASH_WaitForLastOperation+0xa4>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40022000 	.word	0x40022000
 8001bf4:	20000014 	.word	0x20000014

08001bf8 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001c02:	4b49      	ldr	r3, [pc, #292]	@ (8001d28 <HAL_FLASHEx_Erase+0x130>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d101      	bne.n	8001c0e <HAL_FLASHEx_Erase+0x16>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e087      	b.n	8001d1e <HAL_FLASHEx_Erase+0x126>
 8001c0e:	4b46      	ldr	r3, [pc, #280]	@ (8001d28 <HAL_FLASHEx_Erase+0x130>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c14:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001c18:	f7ff ff98 	bl	8001b4c <FLASH_WaitForLastOperation>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d177      	bne.n	8001d16 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c26:	4b40      	ldr	r3, [pc, #256]	@ (8001d28 <HAL_FLASHEx_Erase+0x130>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8001c2c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d2c <HAL_FLASHEx_Erase+0x134>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d013      	beq.n	8001c60 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001c38:	4b3c      	ldr	r3, [pc, #240]	@ (8001d2c <HAL_FLASHEx_Erase+0x134>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d009      	beq.n	8001c58 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8001c44:	4b39      	ldr	r3, [pc, #228]	@ (8001d2c <HAL_FLASHEx_Erase+0x134>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a38      	ldr	r2, [pc, #224]	@ (8001d2c <HAL_FLASHEx_Erase+0x134>)
 8001c4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001c4e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001c50:	4b35      	ldr	r3, [pc, #212]	@ (8001d28 <HAL_FLASHEx_Erase+0x130>)
 8001c52:	2203      	movs	r2, #3
 8001c54:	771a      	strb	r2, [r3, #28]
 8001c56:	e016      	b.n	8001c86 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001c58:	4b33      	ldr	r3, [pc, #204]	@ (8001d28 <HAL_FLASHEx_Erase+0x130>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	771a      	strb	r2, [r3, #28]
 8001c5e:	e012      	b.n	8001c86 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001c60:	4b32      	ldr	r3, [pc, #200]	@ (8001d2c <HAL_FLASHEx_Erase+0x134>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d009      	beq.n	8001c80 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d2c <HAL_FLASHEx_Erase+0x134>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a2e      	ldr	r2, [pc, #184]	@ (8001d2c <HAL_FLASHEx_Erase+0x134>)
 8001c72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001c76:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001c78:	4b2b      	ldr	r3, [pc, #172]	@ (8001d28 <HAL_FLASHEx_Erase+0x130>)
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	771a      	strb	r2, [r3, #28]
 8001c7e:	e002      	b.n	8001c86 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001c80:	4b29      	ldr	r3, [pc, #164]	@ (8001d28 <HAL_FLASHEx_Erase+0x130>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d113      	bne.n	8001cb6 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 f84c 	bl	8001d30 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c98:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001c9c:	f7ff ff56 	bl	8001b4c <FLASH_WaitForLastOperation>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8001ca4:	4b21      	ldr	r3, [pc, #132]	@ (8001d2c <HAL_FLASHEx_Erase+0x134>)
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	4a20      	ldr	r2, [pc, #128]	@ (8001d2c <HAL_FLASHEx_Erase+0x134>)
 8001caa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001cae:	f023 0304 	bic.w	r3, r3, #4
 8001cb2:	6153      	str	r3, [r2, #20]
 8001cb4:	e02d      	b.n	8001d12 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cbc:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	e01d      	b.n	8001d02 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	68b8      	ldr	r0, [r7, #8]
 8001cce:	f000 f857 	bl	8001d80 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001cd2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001cd6:	f7ff ff39 	bl	8001b4c <FLASH_WaitForLastOperation>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001cde:	4b13      	ldr	r3, [pc, #76]	@ (8001d2c <HAL_FLASHEx_Erase+0x134>)
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	4a12      	ldr	r2, [pc, #72]	@ (8001d2c <HAL_FLASHEx_Erase+0x134>)
 8001ce4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001ce8:	f023 0302 	bic.w	r3, r3, #2
 8001cec:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	601a      	str	r2, [r3, #0]
          break;
 8001cfa:	e00a      	b.n	8001d12 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d3d9      	bcc.n	8001cc6 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001d12:	f000 f86b 	bl	8001dec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001d16:	4b04      	ldr	r3, [pc, #16]	@ (8001d28 <HAL_FLASHEx_Erase+0x130>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]

  return status;
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000014 	.word	0x20000014
 8001d2c:	40022000 	.word	0x40022000

08001d30 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d005      	beq.n	8001d4e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8001d42:	4b0e      	ldr	r3, [pc, #56]	@ (8001d7c <FLASH_MassErase+0x4c>)
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	4a0d      	ldr	r2, [pc, #52]	@ (8001d7c <FLASH_MassErase+0x4c>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8001d58:	4b08      	ldr	r3, [pc, #32]	@ (8001d7c <FLASH_MassErase+0x4c>)
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	4a07      	ldr	r2, [pc, #28]	@ (8001d7c <FLASH_MassErase+0x4c>)
 8001d5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d62:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001d64:	4b05      	ldr	r3, [pc, #20]	@ (8001d7c <FLASH_MassErase+0x4c>)
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	4a04      	ldr	r2, [pc, #16]	@ (8001d7c <FLASH_MassErase+0x4c>)
 8001d6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d6e:	6153      	str	r3, [r2, #20]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	40022000 	.word	0x40022000

08001d80 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d006      	beq.n	8001da2 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8001d94:	4b14      	ldr	r3, [pc, #80]	@ (8001de8 <FLASH_PageErase+0x68>)
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	4a13      	ldr	r2, [pc, #76]	@ (8001de8 <FLASH_PageErase+0x68>)
 8001d9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001d9e:	6153      	str	r3, [r2, #20]
 8001da0:	e005      	b.n	8001dae <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8001da2:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <FLASH_PageErase+0x68>)
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	4a10      	ldr	r2, [pc, #64]	@ (8001de8 <FLASH_PageErase+0x68>)
 8001da8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001dac:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8001dae:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <FLASH_PageErase+0x68>)
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8001dbe:	490a      	ldr	r1, [pc, #40]	@ (8001de8 <FLASH_PageErase+0x68>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001dc4:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <FLASH_PageErase+0x68>)
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	4a07      	ldr	r2, [pc, #28]	@ (8001de8 <FLASH_PageErase+0x68>)
 8001dca:	f043 0302 	orr.w	r3, r3, #2
 8001dce:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001dd0:	4b05      	ldr	r3, [pc, #20]	@ (8001de8 <FLASH_PageErase+0x68>)
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	4a04      	ldr	r2, [pc, #16]	@ (8001de8 <FLASH_PageErase+0x68>)
 8001dd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dda:	6153      	str	r3, [r2, #20]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	40022000 	.word	0x40022000

08001dec <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8001df2:	4b21      	ldr	r3, [pc, #132]	@ (8001e78 <FLASH_FlushCaches+0x8c>)
 8001df4:	7f1b      	ldrb	r3, [r3, #28]
 8001df6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d002      	beq.n	8001e04 <FLASH_FlushCaches+0x18>
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d117      	bne.n	8001e34 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001e04:	4b1d      	ldr	r3, [pc, #116]	@ (8001e7c <FLASH_FlushCaches+0x90>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a1c      	ldr	r2, [pc, #112]	@ (8001e7c <FLASH_FlushCaches+0x90>)
 8001e0a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001e0e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001e10:	4b1a      	ldr	r3, [pc, #104]	@ (8001e7c <FLASH_FlushCaches+0x90>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a19      	ldr	r2, [pc, #100]	@ (8001e7c <FLASH_FlushCaches+0x90>)
 8001e16:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	4b17      	ldr	r3, [pc, #92]	@ (8001e7c <FLASH_FlushCaches+0x90>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a16      	ldr	r2, [pc, #88]	@ (8001e7c <FLASH_FlushCaches+0x90>)
 8001e22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001e26:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e28:	4b14      	ldr	r3, [pc, #80]	@ (8001e7c <FLASH_FlushCaches+0x90>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a13      	ldr	r2, [pc, #76]	@ (8001e7c <FLASH_FlushCaches+0x90>)
 8001e2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e32:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d002      	beq.n	8001e40 <FLASH_FlushCaches+0x54>
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d111      	bne.n	8001e64 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001e40:	4b0e      	ldr	r3, [pc, #56]	@ (8001e7c <FLASH_FlushCaches+0x90>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0d      	ldr	r2, [pc, #52]	@ (8001e7c <FLASH_FlushCaches+0x90>)
 8001e46:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <FLASH_FlushCaches+0x90>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <FLASH_FlushCaches+0x90>)
 8001e52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e56:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e58:	4b08      	ldr	r3, [pc, #32]	@ (8001e7c <FLASH_FlushCaches+0x90>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a07      	ldr	r2, [pc, #28]	@ (8001e7c <FLASH_FlushCaches+0x90>)
 8001e5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e62:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001e64:	4b04      	ldr	r3, [pc, #16]	@ (8001e78 <FLASH_FlushCaches+0x8c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	771a      	strb	r2, [r3, #28]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	20000014 	.word	0x20000014
 8001e7c:	40022000 	.word	0x40022000

08001e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8e:	e166      	b.n	800215e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	2101      	movs	r1, #1
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 8158 	beq.w	8002158 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d005      	beq.n	8001ec0 <HAL_GPIO_Init+0x40>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d130      	bne.n	8001f22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	091b      	lsrs	r3, r3, #4
 8001f0c:	f003 0201 	and.w	r2, r3, #1
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d017      	beq.n	8001f5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	2203      	movs	r2, #3
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4013      	ands	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d123      	bne.n	8001fb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	08da      	lsrs	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3208      	adds	r2, #8
 8001f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	220f      	movs	r2, #15
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	691a      	ldr	r2, [r3, #16]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	08da      	lsrs	r2, r3, #3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3208      	adds	r2, #8
 8001fac:	6939      	ldr	r1, [r7, #16]
 8001fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0203 	and.w	r2, r3, #3
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 80b2 	beq.w	8002158 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff4:	4b61      	ldr	r3, [pc, #388]	@ (800217c <HAL_GPIO_Init+0x2fc>)
 8001ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff8:	4a60      	ldr	r2, [pc, #384]	@ (800217c <HAL_GPIO_Init+0x2fc>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	6613      	str	r3, [r2, #96]	@ 0x60
 8002000:	4b5e      	ldr	r3, [pc, #376]	@ (800217c <HAL_GPIO_Init+0x2fc>)
 8002002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800200c:	4a5c      	ldr	r2, [pc, #368]	@ (8002180 <HAL_GPIO_Init+0x300>)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	089b      	lsrs	r3, r3, #2
 8002012:	3302      	adds	r3, #2
 8002014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002018:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	220f      	movs	r2, #15
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002036:	d02b      	beq.n	8002090 <HAL_GPIO_Init+0x210>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a52      	ldr	r2, [pc, #328]	@ (8002184 <HAL_GPIO_Init+0x304>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d025      	beq.n	800208c <HAL_GPIO_Init+0x20c>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a51      	ldr	r2, [pc, #324]	@ (8002188 <HAL_GPIO_Init+0x308>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d01f      	beq.n	8002088 <HAL_GPIO_Init+0x208>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a50      	ldr	r2, [pc, #320]	@ (800218c <HAL_GPIO_Init+0x30c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d019      	beq.n	8002084 <HAL_GPIO_Init+0x204>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a4f      	ldr	r2, [pc, #316]	@ (8002190 <HAL_GPIO_Init+0x310>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d013      	beq.n	8002080 <HAL_GPIO_Init+0x200>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a4e      	ldr	r2, [pc, #312]	@ (8002194 <HAL_GPIO_Init+0x314>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d00d      	beq.n	800207c <HAL_GPIO_Init+0x1fc>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a4d      	ldr	r2, [pc, #308]	@ (8002198 <HAL_GPIO_Init+0x318>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d007      	beq.n	8002078 <HAL_GPIO_Init+0x1f8>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a4c      	ldr	r2, [pc, #304]	@ (800219c <HAL_GPIO_Init+0x31c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d101      	bne.n	8002074 <HAL_GPIO_Init+0x1f4>
 8002070:	2307      	movs	r3, #7
 8002072:	e00e      	b.n	8002092 <HAL_GPIO_Init+0x212>
 8002074:	2308      	movs	r3, #8
 8002076:	e00c      	b.n	8002092 <HAL_GPIO_Init+0x212>
 8002078:	2306      	movs	r3, #6
 800207a:	e00a      	b.n	8002092 <HAL_GPIO_Init+0x212>
 800207c:	2305      	movs	r3, #5
 800207e:	e008      	b.n	8002092 <HAL_GPIO_Init+0x212>
 8002080:	2304      	movs	r3, #4
 8002082:	e006      	b.n	8002092 <HAL_GPIO_Init+0x212>
 8002084:	2303      	movs	r3, #3
 8002086:	e004      	b.n	8002092 <HAL_GPIO_Init+0x212>
 8002088:	2302      	movs	r3, #2
 800208a:	e002      	b.n	8002092 <HAL_GPIO_Init+0x212>
 800208c:	2301      	movs	r3, #1
 800208e:	e000      	b.n	8002092 <HAL_GPIO_Init+0x212>
 8002090:	2300      	movs	r3, #0
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	f002 0203 	and.w	r2, r2, #3
 8002098:	0092      	lsls	r2, r2, #2
 800209a:	4093      	lsls	r3, r2
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020a2:	4937      	ldr	r1, [pc, #220]	@ (8002180 <HAL_GPIO_Init+0x300>)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	089b      	lsrs	r3, r3, #2
 80020a8:	3302      	adds	r3, #2
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020b0:	4b3b      	ldr	r3, [pc, #236]	@ (80021a0 <HAL_GPIO_Init+0x320>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020d4:	4a32      	ldr	r2, [pc, #200]	@ (80021a0 <HAL_GPIO_Init+0x320>)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020da:	4b31      	ldr	r3, [pc, #196]	@ (80021a0 <HAL_GPIO_Init+0x320>)
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4013      	ands	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020fe:	4a28      	ldr	r2, [pc, #160]	@ (80021a0 <HAL_GPIO_Init+0x320>)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002104:	4b26      	ldr	r3, [pc, #152]	@ (80021a0 <HAL_GPIO_Init+0x320>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	43db      	mvns	r3, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002128:	4a1d      	ldr	r2, [pc, #116]	@ (80021a0 <HAL_GPIO_Init+0x320>)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800212e:	4b1c      	ldr	r3, [pc, #112]	@ (80021a0 <HAL_GPIO_Init+0x320>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	43db      	mvns	r3, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4313      	orrs	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002152:	4a13      	ldr	r2, [pc, #76]	@ (80021a0 <HAL_GPIO_Init+0x320>)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	3301      	adds	r3, #1
 800215c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	f47f ae91 	bne.w	8001e90 <HAL_GPIO_Init+0x10>
  }
}
 800216e:	bf00      	nop
 8002170:	bf00      	nop
 8002172:	371c      	adds	r7, #28
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	40021000 	.word	0x40021000
 8002180:	40010000 	.word	0x40010000
 8002184:	48000400 	.word	0x48000400
 8002188:	48000800 	.word	0x48000800
 800218c:	48000c00 	.word	0x48000c00
 8002190:	48001000 	.word	0x48001000
 8002194:	48001400 	.word	0x48001400
 8002198:	48001800 	.word	0x48001800
 800219c:	48001c00 	.word	0x48001c00
 80021a0:	40010400 	.word	0x40010400

080021a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	887b      	ldrh	r3, [r7, #2]
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	e001      	b.n	80021c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
 80021e0:	4613      	mov	r3, r2
 80021e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e4:	787b      	ldrb	r3, [r7, #1]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ea:	887a      	ldrh	r2, [r7, #2]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021f0:	e002      	b.n	80021f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021f2:	887a      	ldrh	r2, [r7, #2]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002208:	4b04      	ldr	r3, [pc, #16]	@ (800221c <HAL_PWREx_GetVoltageRange+0x18>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40007000 	.word	0x40007000

08002220 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800222e:	d130      	bne.n	8002292 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002230:	4b23      	ldr	r3, [pc, #140]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800223c:	d038      	beq.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800223e:	4b20      	ldr	r3, [pc, #128]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002246:	4a1e      	ldr	r2, [pc, #120]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002248:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800224c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800224e:	4b1d      	ldr	r3, [pc, #116]	@ (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2232      	movs	r2, #50	@ 0x32
 8002254:	fb02 f303 	mul.w	r3, r2, r3
 8002258:	4a1b      	ldr	r2, [pc, #108]	@ (80022c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	0c9b      	lsrs	r3, r3, #18
 8002260:	3301      	adds	r3, #1
 8002262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002264:	e002      	b.n	800226c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3b01      	subs	r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800226c:	4b14      	ldr	r3, [pc, #80]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002274:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002278:	d102      	bne.n	8002280 <HAL_PWREx_ControlVoltageScaling+0x60>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f2      	bne.n	8002266 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002280:	4b0f      	ldr	r3, [pc, #60]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002288:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800228c:	d110      	bne.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e00f      	b.n	80022b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002292:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800229a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800229e:	d007      	beq.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022a0:	4b07      	ldr	r3, [pc, #28]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022a8:	4a05      	ldr	r2, [pc, #20]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40007000 	.word	0x40007000
 80022c4:	20000008 	.word	0x20000008
 80022c8:	431bde83 	.word	0x431bde83

080022cc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80022d0:	4b05      	ldr	r3, [pc, #20]	@ (80022e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	4a04      	ldr	r2, [pc, #16]	@ (80022e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80022d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022da:	6053      	str	r3, [r2, #4]
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40007000 	.word	0x40007000

080022ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d102      	bne.n	8002300 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	f000 bc08 	b.w	8002b10 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002300:	4b96      	ldr	r3, [pc, #600]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800230a:	4b94      	ldr	r3, [pc, #592]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80e4 	beq.w	80024ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d007      	beq.n	8002338 <HAL_RCC_OscConfig+0x4c>
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	2b0c      	cmp	r3, #12
 800232c:	f040 808b 	bne.w	8002446 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	2b01      	cmp	r3, #1
 8002334:	f040 8087 	bne.w	8002446 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002338:	4b88      	ldr	r3, [pc, #544]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_OscConfig+0x64>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e3df      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1a      	ldr	r2, [r3, #32]
 8002354:	4b81      	ldr	r3, [pc, #516]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d004      	beq.n	800236a <HAL_RCC_OscConfig+0x7e>
 8002360:	4b7e      	ldr	r3, [pc, #504]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002368:	e005      	b.n	8002376 <HAL_RCC_OscConfig+0x8a>
 800236a:	4b7c      	ldr	r3, [pc, #496]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 800236c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002376:	4293      	cmp	r3, r2
 8002378:	d223      	bcs.n	80023c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fd92 	bl	8002ea8 <RCC_SetFlashLatencyFromMSIRange>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e3c0      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800238e:	4b73      	ldr	r3, [pc, #460]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a72      	ldr	r2, [pc, #456]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002394:	f043 0308 	orr.w	r3, r3, #8
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b70      	ldr	r3, [pc, #448]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	496d      	ldr	r1, [pc, #436]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023ac:	4b6b      	ldr	r3, [pc, #428]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	021b      	lsls	r3, r3, #8
 80023ba:	4968      	ldr	r1, [pc, #416]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
 80023c0:	e025      	b.n	800240e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023c2:	4b66      	ldr	r3, [pc, #408]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a65      	ldr	r2, [pc, #404]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80023c8:	f043 0308 	orr.w	r3, r3, #8
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	4b63      	ldr	r3, [pc, #396]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	4960      	ldr	r1, [pc, #384]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023e0:	4b5e      	ldr	r3, [pc, #376]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	021b      	lsls	r3, r3, #8
 80023ee:	495b      	ldr	r1, [pc, #364]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 fd52 	bl	8002ea8 <RCC_SetFlashLatencyFromMSIRange>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e380      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800240e:	f000 fc87 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 8002412:	4602      	mov	r2, r0
 8002414:	4b51      	ldr	r3, [pc, #324]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	4950      	ldr	r1, [pc, #320]	@ (8002560 <HAL_RCC_OscConfig+0x274>)
 8002420:	5ccb      	ldrb	r3, [r1, r3]
 8002422:	f003 031f 	and.w	r3, r3, #31
 8002426:	fa22 f303 	lsr.w	r3, r2, r3
 800242a:	4a4e      	ldr	r2, [pc, #312]	@ (8002564 <HAL_RCC_OscConfig+0x278>)
 800242c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800242e:	4b4e      	ldr	r3, [pc, #312]	@ (8002568 <HAL_RCC_OscConfig+0x27c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff f816 	bl	8001464 <HAL_InitTick>
 8002438:	4603      	mov	r3, r0
 800243a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d052      	beq.n	80024e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	e364      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d032      	beq.n	80024b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800244e:	4b43      	ldr	r3, [pc, #268]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a42      	ldr	r2, [pc, #264]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800245a:	f7ff f853 	bl	8001504 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002462:	f7ff f84f 	bl	8001504 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e34d      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002474:	4b39      	ldr	r3, [pc, #228]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002480:	4b36      	ldr	r3, [pc, #216]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a35      	ldr	r2, [pc, #212]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002486:	f043 0308 	orr.w	r3, r3, #8
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	4b33      	ldr	r3, [pc, #204]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	4930      	ldr	r1, [pc, #192]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800249e:	4b2f      	ldr	r3, [pc, #188]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	492b      	ldr	r1, [pc, #172]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	604b      	str	r3, [r1, #4]
 80024b2:	e01a      	b.n	80024ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024b4:	4b29      	ldr	r3, [pc, #164]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a28      	ldr	r2, [pc, #160]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80024ba:	f023 0301 	bic.w	r3, r3, #1
 80024be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024c0:	f7ff f820 	bl	8001504 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024c8:	f7ff f81c 	bl	8001504 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e31a      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024da:	4b20      	ldr	r3, [pc, #128]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x1dc>
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d073      	beq.n	80025de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_OscConfig+0x21c>
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2b0c      	cmp	r3, #12
 8002500:	d10e      	bne.n	8002520 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2b03      	cmp	r3, #3
 8002506:	d10b      	bne.n	8002520 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002508:	4b14      	ldr	r3, [pc, #80]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d063      	beq.n	80025dc <HAL_RCC_OscConfig+0x2f0>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d15f      	bne.n	80025dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e2f7      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002528:	d106      	bne.n	8002538 <HAL_RCC_OscConfig+0x24c>
 800252a:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a0b      	ldr	r2, [pc, #44]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	e025      	b.n	8002584 <HAL_RCC_OscConfig+0x298>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002540:	d114      	bne.n	800256c <HAL_RCC_OscConfig+0x280>
 8002542:	4b06      	ldr	r3, [pc, #24]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a05      	ldr	r2, [pc, #20]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002548:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	4b03      	ldr	r3, [pc, #12]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a02      	ldr	r2, [pc, #8]	@ (800255c <HAL_RCC_OscConfig+0x270>)
 8002554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	e013      	b.n	8002584 <HAL_RCC_OscConfig+0x298>
 800255c:	40021000 	.word	0x40021000
 8002560:	08005308 	.word	0x08005308
 8002564:	20000008 	.word	0x20000008
 8002568:	2000000c 	.word	0x2000000c
 800256c:	4ba0      	ldr	r3, [pc, #640]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a9f      	ldr	r2, [pc, #636]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	4b9d      	ldr	r3, [pc, #628]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a9c      	ldr	r2, [pc, #624]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 800257e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d013      	beq.n	80025b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7fe ffba 	bl	8001504 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002594:	f7fe ffb6 	bl	8001504 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	@ 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e2b4      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025a6:	4b92      	ldr	r3, [pc, #584]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0x2a8>
 80025b2:	e014      	b.n	80025de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7fe ffa6 	bl	8001504 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025bc:	f7fe ffa2 	bl	8001504 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b64      	cmp	r3, #100	@ 0x64
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e2a0      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ce:	4b88      	ldr	r3, [pc, #544]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x2d0>
 80025da:	e000      	b.n	80025de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d060      	beq.n	80026ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d005      	beq.n	80025fc <HAL_RCC_OscConfig+0x310>
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	2b0c      	cmp	r3, #12
 80025f4:	d119      	bne.n	800262a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d116      	bne.n	800262a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025fc:	4b7c      	ldr	r3, [pc, #496]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_OscConfig+0x328>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e27d      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002614:	4b76      	ldr	r3, [pc, #472]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	061b      	lsls	r3, r3, #24
 8002622:	4973      	ldr	r1, [pc, #460]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002628:	e040      	b.n	80026ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d023      	beq.n	800267a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002632:	4b6f      	ldr	r3, [pc, #444]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a6e      	ldr	r2, [pc, #440]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800263c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263e:	f7fe ff61 	bl	8001504 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002646:	f7fe ff5d 	bl	8001504 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e25b      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002658:	4b65      	ldr	r3, [pc, #404]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002664:	4b62      	ldr	r3, [pc, #392]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	061b      	lsls	r3, r3, #24
 8002672:	495f      	ldr	r1, [pc, #380]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
 8002678:	e018      	b.n	80026ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267a:	4b5d      	ldr	r3, [pc, #372]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a5c      	ldr	r2, [pc, #368]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002680:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002686:	f7fe ff3d 	bl	8001504 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268e:	f7fe ff39 	bl	8001504 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e237      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026a0:	4b53      	ldr	r3, [pc, #332]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1f0      	bne.n	800268e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d03c      	beq.n	8002732 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01c      	beq.n	80026fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c0:	4b4b      	ldr	r3, [pc, #300]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80026c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026c6:	4a4a      	ldr	r2, [pc, #296]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d0:	f7fe ff18 	bl	8001504 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d8:	f7fe ff14 	bl	8001504 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e212      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ea:	4b41      	ldr	r3, [pc, #260]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80026ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0ef      	beq.n	80026d8 <HAL_RCC_OscConfig+0x3ec>
 80026f8:	e01b      	b.n	8002732 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026fa:	4b3d      	ldr	r3, [pc, #244]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80026fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002700:	4a3b      	ldr	r2, [pc, #236]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002702:	f023 0301 	bic.w	r3, r3, #1
 8002706:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270a:	f7fe fefb 	bl	8001504 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002712:	f7fe fef7 	bl	8001504 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e1f5      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002724:	4b32      	ldr	r3, [pc, #200]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1ef      	bne.n	8002712 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 80a6 	beq.w	800288c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002740:	2300      	movs	r3, #0
 8002742:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002744:	4b2a      	ldr	r3, [pc, #168]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10d      	bne.n	800276c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002750:	4b27      	ldr	r3, [pc, #156]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002754:	4a26      	ldr	r2, [pc, #152]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002756:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800275a:	6593      	str	r3, [r2, #88]	@ 0x58
 800275c:	4b24      	ldr	r3, [pc, #144]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 800275e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002768:	2301      	movs	r3, #1
 800276a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276c:	4b21      	ldr	r3, [pc, #132]	@ (80027f4 <HAL_RCC_OscConfig+0x508>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d118      	bne.n	80027aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002778:	4b1e      	ldr	r3, [pc, #120]	@ (80027f4 <HAL_RCC_OscConfig+0x508>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a1d      	ldr	r2, [pc, #116]	@ (80027f4 <HAL_RCC_OscConfig+0x508>)
 800277e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002782:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002784:	f7fe febe 	bl	8001504 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278c:	f7fe feba 	bl	8001504 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e1b8      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800279e:	4b15      	ldr	r3, [pc, #84]	@ (80027f4 <HAL_RCC_OscConfig+0x508>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d108      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4d8>
 80027b2:	4b0f      	ldr	r3, [pc, #60]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80027b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b8:	4a0d      	ldr	r2, [pc, #52]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027c2:	e029      	b.n	8002818 <HAL_RCC_OscConfig+0x52c>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b05      	cmp	r3, #5
 80027ca:	d115      	bne.n	80027f8 <HAL_RCC_OscConfig+0x50c>
 80027cc:	4b08      	ldr	r3, [pc, #32]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d2:	4a07      	ldr	r2, [pc, #28]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80027d4:	f043 0304 	orr.w	r3, r3, #4
 80027d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027dc:	4b04      	ldr	r3, [pc, #16]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e2:	4a03      	ldr	r2, [pc, #12]	@ (80027f0 <HAL_RCC_OscConfig+0x504>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027ec:	e014      	b.n	8002818 <HAL_RCC_OscConfig+0x52c>
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40007000 	.word	0x40007000
 80027f8:	4b9d      	ldr	r3, [pc, #628]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027fe:	4a9c      	ldr	r2, [pc, #624]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002808:	4b99      	ldr	r3, [pc, #612]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800280e:	4a98      	ldr	r2, [pc, #608]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 8002810:	f023 0304 	bic.w	r3, r3, #4
 8002814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d016      	beq.n	800284e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002820:	f7fe fe70 	bl	8001504 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002826:	e00a      	b.n	800283e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002828:	f7fe fe6c 	bl	8001504 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e168      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800283e:	4b8c      	ldr	r3, [pc, #560]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0ed      	beq.n	8002828 <HAL_RCC_OscConfig+0x53c>
 800284c:	e015      	b.n	800287a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284e:	f7fe fe59 	bl	8001504 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002854:	e00a      	b.n	800286c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002856:	f7fe fe55 	bl	8001504 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002864:	4293      	cmp	r3, r2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e151      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800286c:	4b80      	ldr	r3, [pc, #512]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 800286e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1ed      	bne.n	8002856 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800287a:	7ffb      	ldrb	r3, [r7, #31]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d105      	bne.n	800288c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002880:	4b7b      	ldr	r3, [pc, #492]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 8002882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002884:	4a7a      	ldr	r2, [pc, #488]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 8002886:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800288a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0320 	and.w	r3, r3, #32
 8002894:	2b00      	cmp	r3, #0
 8002896:	d03c      	beq.n	8002912 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289c:	2b00      	cmp	r3, #0
 800289e:	d01c      	beq.n	80028da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028a0:	4b73      	ldr	r3, [pc, #460]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 80028a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028a6:	4a72      	ldr	r2, [pc, #456]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b0:	f7fe fe28 	bl	8001504 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028b8:	f7fe fe24 	bl	8001504 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e122      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028ca:	4b69      	ldr	r3, [pc, #420]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 80028cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0ef      	beq.n	80028b8 <HAL_RCC_OscConfig+0x5cc>
 80028d8:	e01b      	b.n	8002912 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028da:	4b65      	ldr	r3, [pc, #404]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 80028dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028e0:	4a63      	ldr	r2, [pc, #396]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 80028e2:	f023 0301 	bic.w	r3, r3, #1
 80028e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ea:	f7fe fe0b 	bl	8001504 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028f2:	f7fe fe07 	bl	8001504 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e105      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002904:	4b5a      	ldr	r3, [pc, #360]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 8002906:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1ef      	bne.n	80028f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 80f9 	beq.w	8002b0e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002920:	2b02      	cmp	r3, #2
 8002922:	f040 80cf 	bne.w	8002ac4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002926:	4b52      	ldr	r3, [pc, #328]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f003 0203 	and.w	r2, r3, #3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002936:	429a      	cmp	r2, r3
 8002938:	d12c      	bne.n	8002994 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002944:	3b01      	subs	r3, #1
 8002946:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002948:	429a      	cmp	r2, r3
 800294a:	d123      	bne.n	8002994 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002956:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002958:	429a      	cmp	r2, r3
 800295a:	d11b      	bne.n	8002994 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002966:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d113      	bne.n	8002994 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002976:	085b      	lsrs	r3, r3, #1
 8002978:	3b01      	subs	r3, #1
 800297a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d109      	bne.n	8002994 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	085b      	lsrs	r3, r3, #1
 800298c:	3b01      	subs	r3, #1
 800298e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d071      	beq.n	8002a78 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	2b0c      	cmp	r3, #12
 8002998:	d068      	beq.n	8002a6c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800299a:	4b35      	ldr	r3, [pc, #212]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d105      	bne.n	80029b2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029a6:	4b32      	ldr	r3, [pc, #200]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e0ac      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 80029bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029c2:	f7fe fd9f 	bl	8001504 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ca:	f7fe fd9b 	bl	8001504 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e099      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029dc:	4b24      	ldr	r3, [pc, #144]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1f0      	bne.n	80029ca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e8:	4b21      	ldr	r3, [pc, #132]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	4b21      	ldr	r3, [pc, #132]	@ (8002a74 <HAL_RCC_OscConfig+0x788>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80029f8:	3a01      	subs	r2, #1
 80029fa:	0112      	lsls	r2, r2, #4
 80029fc:	4311      	orrs	r1, r2
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a02:	0212      	lsls	r2, r2, #8
 8002a04:	4311      	orrs	r1, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a0a:	0852      	lsrs	r2, r2, #1
 8002a0c:	3a01      	subs	r2, #1
 8002a0e:	0552      	lsls	r2, r2, #21
 8002a10:	4311      	orrs	r1, r2
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a16:	0852      	lsrs	r2, r2, #1
 8002a18:	3a01      	subs	r2, #1
 8002a1a:	0652      	lsls	r2, r2, #25
 8002a1c:	4311      	orrs	r1, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a22:	06d2      	lsls	r2, r2, #27
 8002a24:	430a      	orrs	r2, r1
 8002a26:	4912      	ldr	r1, [pc, #72]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a2c:	4b10      	ldr	r3, [pc, #64]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a0f      	ldr	r2, [pc, #60]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 8002a32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a38:	4b0d      	ldr	r3, [pc, #52]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4a0c      	ldr	r2, [pc, #48]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 8002a3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a44:	f7fe fd5e 	bl	8001504 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7fe fd5a 	bl	8001504 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e058      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5e:	4b04      	ldr	r3, [pc, #16]	@ (8002a70 <HAL_RCC_OscConfig+0x784>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a6a:	e050      	b.n	8002b0e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e04f      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
 8002a70:	40021000 	.word	0x40021000
 8002a74:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a78:	4b27      	ldr	r3, [pc, #156]	@ (8002b18 <HAL_RCC_OscConfig+0x82c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d144      	bne.n	8002b0e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a84:	4b24      	ldr	r3, [pc, #144]	@ (8002b18 <HAL_RCC_OscConfig+0x82c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a23      	ldr	r2, [pc, #140]	@ (8002b18 <HAL_RCC_OscConfig+0x82c>)
 8002a8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a90:	4b21      	ldr	r3, [pc, #132]	@ (8002b18 <HAL_RCC_OscConfig+0x82c>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	4a20      	ldr	r2, [pc, #128]	@ (8002b18 <HAL_RCC_OscConfig+0x82c>)
 8002a96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a9c:	f7fe fd32 	bl	8001504 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa4:	f7fe fd2e 	bl	8001504 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e02c      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab6:	4b18      	ldr	r3, [pc, #96]	@ (8002b18 <HAL_RCC_OscConfig+0x82c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x7b8>
 8002ac2:	e024      	b.n	8002b0e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2b0c      	cmp	r3, #12
 8002ac8:	d01f      	beq.n	8002b0a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aca:	4b13      	ldr	r3, [pc, #76]	@ (8002b18 <HAL_RCC_OscConfig+0x82c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a12      	ldr	r2, [pc, #72]	@ (8002b18 <HAL_RCC_OscConfig+0x82c>)
 8002ad0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad6:	f7fe fd15 	bl	8001504 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ade:	f7fe fd11 	bl	8001504 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e00f      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af0:	4b09      	ldr	r3, [pc, #36]	@ (8002b18 <HAL_RCC_OscConfig+0x82c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1f0      	bne.n	8002ade <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002afc:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <HAL_RCC_OscConfig+0x82c>)
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	4905      	ldr	r1, [pc, #20]	@ (8002b18 <HAL_RCC_OscConfig+0x82c>)
 8002b02:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <HAL_RCC_OscConfig+0x830>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	60cb      	str	r3, [r1, #12]
 8002b08:	e001      	b.n	8002b0e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3720      	adds	r7, #32
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	feeefffc 	.word	0xfeeefffc

08002b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0e7      	b.n	8002d04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b34:	4b75      	ldr	r3, [pc, #468]	@ (8002d0c <HAL_RCC_ClockConfig+0x1ec>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d910      	bls.n	8002b64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b42:	4b72      	ldr	r3, [pc, #456]	@ (8002d0c <HAL_RCC_ClockConfig+0x1ec>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 0207 	bic.w	r2, r3, #7
 8002b4a:	4970      	ldr	r1, [pc, #448]	@ (8002d0c <HAL_RCC_ClockConfig+0x1ec>)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b52:	4b6e      	ldr	r3, [pc, #440]	@ (8002d0c <HAL_RCC_ClockConfig+0x1ec>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0cf      	b.n	8002d04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d010      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	4b66      	ldr	r3, [pc, #408]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d908      	bls.n	8002b92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b80:	4b63      	ldr	r3, [pc, #396]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	4960      	ldr	r1, [pc, #384]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d04c      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba6:	4b5a      	ldr	r3, [pc, #360]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d121      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e0a6      	b.n	8002d04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d107      	bne.n	8002bce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bbe:	4b54      	ldr	r3, [pc, #336]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d115      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e09a      	b.n	8002d04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d107      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bd6:	4b4e      	ldr	r3, [pc, #312]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e08e      	b.n	8002d04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002be6:	4b4a      	ldr	r3, [pc, #296]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e086      	b.n	8002d04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bf6:	4b46      	ldr	r3, [pc, #280]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f023 0203 	bic.w	r2, r3, #3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	4943      	ldr	r1, [pc, #268]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c08:	f7fe fc7c 	bl	8001504 <HAL_GetTick>
 8002c0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c10:	f7fe fc78 	bl	8001504 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e06e      	b.n	8002d04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c26:	4b3a      	ldr	r3, [pc, #232]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 020c 	and.w	r2, r3, #12
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d1eb      	bne.n	8002c10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d010      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	4b31      	ldr	r3, [pc, #196]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d208      	bcs.n	8002c66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c54:	4b2e      	ldr	r3, [pc, #184]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	492b      	ldr	r1, [pc, #172]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c66:	4b29      	ldr	r3, [pc, #164]	@ (8002d0c <HAL_RCC_ClockConfig+0x1ec>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d210      	bcs.n	8002c96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c74:	4b25      	ldr	r3, [pc, #148]	@ (8002d0c <HAL_RCC_ClockConfig+0x1ec>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f023 0207 	bic.w	r2, r3, #7
 8002c7c:	4923      	ldr	r1, [pc, #140]	@ (8002d0c <HAL_RCC_ClockConfig+0x1ec>)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c84:	4b21      	ldr	r3, [pc, #132]	@ (8002d0c <HAL_RCC_ClockConfig+0x1ec>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d001      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e036      	b.n	8002d04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d008      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	4918      	ldr	r1, [pc, #96]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d009      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cc0:	4b13      	ldr	r3, [pc, #76]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4910      	ldr	r1, [pc, #64]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cd4:	f000 f824 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	4b0d      	ldr	r3, [pc, #52]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f0>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	091b      	lsrs	r3, r3, #4
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	490b      	ldr	r1, [pc, #44]	@ (8002d14 <HAL_RCC_ClockConfig+0x1f4>)
 8002ce6:	5ccb      	ldrb	r3, [r1, r3]
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf0:	4a09      	ldr	r2, [pc, #36]	@ (8002d18 <HAL_RCC_ClockConfig+0x1f8>)
 8002cf2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cf4:	4b09      	ldr	r3, [pc, #36]	@ (8002d1c <HAL_RCC_ClockConfig+0x1fc>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fe fbb3 	bl	8001464 <HAL_InitTick>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d02:	7afb      	ldrb	r3, [r7, #11]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40022000 	.word	0x40022000
 8002d10:	40021000 	.word	0x40021000
 8002d14:	08005308 	.word	0x08005308
 8002d18:	20000008 	.word	0x20000008
 8002d1c:	2000000c 	.word	0x2000000c

08002d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	@ 0x24
 8002d24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d2e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d38:	4b3b      	ldr	r3, [pc, #236]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0x34>
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	2b0c      	cmp	r3, #12
 8002d4c:	d121      	bne.n	8002d92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d11e      	bne.n	8002d92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d54:	4b34      	ldr	r3, [pc, #208]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d107      	bne.n	8002d70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d60:	4b31      	ldr	r3, [pc, #196]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	61fb      	str	r3, [r7, #28]
 8002d6e:	e005      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d70:	4b2d      	ldr	r3, [pc, #180]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d7c:	4a2b      	ldr	r2, [pc, #172]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10d      	bne.n	8002da8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d90:	e00a      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d102      	bne.n	8002d9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d98:	4b25      	ldr	r3, [pc, #148]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d9a:	61bb      	str	r3, [r7, #24]
 8002d9c:	e004      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002da4:	4b23      	ldr	r3, [pc, #140]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x114>)
 8002da6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	2b0c      	cmp	r3, #12
 8002dac:	d134      	bne.n	8002e18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dae:	4b1e      	ldr	r3, [pc, #120]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d003      	beq.n	8002dc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d003      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0xac>
 8002dc4:	e005      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dc8:	617b      	str	r3, [r7, #20]
      break;
 8002dca:	e005      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002dcc:	4b19      	ldr	r3, [pc, #100]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dce:	617b      	str	r3, [r7, #20]
      break;
 8002dd0:	e002      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	617b      	str	r3, [r7, #20]
      break;
 8002dd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dd8:	4b13      	ldr	r3, [pc, #76]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	3301      	adds	r3, #1
 8002de4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002de6:	4b10      	ldr	r3, [pc, #64]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	0a1b      	lsrs	r3, r3, #8
 8002dec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	fb03 f202 	mul.w	r2, r3, r2
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	0e5b      	lsrs	r3, r3, #25
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	3301      	adds	r3, #1
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e18:	69bb      	ldr	r3, [r7, #24]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3724      	adds	r7, #36	@ 0x24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	08005320 	.word	0x08005320
 8002e30:	00f42400 	.word	0x00f42400
 8002e34:	007a1200 	.word	0x007a1200

08002e38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e3c:	4b03      	ldr	r3, [pc, #12]	@ (8002e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000008 	.word	0x20000008

08002e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e54:	f7ff fff0 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	0a1b      	lsrs	r3, r3, #8
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	4904      	ldr	r1, [pc, #16]	@ (8002e78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e66:	5ccb      	ldrb	r3, [r1, r3]
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40021000 	.word	0x40021000
 8002e78:	08005318 	.word	0x08005318

08002e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e80:	f7ff ffda 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8002e84:	4602      	mov	r2, r0
 8002e86:	4b06      	ldr	r3, [pc, #24]	@ (8002ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	0adb      	lsrs	r3, r3, #11
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	4904      	ldr	r1, [pc, #16]	@ (8002ea4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e92:	5ccb      	ldrb	r3, [r1, r3]
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	08005318 	.word	0x08005318

08002ea8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002eb4:	4b2a      	ldr	r3, [pc, #168]	@ (8002f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ec0:	f7ff f9a0 	bl	8002204 <HAL_PWREx_GetVoltageRange>
 8002ec4:	6178      	str	r0, [r7, #20]
 8002ec6:	e014      	b.n	8002ef2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ec8:	4b25      	ldr	r3, [pc, #148]	@ (8002f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ecc:	4a24      	ldr	r2, [pc, #144]	@ (8002f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ece:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ed2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ed4:	4b22      	ldr	r3, [pc, #136]	@ (8002f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ee0:	f7ff f990 	bl	8002204 <HAL_PWREx_GetVoltageRange>
 8002ee4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eea:	4a1d      	ldr	r2, [pc, #116]	@ (8002f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ef0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ef8:	d10b      	bne.n	8002f12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b80      	cmp	r3, #128	@ 0x80
 8002efe:	d919      	bls.n	8002f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f04:	d902      	bls.n	8002f0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f06:	2302      	movs	r3, #2
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	e013      	b.n	8002f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	e010      	b.n	8002f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b80      	cmp	r3, #128	@ 0x80
 8002f16:	d902      	bls.n	8002f1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f18:	2303      	movs	r3, #3
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	e00a      	b.n	8002f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b80      	cmp	r3, #128	@ 0x80
 8002f22:	d102      	bne.n	8002f2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f24:	2302      	movs	r3, #2
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	e004      	b.n	8002f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b70      	cmp	r3, #112	@ 0x70
 8002f2e:	d101      	bne.n	8002f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f30:	2301      	movs	r3, #1
 8002f32:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f34:	4b0b      	ldr	r3, [pc, #44]	@ (8002f64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f023 0207 	bic.w	r2, r3, #7
 8002f3c:	4909      	ldr	r1, [pc, #36]	@ (8002f64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f44:	4b07      	ldr	r3, [pc, #28]	@ (8002f64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d001      	beq.n	8002f56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40022000 	.word	0x40022000

08002f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f70:	2300      	movs	r3, #0
 8002f72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f74:	2300      	movs	r3, #0
 8002f76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d041      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f88:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f8c:	d02a      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f8e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f92:	d824      	bhi.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f98:	d008      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f9e:	d81e      	bhi.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002fa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fa8:	d010      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002faa:	e018      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fac:	4b86      	ldr	r3, [pc, #536]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4a85      	ldr	r2, [pc, #532]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fb8:	e015      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 facd 	bl	8003560 <RCCEx_PLLSAI1_Config>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fca:	e00c      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3320      	adds	r3, #32
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fbb6 	bl	8003744 <RCCEx_PLLSAI2_Config>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fdc:	e003      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	74fb      	strb	r3, [r7, #19]
      break;
 8002fe2:	e000      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002fe4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fe6:	7cfb      	ldrb	r3, [r7, #19]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10b      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fec:	4b76      	ldr	r3, [pc, #472]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ffa:	4973      	ldr	r1, [pc, #460]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003002:	e001      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003004:	7cfb      	ldrb	r3, [r7, #19]
 8003006:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d041      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003018:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800301c:	d02a      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800301e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003022:	d824      	bhi.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003024:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003028:	d008      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800302a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800302e:	d81e      	bhi.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003034:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003038:	d010      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800303a:	e018      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800303c:	4b62      	ldr	r3, [pc, #392]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4a61      	ldr	r2, [pc, #388]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003042:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003046:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003048:	e015      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3304      	adds	r3, #4
 800304e:	2100      	movs	r1, #0
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fa85 	bl	8003560 <RCCEx_PLLSAI1_Config>
 8003056:	4603      	mov	r3, r0
 8003058:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800305a:	e00c      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3320      	adds	r3, #32
 8003060:	2100      	movs	r1, #0
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fb6e 	bl	8003744 <RCCEx_PLLSAI2_Config>
 8003068:	4603      	mov	r3, r0
 800306a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800306c:	e003      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	74fb      	strb	r3, [r7, #19]
      break;
 8003072:	e000      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003076:	7cfb      	ldrb	r3, [r7, #19]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10b      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800307c:	4b52      	ldr	r3, [pc, #328]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800307e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003082:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800308a:	494f      	ldr	r1, [pc, #316]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003092:	e001      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003094:	7cfb      	ldrb	r3, [r7, #19]
 8003096:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80a0 	beq.w	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030a6:	2300      	movs	r3, #0
 80030a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030aa:	4b47      	ldr	r3, [pc, #284]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80030ba:	2300      	movs	r3, #0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00d      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c0:	4b41      	ldr	r3, [pc, #260]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c4:	4a40      	ldr	r2, [pc, #256]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80030cc:	4b3e      	ldr	r3, [pc, #248]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d8:	2301      	movs	r3, #1
 80030da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030dc:	4b3b      	ldr	r3, [pc, #236]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a3a      	ldr	r2, [pc, #232]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030e8:	f7fe fa0c 	bl	8001504 <HAL_GetTick>
 80030ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030ee:	e009      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f0:	f7fe fa08 	bl	8001504 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d902      	bls.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	74fb      	strb	r3, [r7, #19]
        break;
 8003102:	e005      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003104:	4b31      	ldr	r3, [pc, #196]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0ef      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003110:	7cfb      	ldrb	r3, [r7, #19]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d15c      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003116:	4b2c      	ldr	r3, [pc, #176]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800311c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003120:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d01f      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	429a      	cmp	r2, r3
 8003132:	d019      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003134:	4b24      	ldr	r3, [pc, #144]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800313a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800313e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003140:	4b21      	ldr	r3, [pc, #132]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003146:	4a20      	ldr	r2, [pc, #128]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800314c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003150:	4b1d      	ldr	r3, [pc, #116]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003156:	4a1c      	ldr	r2, [pc, #112]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003158:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800315c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003160:	4a19      	ldr	r2, [pc, #100]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d016      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003172:	f7fe f9c7 	bl	8001504 <HAL_GetTick>
 8003176:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003178:	e00b      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317a:	f7fe f9c3 	bl	8001504 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003188:	4293      	cmp	r3, r2
 800318a:	d902      	bls.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	74fb      	strb	r3, [r7, #19]
            break;
 8003190:	e006      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003192:	4b0d      	ldr	r3, [pc, #52]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0ec      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80031a0:	7cfb      	ldrb	r3, [r7, #19]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031a6:	4b08      	ldr	r3, [pc, #32]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b6:	4904      	ldr	r1, [pc, #16]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80031be:	e009      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031c0:	7cfb      	ldrb	r3, [r7, #19]
 80031c2:	74bb      	strb	r3, [r7, #18]
 80031c4:	e006      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80031c6:	bf00      	nop
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d0:	7cfb      	ldrb	r3, [r7, #19]
 80031d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031d4:	7c7b      	ldrb	r3, [r7, #17]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d105      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031da:	4ba6      	ldr	r3, [pc, #664]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031de:	4aa5      	ldr	r2, [pc, #660]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031f2:	4ba0      	ldr	r3, [pc, #640]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f8:	f023 0203 	bic.w	r2, r3, #3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003200:	499c      	ldr	r1, [pc, #624]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003202:	4313      	orrs	r3, r2
 8003204:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00a      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003214:	4b97      	ldr	r3, [pc, #604]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800321a:	f023 020c 	bic.w	r2, r3, #12
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003222:	4994      	ldr	r1, [pc, #592]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003236:	4b8f      	ldr	r3, [pc, #572]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	498b      	ldr	r1, [pc, #556]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003258:	4b86      	ldr	r3, [pc, #536]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003266:	4983      	ldr	r1, [pc, #524]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003268:	4313      	orrs	r3, r2
 800326a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800327a:	4b7e      	ldr	r3, [pc, #504]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003280:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003288:	497a      	ldr	r1, [pc, #488]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800329c:	4b75      	ldr	r3, [pc, #468]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800329e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032aa:	4972      	ldr	r1, [pc, #456]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032be:	4b6d      	ldr	r3, [pc, #436]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032cc:	4969      	ldr	r1, [pc, #420]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032e0:	4b64      	ldr	r3, [pc, #400]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032ee:	4961      	ldr	r1, [pc, #388]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003302:	4b5c      	ldr	r3, [pc, #368]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003308:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003310:	4958      	ldr	r1, [pc, #352]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003324:	4b53      	ldr	r3, [pc, #332]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800332a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003332:	4950      	ldr	r1, [pc, #320]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003346:	4b4b      	ldr	r3, [pc, #300]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800334c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003354:	4947      	ldr	r1, [pc, #284]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003368:	4b42      	ldr	r3, [pc, #264]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800336a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800336e:	f023 0203 	bic.w	r2, r3, #3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003376:	493f      	ldr	r1, [pc, #252]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d028      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800338a:	4b3a      	ldr	r3, [pc, #232]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800338c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003390:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003398:	4936      	ldr	r1, [pc, #216]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033a8:	d106      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033aa:	4b32      	ldr	r3, [pc, #200]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	4a31      	ldr	r2, [pc, #196]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033b4:	60d3      	str	r3, [r2, #12]
 80033b6:	e011      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033c0:	d10c      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3304      	adds	r3, #4
 80033c6:	2101      	movs	r1, #1
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 f8c9 	bl	8003560 <RCCEx_PLLSAI1_Config>
 80033ce:	4603      	mov	r3, r0
 80033d0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033d2:	7cfb      	ldrb	r3, [r7, #19]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d028      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033e8:	4b22      	ldr	r3, [pc, #136]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033f6:	491f      	ldr	r1, [pc, #124]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003402:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003406:	d106      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003408:	4b1a      	ldr	r3, [pc, #104]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	4a19      	ldr	r2, [pc, #100]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800340e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003412:	60d3      	str	r3, [r2, #12]
 8003414:	e011      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800341a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800341e:	d10c      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3304      	adds	r3, #4
 8003424:	2101      	movs	r1, #1
 8003426:	4618      	mov	r0, r3
 8003428:	f000 f89a 	bl	8003560 <RCCEx_PLLSAI1_Config>
 800342c:	4603      	mov	r3, r0
 800342e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003430:	7cfb      	ldrb	r3, [r7, #19]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003436:	7cfb      	ldrb	r3, [r7, #19]
 8003438:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d02a      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003446:	4b0b      	ldr	r3, [pc, #44]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800344c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003454:	4907      	ldr	r1, [pc, #28]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003460:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003464:	d108      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003466:	4b03      	ldr	r3, [pc, #12]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	4a02      	ldr	r2, [pc, #8]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800346c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003470:	60d3      	str	r3, [r2, #12]
 8003472:	e013      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003474:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800347c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003480:	d10c      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3304      	adds	r3, #4
 8003486:	2101      	movs	r1, #1
 8003488:	4618      	mov	r0, r3
 800348a:	f000 f869 	bl	8003560 <RCCEx_PLLSAI1_Config>
 800348e:	4603      	mov	r3, r0
 8003490:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003492:	7cfb      	ldrb	r3, [r7, #19]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003498:	7cfb      	ldrb	r3, [r7, #19]
 800349a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d02f      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034a8:	4b2c      	ldr	r3, [pc, #176]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034b6:	4929      	ldr	r1, [pc, #164]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034c6:	d10d      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3304      	adds	r3, #4
 80034cc:	2102      	movs	r1, #2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 f846 	bl	8003560 <RCCEx_PLLSAI1_Config>
 80034d4:	4603      	mov	r3, r0
 80034d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034d8:	7cfb      	ldrb	r3, [r7, #19]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d014      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80034de:	7cfb      	ldrb	r3, [r7, #19]
 80034e0:	74bb      	strb	r3, [r7, #18]
 80034e2:	e011      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034ec:	d10c      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3320      	adds	r3, #32
 80034f2:	2102      	movs	r1, #2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 f925 	bl	8003744 <RCCEx_PLLSAI2_Config>
 80034fa:	4603      	mov	r3, r0
 80034fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034fe:	7cfb      	ldrb	r3, [r7, #19]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003504:	7cfb      	ldrb	r3, [r7, #19]
 8003506:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00b      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003514:	4b11      	ldr	r3, [pc, #68]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003524:	490d      	ldr	r1, [pc, #52]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00b      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003538:	4b08      	ldr	r3, [pc, #32]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800353e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003548:	4904      	ldr	r1, [pc, #16]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003550:	7cbb      	ldrb	r3, [r7, #18]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000

08003560 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800356e:	4b74      	ldr	r3, [pc, #464]	@ (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d018      	beq.n	80035ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800357a:	4b71      	ldr	r3, [pc, #452]	@ (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f003 0203 	and.w	r2, r3, #3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d10d      	bne.n	80035a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
       ||
 800358e:	2b00      	cmp	r3, #0
 8003590:	d009      	beq.n	80035a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003592:	4b6b      	ldr	r3, [pc, #428]	@ (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
       ||
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d047      	beq.n	8003636 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	73fb      	strb	r3, [r7, #15]
 80035aa:	e044      	b.n	8003636 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d018      	beq.n	80035e6 <RCCEx_PLLSAI1_Config+0x86>
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d825      	bhi.n	8003604 <RCCEx_PLLSAI1_Config+0xa4>
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d002      	beq.n	80035c2 <RCCEx_PLLSAI1_Config+0x62>
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d009      	beq.n	80035d4 <RCCEx_PLLSAI1_Config+0x74>
 80035c0:	e020      	b.n	8003604 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d11d      	bne.n	800360a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035d2:	e01a      	b.n	800360a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035d4:	4b5a      	ldr	r3, [pc, #360]	@ (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d116      	bne.n	800360e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e4:	e013      	b.n	800360e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035e6:	4b56      	ldr	r3, [pc, #344]	@ (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10f      	bne.n	8003612 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035f2:	4b53      	ldr	r3, [pc, #332]	@ (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003602:	e006      	b.n	8003612 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
      break;
 8003608:	e004      	b.n	8003614 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800360a:	bf00      	nop
 800360c:	e002      	b.n	8003614 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800360e:	bf00      	nop
 8003610:	e000      	b.n	8003614 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003612:	bf00      	nop
    }

    if(status == HAL_OK)
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10d      	bne.n	8003636 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800361a:	4b49      	ldr	r3, [pc, #292]	@ (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6819      	ldr	r1, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	3b01      	subs	r3, #1
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	430b      	orrs	r3, r1
 8003630:	4943      	ldr	r1, [pc, #268]	@ (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003632:	4313      	orrs	r3, r2
 8003634:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d17c      	bne.n	8003736 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800363c:	4b40      	ldr	r3, [pc, #256]	@ (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a3f      	ldr	r2, [pc, #252]	@ (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003642:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003646:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003648:	f7fd ff5c 	bl	8001504 <HAL_GetTick>
 800364c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800364e:	e009      	b.n	8003664 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003650:	f7fd ff58 	bl	8001504 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d902      	bls.n	8003664 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	73fb      	strb	r3, [r7, #15]
        break;
 8003662:	e005      	b.n	8003670 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003664:	4b36      	ldr	r3, [pc, #216]	@ (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1ef      	bne.n	8003650 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d15f      	bne.n	8003736 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d110      	bne.n	800369e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800367c:	4b30      	ldr	r3, [pc, #192]	@ (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003684:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6892      	ldr	r2, [r2, #8]
 800368c:	0211      	lsls	r1, r2, #8
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	68d2      	ldr	r2, [r2, #12]
 8003692:	06d2      	lsls	r2, r2, #27
 8003694:	430a      	orrs	r2, r1
 8003696:	492a      	ldr	r1, [pc, #168]	@ (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003698:	4313      	orrs	r3, r2
 800369a:	610b      	str	r3, [r1, #16]
 800369c:	e027      	b.n	80036ee <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d112      	bne.n	80036ca <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036a4:	4b26      	ldr	r3, [pc, #152]	@ (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80036ac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6892      	ldr	r2, [r2, #8]
 80036b4:	0211      	lsls	r1, r2, #8
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6912      	ldr	r2, [r2, #16]
 80036ba:	0852      	lsrs	r2, r2, #1
 80036bc:	3a01      	subs	r2, #1
 80036be:	0552      	lsls	r2, r2, #21
 80036c0:	430a      	orrs	r2, r1
 80036c2:	491f      	ldr	r1, [pc, #124]	@ (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	610b      	str	r3, [r1, #16]
 80036c8:	e011      	b.n	80036ee <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80036d2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6892      	ldr	r2, [r2, #8]
 80036da:	0211      	lsls	r1, r2, #8
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6952      	ldr	r2, [r2, #20]
 80036e0:	0852      	lsrs	r2, r2, #1
 80036e2:	3a01      	subs	r2, #1
 80036e4:	0652      	lsls	r2, r2, #25
 80036e6:	430a      	orrs	r2, r1
 80036e8:	4915      	ldr	r1, [pc, #84]	@ (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036ee:	4b14      	ldr	r3, [pc, #80]	@ (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a13      	ldr	r2, [pc, #76]	@ (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036f8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fa:	f7fd ff03 	bl	8001504 <HAL_GetTick>
 80036fe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003700:	e009      	b.n	8003716 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003702:	f7fd feff 	bl	8001504 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d902      	bls.n	8003716 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	73fb      	strb	r3, [r7, #15]
          break;
 8003714:	e005      	b.n	8003722 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003716:	4b0a      	ldr	r3, [pc, #40]	@ (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0ef      	beq.n	8003702 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003722:	7bfb      	ldrb	r3, [r7, #15]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d106      	bne.n	8003736 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003728:	4b05      	ldr	r3, [pc, #20]	@ (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	4903      	ldr	r1, [pc, #12]	@ (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003732:	4313      	orrs	r3, r2
 8003734:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003736:	7bfb      	ldrb	r3, [r7, #15]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40021000 	.word	0x40021000

08003744 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003752:	4b69      	ldr	r3, [pc, #420]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d018      	beq.n	8003790 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800375e:	4b66      	ldr	r3, [pc, #408]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f003 0203 	and.w	r2, r3, #3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d10d      	bne.n	800378a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
       ||
 8003772:	2b00      	cmp	r3, #0
 8003774:	d009      	beq.n	800378a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003776:	4b60      	ldr	r3, [pc, #384]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
       ||
 8003786:	429a      	cmp	r2, r3
 8003788:	d047      	beq.n	800381a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
 800378e:	e044      	b.n	800381a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b03      	cmp	r3, #3
 8003796:	d018      	beq.n	80037ca <RCCEx_PLLSAI2_Config+0x86>
 8003798:	2b03      	cmp	r3, #3
 800379a:	d825      	bhi.n	80037e8 <RCCEx_PLLSAI2_Config+0xa4>
 800379c:	2b01      	cmp	r3, #1
 800379e:	d002      	beq.n	80037a6 <RCCEx_PLLSAI2_Config+0x62>
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d009      	beq.n	80037b8 <RCCEx_PLLSAI2_Config+0x74>
 80037a4:	e020      	b.n	80037e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037a6:	4b54      	ldr	r3, [pc, #336]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d11d      	bne.n	80037ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b6:	e01a      	b.n	80037ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037b8:	4b4f      	ldr	r3, [pc, #316]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d116      	bne.n	80037f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c8:	e013      	b.n	80037f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037ca:	4b4b      	ldr	r3, [pc, #300]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10f      	bne.n	80037f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037d6:	4b48      	ldr	r3, [pc, #288]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d109      	bne.n	80037f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037e6:	e006      	b.n	80037f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	73fb      	strb	r3, [r7, #15]
      break;
 80037ec:	e004      	b.n	80037f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037ee:	bf00      	nop
 80037f0:	e002      	b.n	80037f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037f2:	bf00      	nop
 80037f4:	e000      	b.n	80037f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10d      	bne.n	800381a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037fe:	4b3e      	ldr	r3, [pc, #248]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6819      	ldr	r1, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	3b01      	subs	r3, #1
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	430b      	orrs	r3, r1
 8003814:	4938      	ldr	r1, [pc, #224]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003816:	4313      	orrs	r3, r2
 8003818:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800381a:	7bfb      	ldrb	r3, [r7, #15]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d166      	bne.n	80038ee <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003820:	4b35      	ldr	r3, [pc, #212]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a34      	ldr	r2, [pc, #208]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003826:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800382a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800382c:	f7fd fe6a 	bl	8001504 <HAL_GetTick>
 8003830:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003832:	e009      	b.n	8003848 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003834:	f7fd fe66 	bl	8001504 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d902      	bls.n	8003848 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	73fb      	strb	r3, [r7, #15]
        break;
 8003846:	e005      	b.n	8003854 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003848:	4b2b      	ldr	r3, [pc, #172]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1ef      	bne.n	8003834 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d149      	bne.n	80038ee <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d110      	bne.n	8003882 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003860:	4b25      	ldr	r3, [pc, #148]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003868:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6892      	ldr	r2, [r2, #8]
 8003870:	0211      	lsls	r1, r2, #8
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	68d2      	ldr	r2, [r2, #12]
 8003876:	06d2      	lsls	r2, r2, #27
 8003878:	430a      	orrs	r2, r1
 800387a:	491f      	ldr	r1, [pc, #124]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800387c:	4313      	orrs	r3, r2
 800387e:	614b      	str	r3, [r1, #20]
 8003880:	e011      	b.n	80038a6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003882:	4b1d      	ldr	r3, [pc, #116]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800388a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6892      	ldr	r2, [r2, #8]
 8003892:	0211      	lsls	r1, r2, #8
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6912      	ldr	r2, [r2, #16]
 8003898:	0852      	lsrs	r2, r2, #1
 800389a:	3a01      	subs	r2, #1
 800389c:	0652      	lsls	r2, r2, #25
 800389e:	430a      	orrs	r2, r1
 80038a0:	4915      	ldr	r1, [pc, #84]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038a6:	4b14      	ldr	r3, [pc, #80]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a13      	ldr	r2, [pc, #76]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80038ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b2:	f7fd fe27 	bl	8001504 <HAL_GetTick>
 80038b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038b8:	e009      	b.n	80038ce <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038ba:	f7fd fe23 	bl	8001504 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d902      	bls.n	80038ce <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	73fb      	strb	r3, [r7, #15]
          break;
 80038cc:	e005      	b.n	80038da <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038ce:	4b0a      	ldr	r3, [pc, #40]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0ef      	beq.n	80038ba <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80038da:	7bfb      	ldrb	r3, [r7, #15]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d106      	bne.n	80038ee <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038e0:	4b05      	ldr	r3, [pc, #20]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80038e2:	695a      	ldr	r2, [r3, #20]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	4903      	ldr	r1, [pc, #12]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40021000 	.word	0x40021000

080038fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e040      	b.n	8003990 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fd fc42 	bl	80011a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2224      	movs	r2, #36	@ 0x24
 8003928:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0201 	bic.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fc32 	bl	80041ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f977 	bl	8003c3c <UART_SetConfig>
 800394e:	4603      	mov	r3, r0
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e01b      	b.n	8003990 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003966:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003976:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fcb1 	bl	80042f0 <UART_CheckIdleState>
 800398e:	4603      	mov	r3, r0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08a      	sub	sp, #40	@ 0x28
 800399c:	af02      	add	r7, sp, #8
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	4613      	mov	r3, r2
 80039a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039ac:	2b20      	cmp	r3, #32
 80039ae:	d177      	bne.n	8003aa0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <HAL_UART_Transmit+0x24>
 80039b6:	88fb      	ldrh	r3, [r7, #6]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e070      	b.n	8003aa2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2221      	movs	r2, #33	@ 0x21
 80039cc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039ce:	f7fd fd99 	bl	8001504 <HAL_GetTick>
 80039d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	88fa      	ldrh	r2, [r7, #6]
 80039d8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	88fa      	ldrh	r2, [r7, #6]
 80039e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ec:	d108      	bne.n	8003a00 <HAL_UART_Transmit+0x68>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d104      	bne.n	8003a00 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	61bb      	str	r3, [r7, #24]
 80039fe:	e003      	b.n	8003a08 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a08:	e02f      	b.n	8003a6a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2200      	movs	r2, #0
 8003a12:	2180      	movs	r1, #128	@ 0x80
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 fd13 	bl	8004440 <UART_WaitOnFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d004      	beq.n	8003a2a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e03b      	b.n	8003aa2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10b      	bne.n	8003a48 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	881a      	ldrh	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a3c:	b292      	uxth	r2, r2
 8003a3e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	3302      	adds	r3, #2
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	e007      	b.n	8003a58 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	781a      	ldrb	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	3301      	adds	r3, #1
 8003a56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1c9      	bne.n	8003a0a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	2140      	movs	r1, #64	@ 0x40
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 fcdd 	bl	8004440 <UART_WaitOnFlagUntilTimeout>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d004      	beq.n	8003a96 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e005      	b.n	8003aa2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	e000      	b.n	8003aa2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003aa0:	2302      	movs	r3, #2
  }
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3720      	adds	r7, #32
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b08a      	sub	sp, #40	@ 0x28
 8003aae:	af02      	add	r7, sp, #8
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	603b      	str	r3, [r7, #0]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	f040 80b6 	bne.w	8003c32 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <HAL_UART_Receive+0x28>
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e0ae      	b.n	8003c34 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2222      	movs	r2, #34	@ 0x22
 8003ae2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aec:	f7fd fd0a 	bl	8001504 <HAL_GetTick>
 8003af0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	88fa      	ldrh	r2, [r7, #6]
 8003af6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	88fa      	ldrh	r2, [r7, #6]
 8003afe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b0a:	d10e      	bne.n	8003b2a <HAL_UART_Receive+0x80>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d105      	bne.n	8003b20 <HAL_UART_Receive+0x76>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003b1a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003b1e:	e02d      	b.n	8003b7c <HAL_UART_Receive+0xd2>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	22ff      	movs	r2, #255	@ 0xff
 8003b24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003b28:	e028      	b.n	8003b7c <HAL_UART_Receive+0xd2>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10d      	bne.n	8003b4e <HAL_UART_Receive+0xa4>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d104      	bne.n	8003b44 <HAL_UART_Receive+0x9a>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	22ff      	movs	r2, #255	@ 0xff
 8003b3e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003b42:	e01b      	b.n	8003b7c <HAL_UART_Receive+0xd2>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	227f      	movs	r2, #127	@ 0x7f
 8003b48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003b4c:	e016      	b.n	8003b7c <HAL_UART_Receive+0xd2>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b56:	d10d      	bne.n	8003b74 <HAL_UART_Receive+0xca>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d104      	bne.n	8003b6a <HAL_UART_Receive+0xc0>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	227f      	movs	r2, #127	@ 0x7f
 8003b64:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003b68:	e008      	b.n	8003b7c <HAL_UART_Receive+0xd2>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	223f      	movs	r2, #63	@ 0x3f
 8003b6e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003b72:	e003      	b.n	8003b7c <HAL_UART_Receive+0xd2>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003b82:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b8c:	d108      	bne.n	8003ba0 <HAL_UART_Receive+0xf6>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d104      	bne.n	8003ba0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	e003      	b.n	8003ba8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003ba8:	e037      	b.n	8003c1a <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	2120      	movs	r1, #32
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 fc43 	bl	8004440 <UART_WaitOnFlagUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e033      	b.n	8003c34 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10c      	bne.n	8003bec <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	8a7b      	ldrh	r3, [r7, #18]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	3302      	adds	r3, #2
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	e00d      	b.n	8003c08 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	8a7b      	ldrh	r3, [r7, #18]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	3301      	adds	r3, #1
 8003c06:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1c1      	bne.n	8003baa <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	e000      	b.n	8003c34 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003c32:	2302      	movs	r3, #2
  }
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3720      	adds	r7, #32
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c40:	b08a      	sub	sp, #40	@ 0x28
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	431a      	orrs	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	4ba4      	ldr	r3, [pc, #656]	@ (8003efc <UART_SetConfig+0x2c0>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	6812      	ldr	r2, [r2, #0]
 8003c72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c74:	430b      	orrs	r3, r1
 8003c76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a99      	ldr	r2, [pc, #612]	@ (8003f00 <UART_SetConfig+0x2c4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d004      	beq.n	8003ca8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a90      	ldr	r2, [pc, #576]	@ (8003f04 <UART_SetConfig+0x2c8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d126      	bne.n	8003d14 <UART_SetConfig+0xd8>
 8003cc6:	4b90      	ldr	r3, [pc, #576]	@ (8003f08 <UART_SetConfig+0x2cc>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d81b      	bhi.n	8003d0c <UART_SetConfig+0xd0>
 8003cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cdc <UART_SetConfig+0xa0>)
 8003cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cda:	bf00      	nop
 8003cdc:	08003ced 	.word	0x08003ced
 8003ce0:	08003cfd 	.word	0x08003cfd
 8003ce4:	08003cf5 	.word	0x08003cf5
 8003ce8:	08003d05 	.word	0x08003d05
 8003cec:	2301      	movs	r3, #1
 8003cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cf2:	e116      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cfa:	e112      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003cfc:	2304      	movs	r3, #4
 8003cfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d02:	e10e      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003d04:	2308      	movs	r3, #8
 8003d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d0a:	e10a      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003d0c:	2310      	movs	r3, #16
 8003d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d12:	e106      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a7c      	ldr	r2, [pc, #496]	@ (8003f0c <UART_SetConfig+0x2d0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d138      	bne.n	8003d90 <UART_SetConfig+0x154>
 8003d1e:	4b7a      	ldr	r3, [pc, #488]	@ (8003f08 <UART_SetConfig+0x2cc>)
 8003d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d24:	f003 030c 	and.w	r3, r3, #12
 8003d28:	2b0c      	cmp	r3, #12
 8003d2a:	d82d      	bhi.n	8003d88 <UART_SetConfig+0x14c>
 8003d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d34 <UART_SetConfig+0xf8>)
 8003d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d32:	bf00      	nop
 8003d34:	08003d69 	.word	0x08003d69
 8003d38:	08003d89 	.word	0x08003d89
 8003d3c:	08003d89 	.word	0x08003d89
 8003d40:	08003d89 	.word	0x08003d89
 8003d44:	08003d79 	.word	0x08003d79
 8003d48:	08003d89 	.word	0x08003d89
 8003d4c:	08003d89 	.word	0x08003d89
 8003d50:	08003d89 	.word	0x08003d89
 8003d54:	08003d71 	.word	0x08003d71
 8003d58:	08003d89 	.word	0x08003d89
 8003d5c:	08003d89 	.word	0x08003d89
 8003d60:	08003d89 	.word	0x08003d89
 8003d64:	08003d81 	.word	0x08003d81
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d6e:	e0d8      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003d70:	2302      	movs	r3, #2
 8003d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d76:	e0d4      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003d78:	2304      	movs	r3, #4
 8003d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d7e:	e0d0      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003d80:	2308      	movs	r3, #8
 8003d82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d86:	e0cc      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003d88:	2310      	movs	r3, #16
 8003d8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d8e:	e0c8      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a5e      	ldr	r2, [pc, #376]	@ (8003f10 <UART_SetConfig+0x2d4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d125      	bne.n	8003de6 <UART_SetConfig+0x1aa>
 8003d9a:	4b5b      	ldr	r3, [pc, #364]	@ (8003f08 <UART_SetConfig+0x2cc>)
 8003d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003da4:	2b30      	cmp	r3, #48	@ 0x30
 8003da6:	d016      	beq.n	8003dd6 <UART_SetConfig+0x19a>
 8003da8:	2b30      	cmp	r3, #48	@ 0x30
 8003daa:	d818      	bhi.n	8003dde <UART_SetConfig+0x1a2>
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d00a      	beq.n	8003dc6 <UART_SetConfig+0x18a>
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	d814      	bhi.n	8003dde <UART_SetConfig+0x1a2>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <UART_SetConfig+0x182>
 8003db8:	2b10      	cmp	r3, #16
 8003dba:	d008      	beq.n	8003dce <UART_SetConfig+0x192>
 8003dbc:	e00f      	b.n	8003dde <UART_SetConfig+0x1a2>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dc4:	e0ad      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dcc:	e0a9      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003dce:	2304      	movs	r3, #4
 8003dd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dd4:	e0a5      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003dd6:	2308      	movs	r3, #8
 8003dd8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ddc:	e0a1      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003dde:	2310      	movs	r3, #16
 8003de0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003de4:	e09d      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a4a      	ldr	r2, [pc, #296]	@ (8003f14 <UART_SetConfig+0x2d8>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d125      	bne.n	8003e3c <UART_SetConfig+0x200>
 8003df0:	4b45      	ldr	r3, [pc, #276]	@ (8003f08 <UART_SetConfig+0x2cc>)
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003dfa:	2bc0      	cmp	r3, #192	@ 0xc0
 8003dfc:	d016      	beq.n	8003e2c <UART_SetConfig+0x1f0>
 8003dfe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e00:	d818      	bhi.n	8003e34 <UART_SetConfig+0x1f8>
 8003e02:	2b80      	cmp	r3, #128	@ 0x80
 8003e04:	d00a      	beq.n	8003e1c <UART_SetConfig+0x1e0>
 8003e06:	2b80      	cmp	r3, #128	@ 0x80
 8003e08:	d814      	bhi.n	8003e34 <UART_SetConfig+0x1f8>
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <UART_SetConfig+0x1d8>
 8003e0e:	2b40      	cmp	r3, #64	@ 0x40
 8003e10:	d008      	beq.n	8003e24 <UART_SetConfig+0x1e8>
 8003e12:	e00f      	b.n	8003e34 <UART_SetConfig+0x1f8>
 8003e14:	2300      	movs	r3, #0
 8003e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e1a:	e082      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e22:	e07e      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003e24:	2304      	movs	r3, #4
 8003e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e2a:	e07a      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003e2c:	2308      	movs	r3, #8
 8003e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e32:	e076      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003e34:	2310      	movs	r3, #16
 8003e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e3a:	e072      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a35      	ldr	r2, [pc, #212]	@ (8003f18 <UART_SetConfig+0x2dc>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d12a      	bne.n	8003e9c <UART_SetConfig+0x260>
 8003e46:	4b30      	ldr	r3, [pc, #192]	@ (8003f08 <UART_SetConfig+0x2cc>)
 8003e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e54:	d01a      	beq.n	8003e8c <UART_SetConfig+0x250>
 8003e56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e5a:	d81b      	bhi.n	8003e94 <UART_SetConfig+0x258>
 8003e5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e60:	d00c      	beq.n	8003e7c <UART_SetConfig+0x240>
 8003e62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e66:	d815      	bhi.n	8003e94 <UART_SetConfig+0x258>
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <UART_SetConfig+0x238>
 8003e6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e70:	d008      	beq.n	8003e84 <UART_SetConfig+0x248>
 8003e72:	e00f      	b.n	8003e94 <UART_SetConfig+0x258>
 8003e74:	2300      	movs	r3, #0
 8003e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e7a:	e052      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e82:	e04e      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003e84:	2304      	movs	r3, #4
 8003e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e8a:	e04a      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003e8c:	2308      	movs	r3, #8
 8003e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e92:	e046      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003e94:	2310      	movs	r3, #16
 8003e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e9a:	e042      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a17      	ldr	r2, [pc, #92]	@ (8003f00 <UART_SetConfig+0x2c4>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d13a      	bne.n	8003f1c <UART_SetConfig+0x2e0>
 8003ea6:	4b18      	ldr	r3, [pc, #96]	@ (8003f08 <UART_SetConfig+0x2cc>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003eb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003eb4:	d01a      	beq.n	8003eec <UART_SetConfig+0x2b0>
 8003eb6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003eba:	d81b      	bhi.n	8003ef4 <UART_SetConfig+0x2b8>
 8003ebc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ec0:	d00c      	beq.n	8003edc <UART_SetConfig+0x2a0>
 8003ec2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ec6:	d815      	bhi.n	8003ef4 <UART_SetConfig+0x2b8>
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <UART_SetConfig+0x298>
 8003ecc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ed0:	d008      	beq.n	8003ee4 <UART_SetConfig+0x2a8>
 8003ed2:	e00f      	b.n	8003ef4 <UART_SetConfig+0x2b8>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eda:	e022      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003edc:	2302      	movs	r3, #2
 8003ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ee2:	e01e      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003ee4:	2304      	movs	r3, #4
 8003ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eea:	e01a      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003eec:	2308      	movs	r3, #8
 8003eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ef2:	e016      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003ef4:	2310      	movs	r3, #16
 8003ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003efa:	e012      	b.n	8003f22 <UART_SetConfig+0x2e6>
 8003efc:	efff69f3 	.word	0xefff69f3
 8003f00:	40008000 	.word	0x40008000
 8003f04:	40013800 	.word	0x40013800
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	40004400 	.word	0x40004400
 8003f10:	40004800 	.word	0x40004800
 8003f14:	40004c00 	.word	0x40004c00
 8003f18:	40005000 	.word	0x40005000
 8003f1c:	2310      	movs	r3, #16
 8003f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a9f      	ldr	r2, [pc, #636]	@ (80041a4 <UART_SetConfig+0x568>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d17a      	bne.n	8004022 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f2c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d824      	bhi.n	8003f7e <UART_SetConfig+0x342>
 8003f34:	a201      	add	r2, pc, #4	@ (adr r2, 8003f3c <UART_SetConfig+0x300>)
 8003f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3a:	bf00      	nop
 8003f3c:	08003f61 	.word	0x08003f61
 8003f40:	08003f7f 	.word	0x08003f7f
 8003f44:	08003f69 	.word	0x08003f69
 8003f48:	08003f7f 	.word	0x08003f7f
 8003f4c:	08003f6f 	.word	0x08003f6f
 8003f50:	08003f7f 	.word	0x08003f7f
 8003f54:	08003f7f 	.word	0x08003f7f
 8003f58:	08003f7f 	.word	0x08003f7f
 8003f5c:	08003f77 	.word	0x08003f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f60:	f7fe ff76 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 8003f64:	61f8      	str	r0, [r7, #28]
        break;
 8003f66:	e010      	b.n	8003f8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f68:	4b8f      	ldr	r3, [pc, #572]	@ (80041a8 <UART_SetConfig+0x56c>)
 8003f6a:	61fb      	str	r3, [r7, #28]
        break;
 8003f6c:	e00d      	b.n	8003f8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f6e:	f7fe fed7 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 8003f72:	61f8      	str	r0, [r7, #28]
        break;
 8003f74:	e009      	b.n	8003f8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f7a:	61fb      	str	r3, [r7, #28]
        break;
 8003f7c:	e005      	b.n	8003f8a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 80fb 	beq.w	8004188 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	4613      	mov	r3, r2
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	4413      	add	r3, r2
 8003f9c:	69fa      	ldr	r2, [r7, #28]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d305      	bcc.n	8003fae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d903      	bls.n	8003fb6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003fb4:	e0e8      	b.n	8004188 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	461c      	mov	r4, r3
 8003fbc:	4615      	mov	r5, r2
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	022b      	lsls	r3, r5, #8
 8003fc8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003fcc:	0222      	lsls	r2, r4, #8
 8003fce:	68f9      	ldr	r1, [r7, #12]
 8003fd0:	6849      	ldr	r1, [r1, #4]
 8003fd2:	0849      	lsrs	r1, r1, #1
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	4688      	mov	r8, r1
 8003fd8:	4681      	mov	r9, r0
 8003fda:	eb12 0a08 	adds.w	sl, r2, r8
 8003fde:	eb43 0b09 	adc.w	fp, r3, r9
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	603b      	str	r3, [r7, #0]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ff0:	4650      	mov	r0, sl
 8003ff2:	4659      	mov	r1, fp
 8003ff4:	f7fc f954 	bl	80002a0 <__aeabi_uldivmod>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004006:	d308      	bcc.n	800401a <UART_SetConfig+0x3de>
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800400e:	d204      	bcs.n	800401a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	60da      	str	r2, [r3, #12]
 8004018:	e0b6      	b.n	8004188 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004020:	e0b2      	b.n	8004188 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800402a:	d15e      	bne.n	80040ea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800402c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004030:	2b08      	cmp	r3, #8
 8004032:	d828      	bhi.n	8004086 <UART_SetConfig+0x44a>
 8004034:	a201      	add	r2, pc, #4	@ (adr r2, 800403c <UART_SetConfig+0x400>)
 8004036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403a:	bf00      	nop
 800403c:	08004061 	.word	0x08004061
 8004040:	08004069 	.word	0x08004069
 8004044:	08004071 	.word	0x08004071
 8004048:	08004087 	.word	0x08004087
 800404c:	08004077 	.word	0x08004077
 8004050:	08004087 	.word	0x08004087
 8004054:	08004087 	.word	0x08004087
 8004058:	08004087 	.word	0x08004087
 800405c:	0800407f 	.word	0x0800407f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004060:	f7fe fef6 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 8004064:	61f8      	str	r0, [r7, #28]
        break;
 8004066:	e014      	b.n	8004092 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004068:	f7fe ff08 	bl	8002e7c <HAL_RCC_GetPCLK2Freq>
 800406c:	61f8      	str	r0, [r7, #28]
        break;
 800406e:	e010      	b.n	8004092 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004070:	4b4d      	ldr	r3, [pc, #308]	@ (80041a8 <UART_SetConfig+0x56c>)
 8004072:	61fb      	str	r3, [r7, #28]
        break;
 8004074:	e00d      	b.n	8004092 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004076:	f7fe fe53 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 800407a:	61f8      	str	r0, [r7, #28]
        break;
 800407c:	e009      	b.n	8004092 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800407e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004082:	61fb      	str	r3, [r7, #28]
        break;
 8004084:	e005      	b.n	8004092 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004090:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d077      	beq.n	8004188 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	005a      	lsls	r2, r3, #1
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	085b      	lsrs	r3, r3, #1
 80040a2:	441a      	add	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	2b0f      	cmp	r3, #15
 80040b2:	d916      	bls.n	80040e2 <UART_SetConfig+0x4a6>
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ba:	d212      	bcs.n	80040e2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	f023 030f 	bic.w	r3, r3, #15
 80040c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	085b      	lsrs	r3, r3, #1
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	8afb      	ldrh	r3, [r7, #22]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	8afa      	ldrh	r2, [r7, #22]
 80040de:	60da      	str	r2, [r3, #12]
 80040e0:	e052      	b.n	8004188 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80040e8:	e04e      	b.n	8004188 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d827      	bhi.n	8004142 <UART_SetConfig+0x506>
 80040f2:	a201      	add	r2, pc, #4	@ (adr r2, 80040f8 <UART_SetConfig+0x4bc>)
 80040f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f8:	0800411d 	.word	0x0800411d
 80040fc:	08004125 	.word	0x08004125
 8004100:	0800412d 	.word	0x0800412d
 8004104:	08004143 	.word	0x08004143
 8004108:	08004133 	.word	0x08004133
 800410c:	08004143 	.word	0x08004143
 8004110:	08004143 	.word	0x08004143
 8004114:	08004143 	.word	0x08004143
 8004118:	0800413b 	.word	0x0800413b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800411c:	f7fe fe98 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 8004120:	61f8      	str	r0, [r7, #28]
        break;
 8004122:	e014      	b.n	800414e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004124:	f7fe feaa 	bl	8002e7c <HAL_RCC_GetPCLK2Freq>
 8004128:	61f8      	str	r0, [r7, #28]
        break;
 800412a:	e010      	b.n	800414e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800412c:	4b1e      	ldr	r3, [pc, #120]	@ (80041a8 <UART_SetConfig+0x56c>)
 800412e:	61fb      	str	r3, [r7, #28]
        break;
 8004130:	e00d      	b.n	800414e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004132:	f7fe fdf5 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 8004136:	61f8      	str	r0, [r7, #28]
        break;
 8004138:	e009      	b.n	800414e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800413a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800413e:	61fb      	str	r3, [r7, #28]
        break;
 8004140:	e005      	b.n	800414e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800414c:	bf00      	nop
    }

    if (pclk != 0U)
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d019      	beq.n	8004188 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	085a      	lsrs	r2, r3, #1
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	441a      	add	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	fbb2 f3f3 	udiv	r3, r2, r3
 8004166:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	2b0f      	cmp	r3, #15
 800416c:	d909      	bls.n	8004182 <UART_SetConfig+0x546>
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004174:	d205      	bcs.n	8004182 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60da      	str	r2, [r3, #12]
 8004180:	e002      	b.n	8004188 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004194:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004198:	4618      	mov	r0, r3
 800419a:	3728      	adds	r7, #40	@ 0x28
 800419c:	46bd      	mov	sp, r7
 800419e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041a2:	bf00      	nop
 80041a4:	40008000 	.word	0x40008000
 80041a8:	00f42400 	.word	0x00f42400

080041ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	f003 0310 	and.w	r3, r3, #16
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01a      	beq.n	80042c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042aa:	d10a      	bne.n	80042c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	605a      	str	r2, [r3, #4]
  }
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b098      	sub	sp, #96	@ 0x60
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004300:	f7fd f900 	bl	8001504 <HAL_GetTick>
 8004304:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b08      	cmp	r3, #8
 8004312:	d12e      	bne.n	8004372 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004314:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800431c:	2200      	movs	r2, #0
 800431e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f88c 	bl	8004440 <UART_WaitOnFlagUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d021      	beq.n	8004372 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800433c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800433e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004342:	653b      	str	r3, [r7, #80]	@ 0x50
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	461a      	mov	r2, r3
 800434a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800434c:	647b      	str	r3, [r7, #68]	@ 0x44
 800434e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004352:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800435a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e6      	bne.n	800432e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e062      	b.n	8004438 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b04      	cmp	r3, #4
 800437e:	d149      	bne.n	8004414 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004380:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004388:	2200      	movs	r2, #0
 800438a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f856 	bl	8004440 <UART_WaitOnFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d03c      	beq.n	8004414 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	623b      	str	r3, [r7, #32]
   return(result);
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80043ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043c0:	e841 2300 	strex	r3, r2, [r1]
 80043c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e6      	bne.n	800439a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3308      	adds	r3, #8
 80043d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	e853 3f00 	ldrex	r3, [r3]
 80043da:	60fb      	str	r3, [r7, #12]
   return(result);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0301 	bic.w	r3, r3, #1
 80043e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3308      	adds	r3, #8
 80043ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043ec:	61fa      	str	r2, [r7, #28]
 80043ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f0:	69b9      	ldr	r1, [r7, #24]
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	e841 2300 	strex	r3, r2, [r1]
 80043f8:	617b      	str	r3, [r7, #20]
   return(result);
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e5      	bne.n	80043cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e011      	b.n	8004438 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2220      	movs	r2, #32
 8004418:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2220      	movs	r2, #32
 800441e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3758      	adds	r7, #88	@ 0x58
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	4613      	mov	r3, r2
 800444e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004450:	e04f      	b.n	80044f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004458:	d04b      	beq.n	80044f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445a:	f7fd f853 	bl	8001504 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	429a      	cmp	r2, r3
 8004468:	d302      	bcc.n	8004470 <UART_WaitOnFlagUntilTimeout+0x30>
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e04e      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	2b00      	cmp	r3, #0
 8004480:	d037      	beq.n	80044f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b80      	cmp	r3, #128	@ 0x80
 8004486:	d034      	beq.n	80044f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2b40      	cmp	r3, #64	@ 0x40
 800448c:	d031      	beq.n	80044f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b08      	cmp	r3, #8
 800449a:	d110      	bne.n	80044be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2208      	movs	r2, #8
 80044a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 f838 	bl	800451a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2208      	movs	r2, #8
 80044ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e029      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044cc:	d111      	bne.n	80044f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 f81e 	bl	800451a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e00f      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69da      	ldr	r2, [r3, #28]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4013      	ands	r3, r2
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	429a      	cmp	r2, r3
 8004500:	bf0c      	ite	eq
 8004502:	2301      	moveq	r3, #1
 8004504:	2300      	movne	r3, #0
 8004506:	b2db      	uxtb	r3, r3
 8004508:	461a      	mov	r2, r3
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	429a      	cmp	r2, r3
 800450e:	d0a0      	beq.n	8004452 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800451a:	b480      	push	{r7}
 800451c:	b095      	sub	sp, #84	@ 0x54
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800452a:	e853 3f00 	ldrex	r3, [r3]
 800452e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004532:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004536:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004540:	643b      	str	r3, [r7, #64]	@ 0x40
 8004542:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004544:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004546:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004548:	e841 2300 	strex	r3, r2, [r1]
 800454c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800454e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1e6      	bne.n	8004522 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3308      	adds	r3, #8
 800455a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	e853 3f00 	ldrex	r3, [r3]
 8004562:	61fb      	str	r3, [r7, #28]
   return(result);
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	f023 0301 	bic.w	r3, r3, #1
 800456a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3308      	adds	r3, #8
 8004572:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004574:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004576:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004578:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800457a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800457c:	e841 2300 	strex	r3, r2, [r1]
 8004580:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1e5      	bne.n	8004554 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800458c:	2b01      	cmp	r3, #1
 800458e:	d118      	bne.n	80045c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	e853 3f00 	ldrex	r3, [r3]
 800459c:	60bb      	str	r3, [r7, #8]
   return(result);
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f023 0310 	bic.w	r3, r3, #16
 80045a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045ae:	61bb      	str	r3, [r7, #24]
 80045b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b2:	6979      	ldr	r1, [r7, #20]
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	e841 2300 	strex	r3, r2, [r1]
 80045ba:	613b      	str	r3, [r7, #16]
   return(result);
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1e6      	bne.n	8004590 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80045d6:	bf00      	nop
 80045d8:	3754      	adds	r7, #84	@ 0x54
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
	...

080045e4 <_vsiprintf_r>:
 80045e4:	b510      	push	{r4, lr}
 80045e6:	b09a      	sub	sp, #104	@ 0x68
 80045e8:	2400      	movs	r4, #0
 80045ea:	9100      	str	r1, [sp, #0]
 80045ec:	9104      	str	r1, [sp, #16]
 80045ee:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80045f2:	9105      	str	r1, [sp, #20]
 80045f4:	9102      	str	r1, [sp, #8]
 80045f6:	4905      	ldr	r1, [pc, #20]	@ (800460c <_vsiprintf_r+0x28>)
 80045f8:	9103      	str	r1, [sp, #12]
 80045fa:	4669      	mov	r1, sp
 80045fc:	9419      	str	r4, [sp, #100]	@ 0x64
 80045fe:	f000 f999 	bl	8004934 <_svfiprintf_r>
 8004602:	9b00      	ldr	r3, [sp, #0]
 8004604:	701c      	strb	r4, [r3, #0]
 8004606:	b01a      	add	sp, #104	@ 0x68
 8004608:	bd10      	pop	{r4, pc}
 800460a:	bf00      	nop
 800460c:	ffff0208 	.word	0xffff0208

08004610 <vsiprintf>:
 8004610:	4613      	mov	r3, r2
 8004612:	460a      	mov	r2, r1
 8004614:	4601      	mov	r1, r0
 8004616:	4802      	ldr	r0, [pc, #8]	@ (8004620 <vsiprintf+0x10>)
 8004618:	6800      	ldr	r0, [r0, #0]
 800461a:	f7ff bfe3 	b.w	80045e4 <_vsiprintf_r>
 800461e:	bf00      	nop
 8004620:	20000034 	.word	0x20000034

08004624 <memset>:
 8004624:	4402      	add	r2, r0
 8004626:	4603      	mov	r3, r0
 8004628:	4293      	cmp	r3, r2
 800462a:	d100      	bne.n	800462e <memset+0xa>
 800462c:	4770      	bx	lr
 800462e:	f803 1b01 	strb.w	r1, [r3], #1
 8004632:	e7f9      	b.n	8004628 <memset+0x4>

08004634 <__errno>:
 8004634:	4b01      	ldr	r3, [pc, #4]	@ (800463c <__errno+0x8>)
 8004636:	6818      	ldr	r0, [r3, #0]
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	20000034 	.word	0x20000034

08004640 <__libc_init_array>:
 8004640:	b570      	push	{r4, r5, r6, lr}
 8004642:	4d0d      	ldr	r5, [pc, #52]	@ (8004678 <__libc_init_array+0x38>)
 8004644:	4c0d      	ldr	r4, [pc, #52]	@ (800467c <__libc_init_array+0x3c>)
 8004646:	1b64      	subs	r4, r4, r5
 8004648:	10a4      	asrs	r4, r4, #2
 800464a:	2600      	movs	r6, #0
 800464c:	42a6      	cmp	r6, r4
 800464e:	d109      	bne.n	8004664 <__libc_init_array+0x24>
 8004650:	4d0b      	ldr	r5, [pc, #44]	@ (8004680 <__libc_init_array+0x40>)
 8004652:	4c0c      	ldr	r4, [pc, #48]	@ (8004684 <__libc_init_array+0x44>)
 8004654:	f000 fc64 	bl	8004f20 <_init>
 8004658:	1b64      	subs	r4, r4, r5
 800465a:	10a4      	asrs	r4, r4, #2
 800465c:	2600      	movs	r6, #0
 800465e:	42a6      	cmp	r6, r4
 8004660:	d105      	bne.n	800466e <__libc_init_array+0x2e>
 8004662:	bd70      	pop	{r4, r5, r6, pc}
 8004664:	f855 3b04 	ldr.w	r3, [r5], #4
 8004668:	4798      	blx	r3
 800466a:	3601      	adds	r6, #1
 800466c:	e7ee      	b.n	800464c <__libc_init_array+0xc>
 800466e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004672:	4798      	blx	r3
 8004674:	3601      	adds	r6, #1
 8004676:	e7f2      	b.n	800465e <__libc_init_array+0x1e>
 8004678:	0800538c 	.word	0x0800538c
 800467c:	0800538c 	.word	0x0800538c
 8004680:	0800538c 	.word	0x0800538c
 8004684:	08005390 	.word	0x08005390

08004688 <__retarget_lock_acquire_recursive>:
 8004688:	4770      	bx	lr

0800468a <__retarget_lock_release_recursive>:
 800468a:	4770      	bx	lr

0800468c <_free_r>:
 800468c:	b538      	push	{r3, r4, r5, lr}
 800468e:	4605      	mov	r5, r0
 8004690:	2900      	cmp	r1, #0
 8004692:	d041      	beq.n	8004718 <_free_r+0x8c>
 8004694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004698:	1f0c      	subs	r4, r1, #4
 800469a:	2b00      	cmp	r3, #0
 800469c:	bfb8      	it	lt
 800469e:	18e4      	addlt	r4, r4, r3
 80046a0:	f000 f8e0 	bl	8004864 <__malloc_lock>
 80046a4:	4a1d      	ldr	r2, [pc, #116]	@ (800471c <_free_r+0x90>)
 80046a6:	6813      	ldr	r3, [r2, #0]
 80046a8:	b933      	cbnz	r3, 80046b8 <_free_r+0x2c>
 80046aa:	6063      	str	r3, [r4, #4]
 80046ac:	6014      	str	r4, [r2, #0]
 80046ae:	4628      	mov	r0, r5
 80046b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046b4:	f000 b8dc 	b.w	8004870 <__malloc_unlock>
 80046b8:	42a3      	cmp	r3, r4
 80046ba:	d908      	bls.n	80046ce <_free_r+0x42>
 80046bc:	6820      	ldr	r0, [r4, #0]
 80046be:	1821      	adds	r1, r4, r0
 80046c0:	428b      	cmp	r3, r1
 80046c2:	bf01      	itttt	eq
 80046c4:	6819      	ldreq	r1, [r3, #0]
 80046c6:	685b      	ldreq	r3, [r3, #4]
 80046c8:	1809      	addeq	r1, r1, r0
 80046ca:	6021      	streq	r1, [r4, #0]
 80046cc:	e7ed      	b.n	80046aa <_free_r+0x1e>
 80046ce:	461a      	mov	r2, r3
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	b10b      	cbz	r3, 80046d8 <_free_r+0x4c>
 80046d4:	42a3      	cmp	r3, r4
 80046d6:	d9fa      	bls.n	80046ce <_free_r+0x42>
 80046d8:	6811      	ldr	r1, [r2, #0]
 80046da:	1850      	adds	r0, r2, r1
 80046dc:	42a0      	cmp	r0, r4
 80046de:	d10b      	bne.n	80046f8 <_free_r+0x6c>
 80046e0:	6820      	ldr	r0, [r4, #0]
 80046e2:	4401      	add	r1, r0
 80046e4:	1850      	adds	r0, r2, r1
 80046e6:	4283      	cmp	r3, r0
 80046e8:	6011      	str	r1, [r2, #0]
 80046ea:	d1e0      	bne.n	80046ae <_free_r+0x22>
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	6053      	str	r3, [r2, #4]
 80046f2:	4408      	add	r0, r1
 80046f4:	6010      	str	r0, [r2, #0]
 80046f6:	e7da      	b.n	80046ae <_free_r+0x22>
 80046f8:	d902      	bls.n	8004700 <_free_r+0x74>
 80046fa:	230c      	movs	r3, #12
 80046fc:	602b      	str	r3, [r5, #0]
 80046fe:	e7d6      	b.n	80046ae <_free_r+0x22>
 8004700:	6820      	ldr	r0, [r4, #0]
 8004702:	1821      	adds	r1, r4, r0
 8004704:	428b      	cmp	r3, r1
 8004706:	bf04      	itt	eq
 8004708:	6819      	ldreq	r1, [r3, #0]
 800470a:	685b      	ldreq	r3, [r3, #4]
 800470c:	6063      	str	r3, [r4, #4]
 800470e:	bf04      	itt	eq
 8004710:	1809      	addeq	r1, r1, r0
 8004712:	6021      	streq	r1, [r4, #0]
 8004714:	6054      	str	r4, [r2, #4]
 8004716:	e7ca      	b.n	80046ae <_free_r+0x22>
 8004718:	bd38      	pop	{r3, r4, r5, pc}
 800471a:	bf00      	nop
 800471c:	200003e8 	.word	0x200003e8

08004720 <sbrk_aligned>:
 8004720:	b570      	push	{r4, r5, r6, lr}
 8004722:	4e0f      	ldr	r6, [pc, #60]	@ (8004760 <sbrk_aligned+0x40>)
 8004724:	460c      	mov	r4, r1
 8004726:	6831      	ldr	r1, [r6, #0]
 8004728:	4605      	mov	r5, r0
 800472a:	b911      	cbnz	r1, 8004732 <sbrk_aligned+0x12>
 800472c:	f000 fba4 	bl	8004e78 <_sbrk_r>
 8004730:	6030      	str	r0, [r6, #0]
 8004732:	4621      	mov	r1, r4
 8004734:	4628      	mov	r0, r5
 8004736:	f000 fb9f 	bl	8004e78 <_sbrk_r>
 800473a:	1c43      	adds	r3, r0, #1
 800473c:	d103      	bne.n	8004746 <sbrk_aligned+0x26>
 800473e:	f04f 34ff 	mov.w	r4, #4294967295
 8004742:	4620      	mov	r0, r4
 8004744:	bd70      	pop	{r4, r5, r6, pc}
 8004746:	1cc4      	adds	r4, r0, #3
 8004748:	f024 0403 	bic.w	r4, r4, #3
 800474c:	42a0      	cmp	r0, r4
 800474e:	d0f8      	beq.n	8004742 <sbrk_aligned+0x22>
 8004750:	1a21      	subs	r1, r4, r0
 8004752:	4628      	mov	r0, r5
 8004754:	f000 fb90 	bl	8004e78 <_sbrk_r>
 8004758:	3001      	adds	r0, #1
 800475a:	d1f2      	bne.n	8004742 <sbrk_aligned+0x22>
 800475c:	e7ef      	b.n	800473e <sbrk_aligned+0x1e>
 800475e:	bf00      	nop
 8004760:	200003e4 	.word	0x200003e4

08004764 <_malloc_r>:
 8004764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004768:	1ccd      	adds	r5, r1, #3
 800476a:	f025 0503 	bic.w	r5, r5, #3
 800476e:	3508      	adds	r5, #8
 8004770:	2d0c      	cmp	r5, #12
 8004772:	bf38      	it	cc
 8004774:	250c      	movcc	r5, #12
 8004776:	2d00      	cmp	r5, #0
 8004778:	4606      	mov	r6, r0
 800477a:	db01      	blt.n	8004780 <_malloc_r+0x1c>
 800477c:	42a9      	cmp	r1, r5
 800477e:	d904      	bls.n	800478a <_malloc_r+0x26>
 8004780:	230c      	movs	r3, #12
 8004782:	6033      	str	r3, [r6, #0]
 8004784:	2000      	movs	r0, #0
 8004786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800478a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004860 <_malloc_r+0xfc>
 800478e:	f000 f869 	bl	8004864 <__malloc_lock>
 8004792:	f8d8 3000 	ldr.w	r3, [r8]
 8004796:	461c      	mov	r4, r3
 8004798:	bb44      	cbnz	r4, 80047ec <_malloc_r+0x88>
 800479a:	4629      	mov	r1, r5
 800479c:	4630      	mov	r0, r6
 800479e:	f7ff ffbf 	bl	8004720 <sbrk_aligned>
 80047a2:	1c43      	adds	r3, r0, #1
 80047a4:	4604      	mov	r4, r0
 80047a6:	d158      	bne.n	800485a <_malloc_r+0xf6>
 80047a8:	f8d8 4000 	ldr.w	r4, [r8]
 80047ac:	4627      	mov	r7, r4
 80047ae:	2f00      	cmp	r7, #0
 80047b0:	d143      	bne.n	800483a <_malloc_r+0xd6>
 80047b2:	2c00      	cmp	r4, #0
 80047b4:	d04b      	beq.n	800484e <_malloc_r+0xea>
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	4639      	mov	r1, r7
 80047ba:	4630      	mov	r0, r6
 80047bc:	eb04 0903 	add.w	r9, r4, r3
 80047c0:	f000 fb5a 	bl	8004e78 <_sbrk_r>
 80047c4:	4581      	cmp	r9, r0
 80047c6:	d142      	bne.n	800484e <_malloc_r+0xea>
 80047c8:	6821      	ldr	r1, [r4, #0]
 80047ca:	1a6d      	subs	r5, r5, r1
 80047cc:	4629      	mov	r1, r5
 80047ce:	4630      	mov	r0, r6
 80047d0:	f7ff ffa6 	bl	8004720 <sbrk_aligned>
 80047d4:	3001      	adds	r0, #1
 80047d6:	d03a      	beq.n	800484e <_malloc_r+0xea>
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	442b      	add	r3, r5
 80047dc:	6023      	str	r3, [r4, #0]
 80047de:	f8d8 3000 	ldr.w	r3, [r8]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	bb62      	cbnz	r2, 8004840 <_malloc_r+0xdc>
 80047e6:	f8c8 7000 	str.w	r7, [r8]
 80047ea:	e00f      	b.n	800480c <_malloc_r+0xa8>
 80047ec:	6822      	ldr	r2, [r4, #0]
 80047ee:	1b52      	subs	r2, r2, r5
 80047f0:	d420      	bmi.n	8004834 <_malloc_r+0xd0>
 80047f2:	2a0b      	cmp	r2, #11
 80047f4:	d917      	bls.n	8004826 <_malloc_r+0xc2>
 80047f6:	1961      	adds	r1, r4, r5
 80047f8:	42a3      	cmp	r3, r4
 80047fa:	6025      	str	r5, [r4, #0]
 80047fc:	bf18      	it	ne
 80047fe:	6059      	strne	r1, [r3, #4]
 8004800:	6863      	ldr	r3, [r4, #4]
 8004802:	bf08      	it	eq
 8004804:	f8c8 1000 	streq.w	r1, [r8]
 8004808:	5162      	str	r2, [r4, r5]
 800480a:	604b      	str	r3, [r1, #4]
 800480c:	4630      	mov	r0, r6
 800480e:	f000 f82f 	bl	8004870 <__malloc_unlock>
 8004812:	f104 000b 	add.w	r0, r4, #11
 8004816:	1d23      	adds	r3, r4, #4
 8004818:	f020 0007 	bic.w	r0, r0, #7
 800481c:	1ac2      	subs	r2, r0, r3
 800481e:	bf1c      	itt	ne
 8004820:	1a1b      	subne	r3, r3, r0
 8004822:	50a3      	strne	r3, [r4, r2]
 8004824:	e7af      	b.n	8004786 <_malloc_r+0x22>
 8004826:	6862      	ldr	r2, [r4, #4]
 8004828:	42a3      	cmp	r3, r4
 800482a:	bf0c      	ite	eq
 800482c:	f8c8 2000 	streq.w	r2, [r8]
 8004830:	605a      	strne	r2, [r3, #4]
 8004832:	e7eb      	b.n	800480c <_malloc_r+0xa8>
 8004834:	4623      	mov	r3, r4
 8004836:	6864      	ldr	r4, [r4, #4]
 8004838:	e7ae      	b.n	8004798 <_malloc_r+0x34>
 800483a:	463c      	mov	r4, r7
 800483c:	687f      	ldr	r7, [r7, #4]
 800483e:	e7b6      	b.n	80047ae <_malloc_r+0x4a>
 8004840:	461a      	mov	r2, r3
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	42a3      	cmp	r3, r4
 8004846:	d1fb      	bne.n	8004840 <_malloc_r+0xdc>
 8004848:	2300      	movs	r3, #0
 800484a:	6053      	str	r3, [r2, #4]
 800484c:	e7de      	b.n	800480c <_malloc_r+0xa8>
 800484e:	230c      	movs	r3, #12
 8004850:	6033      	str	r3, [r6, #0]
 8004852:	4630      	mov	r0, r6
 8004854:	f000 f80c 	bl	8004870 <__malloc_unlock>
 8004858:	e794      	b.n	8004784 <_malloc_r+0x20>
 800485a:	6005      	str	r5, [r0, #0]
 800485c:	e7d6      	b.n	800480c <_malloc_r+0xa8>
 800485e:	bf00      	nop
 8004860:	200003e8 	.word	0x200003e8

08004864 <__malloc_lock>:
 8004864:	4801      	ldr	r0, [pc, #4]	@ (800486c <__malloc_lock+0x8>)
 8004866:	f7ff bf0f 	b.w	8004688 <__retarget_lock_acquire_recursive>
 800486a:	bf00      	nop
 800486c:	200003e0 	.word	0x200003e0

08004870 <__malloc_unlock>:
 8004870:	4801      	ldr	r0, [pc, #4]	@ (8004878 <__malloc_unlock+0x8>)
 8004872:	f7ff bf0a 	b.w	800468a <__retarget_lock_release_recursive>
 8004876:	bf00      	nop
 8004878:	200003e0 	.word	0x200003e0

0800487c <__ssputs_r>:
 800487c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004880:	688e      	ldr	r6, [r1, #8]
 8004882:	461f      	mov	r7, r3
 8004884:	42be      	cmp	r6, r7
 8004886:	680b      	ldr	r3, [r1, #0]
 8004888:	4682      	mov	sl, r0
 800488a:	460c      	mov	r4, r1
 800488c:	4690      	mov	r8, r2
 800488e:	d82d      	bhi.n	80048ec <__ssputs_r+0x70>
 8004890:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004894:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004898:	d026      	beq.n	80048e8 <__ssputs_r+0x6c>
 800489a:	6965      	ldr	r5, [r4, #20]
 800489c:	6909      	ldr	r1, [r1, #16]
 800489e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048a2:	eba3 0901 	sub.w	r9, r3, r1
 80048a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048aa:	1c7b      	adds	r3, r7, #1
 80048ac:	444b      	add	r3, r9
 80048ae:	106d      	asrs	r5, r5, #1
 80048b0:	429d      	cmp	r5, r3
 80048b2:	bf38      	it	cc
 80048b4:	461d      	movcc	r5, r3
 80048b6:	0553      	lsls	r3, r2, #21
 80048b8:	d527      	bpl.n	800490a <__ssputs_r+0x8e>
 80048ba:	4629      	mov	r1, r5
 80048bc:	f7ff ff52 	bl	8004764 <_malloc_r>
 80048c0:	4606      	mov	r6, r0
 80048c2:	b360      	cbz	r0, 800491e <__ssputs_r+0xa2>
 80048c4:	6921      	ldr	r1, [r4, #16]
 80048c6:	464a      	mov	r2, r9
 80048c8:	f000 fae6 	bl	8004e98 <memcpy>
 80048cc:	89a3      	ldrh	r3, [r4, #12]
 80048ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80048d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048d6:	81a3      	strh	r3, [r4, #12]
 80048d8:	6126      	str	r6, [r4, #16]
 80048da:	6165      	str	r5, [r4, #20]
 80048dc:	444e      	add	r6, r9
 80048de:	eba5 0509 	sub.w	r5, r5, r9
 80048e2:	6026      	str	r6, [r4, #0]
 80048e4:	60a5      	str	r5, [r4, #8]
 80048e6:	463e      	mov	r6, r7
 80048e8:	42be      	cmp	r6, r7
 80048ea:	d900      	bls.n	80048ee <__ssputs_r+0x72>
 80048ec:	463e      	mov	r6, r7
 80048ee:	6820      	ldr	r0, [r4, #0]
 80048f0:	4632      	mov	r2, r6
 80048f2:	4641      	mov	r1, r8
 80048f4:	f000 faa6 	bl	8004e44 <memmove>
 80048f8:	68a3      	ldr	r3, [r4, #8]
 80048fa:	1b9b      	subs	r3, r3, r6
 80048fc:	60a3      	str	r3, [r4, #8]
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	4433      	add	r3, r6
 8004902:	6023      	str	r3, [r4, #0]
 8004904:	2000      	movs	r0, #0
 8004906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800490a:	462a      	mov	r2, r5
 800490c:	f000 fad2 	bl	8004eb4 <_realloc_r>
 8004910:	4606      	mov	r6, r0
 8004912:	2800      	cmp	r0, #0
 8004914:	d1e0      	bne.n	80048d8 <__ssputs_r+0x5c>
 8004916:	6921      	ldr	r1, [r4, #16]
 8004918:	4650      	mov	r0, sl
 800491a:	f7ff feb7 	bl	800468c <_free_r>
 800491e:	230c      	movs	r3, #12
 8004920:	f8ca 3000 	str.w	r3, [sl]
 8004924:	89a3      	ldrh	r3, [r4, #12]
 8004926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800492a:	81a3      	strh	r3, [r4, #12]
 800492c:	f04f 30ff 	mov.w	r0, #4294967295
 8004930:	e7e9      	b.n	8004906 <__ssputs_r+0x8a>
	...

08004934 <_svfiprintf_r>:
 8004934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004938:	4698      	mov	r8, r3
 800493a:	898b      	ldrh	r3, [r1, #12]
 800493c:	061b      	lsls	r3, r3, #24
 800493e:	b09d      	sub	sp, #116	@ 0x74
 8004940:	4607      	mov	r7, r0
 8004942:	460d      	mov	r5, r1
 8004944:	4614      	mov	r4, r2
 8004946:	d510      	bpl.n	800496a <_svfiprintf_r+0x36>
 8004948:	690b      	ldr	r3, [r1, #16]
 800494a:	b973      	cbnz	r3, 800496a <_svfiprintf_r+0x36>
 800494c:	2140      	movs	r1, #64	@ 0x40
 800494e:	f7ff ff09 	bl	8004764 <_malloc_r>
 8004952:	6028      	str	r0, [r5, #0]
 8004954:	6128      	str	r0, [r5, #16]
 8004956:	b930      	cbnz	r0, 8004966 <_svfiprintf_r+0x32>
 8004958:	230c      	movs	r3, #12
 800495a:	603b      	str	r3, [r7, #0]
 800495c:	f04f 30ff 	mov.w	r0, #4294967295
 8004960:	b01d      	add	sp, #116	@ 0x74
 8004962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004966:	2340      	movs	r3, #64	@ 0x40
 8004968:	616b      	str	r3, [r5, #20]
 800496a:	2300      	movs	r3, #0
 800496c:	9309      	str	r3, [sp, #36]	@ 0x24
 800496e:	2320      	movs	r3, #32
 8004970:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004974:	f8cd 800c 	str.w	r8, [sp, #12]
 8004978:	2330      	movs	r3, #48	@ 0x30
 800497a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004b18 <_svfiprintf_r+0x1e4>
 800497e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004982:	f04f 0901 	mov.w	r9, #1
 8004986:	4623      	mov	r3, r4
 8004988:	469a      	mov	sl, r3
 800498a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800498e:	b10a      	cbz	r2, 8004994 <_svfiprintf_r+0x60>
 8004990:	2a25      	cmp	r2, #37	@ 0x25
 8004992:	d1f9      	bne.n	8004988 <_svfiprintf_r+0x54>
 8004994:	ebba 0b04 	subs.w	fp, sl, r4
 8004998:	d00b      	beq.n	80049b2 <_svfiprintf_r+0x7e>
 800499a:	465b      	mov	r3, fp
 800499c:	4622      	mov	r2, r4
 800499e:	4629      	mov	r1, r5
 80049a0:	4638      	mov	r0, r7
 80049a2:	f7ff ff6b 	bl	800487c <__ssputs_r>
 80049a6:	3001      	adds	r0, #1
 80049a8:	f000 80a7 	beq.w	8004afa <_svfiprintf_r+0x1c6>
 80049ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049ae:	445a      	add	r2, fp
 80049b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80049b2:	f89a 3000 	ldrb.w	r3, [sl]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 809f 	beq.w	8004afa <_svfiprintf_r+0x1c6>
 80049bc:	2300      	movs	r3, #0
 80049be:	f04f 32ff 	mov.w	r2, #4294967295
 80049c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049c6:	f10a 0a01 	add.w	sl, sl, #1
 80049ca:	9304      	str	r3, [sp, #16]
 80049cc:	9307      	str	r3, [sp, #28]
 80049ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80049d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80049d4:	4654      	mov	r4, sl
 80049d6:	2205      	movs	r2, #5
 80049d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049dc:	484e      	ldr	r0, [pc, #312]	@ (8004b18 <_svfiprintf_r+0x1e4>)
 80049de:	f7fb fc0f 	bl	8000200 <memchr>
 80049e2:	9a04      	ldr	r2, [sp, #16]
 80049e4:	b9d8      	cbnz	r0, 8004a1e <_svfiprintf_r+0xea>
 80049e6:	06d0      	lsls	r0, r2, #27
 80049e8:	bf44      	itt	mi
 80049ea:	2320      	movmi	r3, #32
 80049ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049f0:	0711      	lsls	r1, r2, #28
 80049f2:	bf44      	itt	mi
 80049f4:	232b      	movmi	r3, #43	@ 0x2b
 80049f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049fa:	f89a 3000 	ldrb.w	r3, [sl]
 80049fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a00:	d015      	beq.n	8004a2e <_svfiprintf_r+0xfa>
 8004a02:	9a07      	ldr	r2, [sp, #28]
 8004a04:	4654      	mov	r4, sl
 8004a06:	2000      	movs	r0, #0
 8004a08:	f04f 0c0a 	mov.w	ip, #10
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a12:	3b30      	subs	r3, #48	@ 0x30
 8004a14:	2b09      	cmp	r3, #9
 8004a16:	d94b      	bls.n	8004ab0 <_svfiprintf_r+0x17c>
 8004a18:	b1b0      	cbz	r0, 8004a48 <_svfiprintf_r+0x114>
 8004a1a:	9207      	str	r2, [sp, #28]
 8004a1c:	e014      	b.n	8004a48 <_svfiprintf_r+0x114>
 8004a1e:	eba0 0308 	sub.w	r3, r0, r8
 8004a22:	fa09 f303 	lsl.w	r3, r9, r3
 8004a26:	4313      	orrs	r3, r2
 8004a28:	9304      	str	r3, [sp, #16]
 8004a2a:	46a2      	mov	sl, r4
 8004a2c:	e7d2      	b.n	80049d4 <_svfiprintf_r+0xa0>
 8004a2e:	9b03      	ldr	r3, [sp, #12]
 8004a30:	1d19      	adds	r1, r3, #4
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	9103      	str	r1, [sp, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	bfbb      	ittet	lt
 8004a3a:	425b      	neglt	r3, r3
 8004a3c:	f042 0202 	orrlt.w	r2, r2, #2
 8004a40:	9307      	strge	r3, [sp, #28]
 8004a42:	9307      	strlt	r3, [sp, #28]
 8004a44:	bfb8      	it	lt
 8004a46:	9204      	strlt	r2, [sp, #16]
 8004a48:	7823      	ldrb	r3, [r4, #0]
 8004a4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a4c:	d10a      	bne.n	8004a64 <_svfiprintf_r+0x130>
 8004a4e:	7863      	ldrb	r3, [r4, #1]
 8004a50:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a52:	d132      	bne.n	8004aba <_svfiprintf_r+0x186>
 8004a54:	9b03      	ldr	r3, [sp, #12]
 8004a56:	1d1a      	adds	r2, r3, #4
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	9203      	str	r2, [sp, #12]
 8004a5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a60:	3402      	adds	r4, #2
 8004a62:	9305      	str	r3, [sp, #20]
 8004a64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004b28 <_svfiprintf_r+0x1f4>
 8004a68:	7821      	ldrb	r1, [r4, #0]
 8004a6a:	2203      	movs	r2, #3
 8004a6c:	4650      	mov	r0, sl
 8004a6e:	f7fb fbc7 	bl	8000200 <memchr>
 8004a72:	b138      	cbz	r0, 8004a84 <_svfiprintf_r+0x150>
 8004a74:	9b04      	ldr	r3, [sp, #16]
 8004a76:	eba0 000a 	sub.w	r0, r0, sl
 8004a7a:	2240      	movs	r2, #64	@ 0x40
 8004a7c:	4082      	lsls	r2, r0
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	3401      	adds	r4, #1
 8004a82:	9304      	str	r3, [sp, #16]
 8004a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a88:	4824      	ldr	r0, [pc, #144]	@ (8004b1c <_svfiprintf_r+0x1e8>)
 8004a8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a8e:	2206      	movs	r2, #6
 8004a90:	f7fb fbb6 	bl	8000200 <memchr>
 8004a94:	2800      	cmp	r0, #0
 8004a96:	d036      	beq.n	8004b06 <_svfiprintf_r+0x1d2>
 8004a98:	4b21      	ldr	r3, [pc, #132]	@ (8004b20 <_svfiprintf_r+0x1ec>)
 8004a9a:	bb1b      	cbnz	r3, 8004ae4 <_svfiprintf_r+0x1b0>
 8004a9c:	9b03      	ldr	r3, [sp, #12]
 8004a9e:	3307      	adds	r3, #7
 8004aa0:	f023 0307 	bic.w	r3, r3, #7
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	9303      	str	r3, [sp, #12]
 8004aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004aaa:	4433      	add	r3, r6
 8004aac:	9309      	str	r3, [sp, #36]	@ 0x24
 8004aae:	e76a      	b.n	8004986 <_svfiprintf_r+0x52>
 8004ab0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ab4:	460c      	mov	r4, r1
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	e7a8      	b.n	8004a0c <_svfiprintf_r+0xd8>
 8004aba:	2300      	movs	r3, #0
 8004abc:	3401      	adds	r4, #1
 8004abe:	9305      	str	r3, [sp, #20]
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	f04f 0c0a 	mov.w	ip, #10
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004acc:	3a30      	subs	r2, #48	@ 0x30
 8004ace:	2a09      	cmp	r2, #9
 8004ad0:	d903      	bls.n	8004ada <_svfiprintf_r+0x1a6>
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0c6      	beq.n	8004a64 <_svfiprintf_r+0x130>
 8004ad6:	9105      	str	r1, [sp, #20]
 8004ad8:	e7c4      	b.n	8004a64 <_svfiprintf_r+0x130>
 8004ada:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ade:	4604      	mov	r4, r0
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e7f0      	b.n	8004ac6 <_svfiprintf_r+0x192>
 8004ae4:	ab03      	add	r3, sp, #12
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	462a      	mov	r2, r5
 8004aea:	4b0e      	ldr	r3, [pc, #56]	@ (8004b24 <_svfiprintf_r+0x1f0>)
 8004aec:	a904      	add	r1, sp, #16
 8004aee:	4638      	mov	r0, r7
 8004af0:	f3af 8000 	nop.w
 8004af4:	1c42      	adds	r2, r0, #1
 8004af6:	4606      	mov	r6, r0
 8004af8:	d1d6      	bne.n	8004aa8 <_svfiprintf_r+0x174>
 8004afa:	89ab      	ldrh	r3, [r5, #12]
 8004afc:	065b      	lsls	r3, r3, #25
 8004afe:	f53f af2d 	bmi.w	800495c <_svfiprintf_r+0x28>
 8004b02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b04:	e72c      	b.n	8004960 <_svfiprintf_r+0x2c>
 8004b06:	ab03      	add	r3, sp, #12
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	462a      	mov	r2, r5
 8004b0c:	4b05      	ldr	r3, [pc, #20]	@ (8004b24 <_svfiprintf_r+0x1f0>)
 8004b0e:	a904      	add	r1, sp, #16
 8004b10:	4638      	mov	r0, r7
 8004b12:	f000 f879 	bl	8004c08 <_printf_i>
 8004b16:	e7ed      	b.n	8004af4 <_svfiprintf_r+0x1c0>
 8004b18:	08005350 	.word	0x08005350
 8004b1c:	0800535a 	.word	0x0800535a
 8004b20:	00000000 	.word	0x00000000
 8004b24:	0800487d 	.word	0x0800487d
 8004b28:	08005356 	.word	0x08005356

08004b2c <_printf_common>:
 8004b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b30:	4616      	mov	r6, r2
 8004b32:	4698      	mov	r8, r3
 8004b34:	688a      	ldr	r2, [r1, #8]
 8004b36:	690b      	ldr	r3, [r1, #16]
 8004b38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	bfb8      	it	lt
 8004b40:	4613      	movlt	r3, r2
 8004b42:	6033      	str	r3, [r6, #0]
 8004b44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b48:	4607      	mov	r7, r0
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	b10a      	cbz	r2, 8004b52 <_printf_common+0x26>
 8004b4e:	3301      	adds	r3, #1
 8004b50:	6033      	str	r3, [r6, #0]
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	0699      	lsls	r1, r3, #26
 8004b56:	bf42      	ittt	mi
 8004b58:	6833      	ldrmi	r3, [r6, #0]
 8004b5a:	3302      	addmi	r3, #2
 8004b5c:	6033      	strmi	r3, [r6, #0]
 8004b5e:	6825      	ldr	r5, [r4, #0]
 8004b60:	f015 0506 	ands.w	r5, r5, #6
 8004b64:	d106      	bne.n	8004b74 <_printf_common+0x48>
 8004b66:	f104 0a19 	add.w	sl, r4, #25
 8004b6a:	68e3      	ldr	r3, [r4, #12]
 8004b6c:	6832      	ldr	r2, [r6, #0]
 8004b6e:	1a9b      	subs	r3, r3, r2
 8004b70:	42ab      	cmp	r3, r5
 8004b72:	dc26      	bgt.n	8004bc2 <_printf_common+0x96>
 8004b74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b78:	6822      	ldr	r2, [r4, #0]
 8004b7a:	3b00      	subs	r3, #0
 8004b7c:	bf18      	it	ne
 8004b7e:	2301      	movne	r3, #1
 8004b80:	0692      	lsls	r2, r2, #26
 8004b82:	d42b      	bmi.n	8004bdc <_printf_common+0xb0>
 8004b84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b88:	4641      	mov	r1, r8
 8004b8a:	4638      	mov	r0, r7
 8004b8c:	47c8      	blx	r9
 8004b8e:	3001      	adds	r0, #1
 8004b90:	d01e      	beq.n	8004bd0 <_printf_common+0xa4>
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	6922      	ldr	r2, [r4, #16]
 8004b96:	f003 0306 	and.w	r3, r3, #6
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	bf02      	ittt	eq
 8004b9e:	68e5      	ldreq	r5, [r4, #12]
 8004ba0:	6833      	ldreq	r3, [r6, #0]
 8004ba2:	1aed      	subeq	r5, r5, r3
 8004ba4:	68a3      	ldr	r3, [r4, #8]
 8004ba6:	bf0c      	ite	eq
 8004ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bac:	2500      	movne	r5, #0
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	bfc4      	itt	gt
 8004bb2:	1a9b      	subgt	r3, r3, r2
 8004bb4:	18ed      	addgt	r5, r5, r3
 8004bb6:	2600      	movs	r6, #0
 8004bb8:	341a      	adds	r4, #26
 8004bba:	42b5      	cmp	r5, r6
 8004bbc:	d11a      	bne.n	8004bf4 <_printf_common+0xc8>
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	e008      	b.n	8004bd4 <_printf_common+0xa8>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	4652      	mov	r2, sl
 8004bc6:	4641      	mov	r1, r8
 8004bc8:	4638      	mov	r0, r7
 8004bca:	47c8      	blx	r9
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d103      	bne.n	8004bd8 <_printf_common+0xac>
 8004bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bd8:	3501      	adds	r5, #1
 8004bda:	e7c6      	b.n	8004b6a <_printf_common+0x3e>
 8004bdc:	18e1      	adds	r1, r4, r3
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	2030      	movs	r0, #48	@ 0x30
 8004be2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004be6:	4422      	add	r2, r4
 8004be8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004bec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004bf0:	3302      	adds	r3, #2
 8004bf2:	e7c7      	b.n	8004b84 <_printf_common+0x58>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	4622      	mov	r2, r4
 8004bf8:	4641      	mov	r1, r8
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	47c8      	blx	r9
 8004bfe:	3001      	adds	r0, #1
 8004c00:	d0e6      	beq.n	8004bd0 <_printf_common+0xa4>
 8004c02:	3601      	adds	r6, #1
 8004c04:	e7d9      	b.n	8004bba <_printf_common+0x8e>
	...

08004c08 <_printf_i>:
 8004c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c0c:	7e0f      	ldrb	r7, [r1, #24]
 8004c0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c10:	2f78      	cmp	r7, #120	@ 0x78
 8004c12:	4691      	mov	r9, r2
 8004c14:	4680      	mov	r8, r0
 8004c16:	460c      	mov	r4, r1
 8004c18:	469a      	mov	sl, r3
 8004c1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c1e:	d807      	bhi.n	8004c30 <_printf_i+0x28>
 8004c20:	2f62      	cmp	r7, #98	@ 0x62
 8004c22:	d80a      	bhi.n	8004c3a <_printf_i+0x32>
 8004c24:	2f00      	cmp	r7, #0
 8004c26:	f000 80d1 	beq.w	8004dcc <_printf_i+0x1c4>
 8004c2a:	2f58      	cmp	r7, #88	@ 0x58
 8004c2c:	f000 80b8 	beq.w	8004da0 <_printf_i+0x198>
 8004c30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c38:	e03a      	b.n	8004cb0 <_printf_i+0xa8>
 8004c3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c3e:	2b15      	cmp	r3, #21
 8004c40:	d8f6      	bhi.n	8004c30 <_printf_i+0x28>
 8004c42:	a101      	add	r1, pc, #4	@ (adr r1, 8004c48 <_printf_i+0x40>)
 8004c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c48:	08004ca1 	.word	0x08004ca1
 8004c4c:	08004cb5 	.word	0x08004cb5
 8004c50:	08004c31 	.word	0x08004c31
 8004c54:	08004c31 	.word	0x08004c31
 8004c58:	08004c31 	.word	0x08004c31
 8004c5c:	08004c31 	.word	0x08004c31
 8004c60:	08004cb5 	.word	0x08004cb5
 8004c64:	08004c31 	.word	0x08004c31
 8004c68:	08004c31 	.word	0x08004c31
 8004c6c:	08004c31 	.word	0x08004c31
 8004c70:	08004c31 	.word	0x08004c31
 8004c74:	08004db3 	.word	0x08004db3
 8004c78:	08004cdf 	.word	0x08004cdf
 8004c7c:	08004d6d 	.word	0x08004d6d
 8004c80:	08004c31 	.word	0x08004c31
 8004c84:	08004c31 	.word	0x08004c31
 8004c88:	08004dd5 	.word	0x08004dd5
 8004c8c:	08004c31 	.word	0x08004c31
 8004c90:	08004cdf 	.word	0x08004cdf
 8004c94:	08004c31 	.word	0x08004c31
 8004c98:	08004c31 	.word	0x08004c31
 8004c9c:	08004d75 	.word	0x08004d75
 8004ca0:	6833      	ldr	r3, [r6, #0]
 8004ca2:	1d1a      	adds	r2, r3, #4
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6032      	str	r2, [r6, #0]
 8004ca8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e09c      	b.n	8004dee <_printf_i+0x1e6>
 8004cb4:	6833      	ldr	r3, [r6, #0]
 8004cb6:	6820      	ldr	r0, [r4, #0]
 8004cb8:	1d19      	adds	r1, r3, #4
 8004cba:	6031      	str	r1, [r6, #0]
 8004cbc:	0606      	lsls	r6, r0, #24
 8004cbe:	d501      	bpl.n	8004cc4 <_printf_i+0xbc>
 8004cc0:	681d      	ldr	r5, [r3, #0]
 8004cc2:	e003      	b.n	8004ccc <_printf_i+0xc4>
 8004cc4:	0645      	lsls	r5, r0, #25
 8004cc6:	d5fb      	bpl.n	8004cc0 <_printf_i+0xb8>
 8004cc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ccc:	2d00      	cmp	r5, #0
 8004cce:	da03      	bge.n	8004cd8 <_printf_i+0xd0>
 8004cd0:	232d      	movs	r3, #45	@ 0x2d
 8004cd2:	426d      	negs	r5, r5
 8004cd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cd8:	4858      	ldr	r0, [pc, #352]	@ (8004e3c <_printf_i+0x234>)
 8004cda:	230a      	movs	r3, #10
 8004cdc:	e011      	b.n	8004d02 <_printf_i+0xfa>
 8004cde:	6821      	ldr	r1, [r4, #0]
 8004ce0:	6833      	ldr	r3, [r6, #0]
 8004ce2:	0608      	lsls	r0, r1, #24
 8004ce4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ce8:	d402      	bmi.n	8004cf0 <_printf_i+0xe8>
 8004cea:	0649      	lsls	r1, r1, #25
 8004cec:	bf48      	it	mi
 8004cee:	b2ad      	uxthmi	r5, r5
 8004cf0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004cf2:	4852      	ldr	r0, [pc, #328]	@ (8004e3c <_printf_i+0x234>)
 8004cf4:	6033      	str	r3, [r6, #0]
 8004cf6:	bf14      	ite	ne
 8004cf8:	230a      	movne	r3, #10
 8004cfa:	2308      	moveq	r3, #8
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d02:	6866      	ldr	r6, [r4, #4]
 8004d04:	60a6      	str	r6, [r4, #8]
 8004d06:	2e00      	cmp	r6, #0
 8004d08:	db05      	blt.n	8004d16 <_printf_i+0x10e>
 8004d0a:	6821      	ldr	r1, [r4, #0]
 8004d0c:	432e      	orrs	r6, r5
 8004d0e:	f021 0104 	bic.w	r1, r1, #4
 8004d12:	6021      	str	r1, [r4, #0]
 8004d14:	d04b      	beq.n	8004dae <_printf_i+0x1a6>
 8004d16:	4616      	mov	r6, r2
 8004d18:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d1c:	fb03 5711 	mls	r7, r3, r1, r5
 8004d20:	5dc7      	ldrb	r7, [r0, r7]
 8004d22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d26:	462f      	mov	r7, r5
 8004d28:	42bb      	cmp	r3, r7
 8004d2a:	460d      	mov	r5, r1
 8004d2c:	d9f4      	bls.n	8004d18 <_printf_i+0x110>
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d10b      	bne.n	8004d4a <_printf_i+0x142>
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	07df      	lsls	r7, r3, #31
 8004d36:	d508      	bpl.n	8004d4a <_printf_i+0x142>
 8004d38:	6923      	ldr	r3, [r4, #16]
 8004d3a:	6861      	ldr	r1, [r4, #4]
 8004d3c:	4299      	cmp	r1, r3
 8004d3e:	bfde      	ittt	le
 8004d40:	2330      	movle	r3, #48	@ 0x30
 8004d42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d4a:	1b92      	subs	r2, r2, r6
 8004d4c:	6122      	str	r2, [r4, #16]
 8004d4e:	f8cd a000 	str.w	sl, [sp]
 8004d52:	464b      	mov	r3, r9
 8004d54:	aa03      	add	r2, sp, #12
 8004d56:	4621      	mov	r1, r4
 8004d58:	4640      	mov	r0, r8
 8004d5a:	f7ff fee7 	bl	8004b2c <_printf_common>
 8004d5e:	3001      	adds	r0, #1
 8004d60:	d14a      	bne.n	8004df8 <_printf_i+0x1f0>
 8004d62:	f04f 30ff 	mov.w	r0, #4294967295
 8004d66:	b004      	add	sp, #16
 8004d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d6c:	6823      	ldr	r3, [r4, #0]
 8004d6e:	f043 0320 	orr.w	r3, r3, #32
 8004d72:	6023      	str	r3, [r4, #0]
 8004d74:	4832      	ldr	r0, [pc, #200]	@ (8004e40 <_printf_i+0x238>)
 8004d76:	2778      	movs	r7, #120	@ 0x78
 8004d78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	6831      	ldr	r1, [r6, #0]
 8004d80:	061f      	lsls	r7, r3, #24
 8004d82:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d86:	d402      	bmi.n	8004d8e <_printf_i+0x186>
 8004d88:	065f      	lsls	r7, r3, #25
 8004d8a:	bf48      	it	mi
 8004d8c:	b2ad      	uxthmi	r5, r5
 8004d8e:	6031      	str	r1, [r6, #0]
 8004d90:	07d9      	lsls	r1, r3, #31
 8004d92:	bf44      	itt	mi
 8004d94:	f043 0320 	orrmi.w	r3, r3, #32
 8004d98:	6023      	strmi	r3, [r4, #0]
 8004d9a:	b11d      	cbz	r5, 8004da4 <_printf_i+0x19c>
 8004d9c:	2310      	movs	r3, #16
 8004d9e:	e7ad      	b.n	8004cfc <_printf_i+0xf4>
 8004da0:	4826      	ldr	r0, [pc, #152]	@ (8004e3c <_printf_i+0x234>)
 8004da2:	e7e9      	b.n	8004d78 <_printf_i+0x170>
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	f023 0320 	bic.w	r3, r3, #32
 8004daa:	6023      	str	r3, [r4, #0]
 8004dac:	e7f6      	b.n	8004d9c <_printf_i+0x194>
 8004dae:	4616      	mov	r6, r2
 8004db0:	e7bd      	b.n	8004d2e <_printf_i+0x126>
 8004db2:	6833      	ldr	r3, [r6, #0]
 8004db4:	6825      	ldr	r5, [r4, #0]
 8004db6:	6961      	ldr	r1, [r4, #20]
 8004db8:	1d18      	adds	r0, r3, #4
 8004dba:	6030      	str	r0, [r6, #0]
 8004dbc:	062e      	lsls	r6, r5, #24
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	d501      	bpl.n	8004dc6 <_printf_i+0x1be>
 8004dc2:	6019      	str	r1, [r3, #0]
 8004dc4:	e002      	b.n	8004dcc <_printf_i+0x1c4>
 8004dc6:	0668      	lsls	r0, r5, #25
 8004dc8:	d5fb      	bpl.n	8004dc2 <_printf_i+0x1ba>
 8004dca:	8019      	strh	r1, [r3, #0]
 8004dcc:	2300      	movs	r3, #0
 8004dce:	6123      	str	r3, [r4, #16]
 8004dd0:	4616      	mov	r6, r2
 8004dd2:	e7bc      	b.n	8004d4e <_printf_i+0x146>
 8004dd4:	6833      	ldr	r3, [r6, #0]
 8004dd6:	1d1a      	adds	r2, r3, #4
 8004dd8:	6032      	str	r2, [r6, #0]
 8004dda:	681e      	ldr	r6, [r3, #0]
 8004ddc:	6862      	ldr	r2, [r4, #4]
 8004dde:	2100      	movs	r1, #0
 8004de0:	4630      	mov	r0, r6
 8004de2:	f7fb fa0d 	bl	8000200 <memchr>
 8004de6:	b108      	cbz	r0, 8004dec <_printf_i+0x1e4>
 8004de8:	1b80      	subs	r0, r0, r6
 8004dea:	6060      	str	r0, [r4, #4]
 8004dec:	6863      	ldr	r3, [r4, #4]
 8004dee:	6123      	str	r3, [r4, #16]
 8004df0:	2300      	movs	r3, #0
 8004df2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004df6:	e7aa      	b.n	8004d4e <_printf_i+0x146>
 8004df8:	6923      	ldr	r3, [r4, #16]
 8004dfa:	4632      	mov	r2, r6
 8004dfc:	4649      	mov	r1, r9
 8004dfe:	4640      	mov	r0, r8
 8004e00:	47d0      	blx	sl
 8004e02:	3001      	adds	r0, #1
 8004e04:	d0ad      	beq.n	8004d62 <_printf_i+0x15a>
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	079b      	lsls	r3, r3, #30
 8004e0a:	d413      	bmi.n	8004e34 <_printf_i+0x22c>
 8004e0c:	68e0      	ldr	r0, [r4, #12]
 8004e0e:	9b03      	ldr	r3, [sp, #12]
 8004e10:	4298      	cmp	r0, r3
 8004e12:	bfb8      	it	lt
 8004e14:	4618      	movlt	r0, r3
 8004e16:	e7a6      	b.n	8004d66 <_printf_i+0x15e>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	4632      	mov	r2, r6
 8004e1c:	4649      	mov	r1, r9
 8004e1e:	4640      	mov	r0, r8
 8004e20:	47d0      	blx	sl
 8004e22:	3001      	adds	r0, #1
 8004e24:	d09d      	beq.n	8004d62 <_printf_i+0x15a>
 8004e26:	3501      	adds	r5, #1
 8004e28:	68e3      	ldr	r3, [r4, #12]
 8004e2a:	9903      	ldr	r1, [sp, #12]
 8004e2c:	1a5b      	subs	r3, r3, r1
 8004e2e:	42ab      	cmp	r3, r5
 8004e30:	dcf2      	bgt.n	8004e18 <_printf_i+0x210>
 8004e32:	e7eb      	b.n	8004e0c <_printf_i+0x204>
 8004e34:	2500      	movs	r5, #0
 8004e36:	f104 0619 	add.w	r6, r4, #25
 8004e3a:	e7f5      	b.n	8004e28 <_printf_i+0x220>
 8004e3c:	08005361 	.word	0x08005361
 8004e40:	08005372 	.word	0x08005372

08004e44 <memmove>:
 8004e44:	4288      	cmp	r0, r1
 8004e46:	b510      	push	{r4, lr}
 8004e48:	eb01 0402 	add.w	r4, r1, r2
 8004e4c:	d902      	bls.n	8004e54 <memmove+0x10>
 8004e4e:	4284      	cmp	r4, r0
 8004e50:	4623      	mov	r3, r4
 8004e52:	d807      	bhi.n	8004e64 <memmove+0x20>
 8004e54:	1e43      	subs	r3, r0, #1
 8004e56:	42a1      	cmp	r1, r4
 8004e58:	d008      	beq.n	8004e6c <memmove+0x28>
 8004e5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e62:	e7f8      	b.n	8004e56 <memmove+0x12>
 8004e64:	4402      	add	r2, r0
 8004e66:	4601      	mov	r1, r0
 8004e68:	428a      	cmp	r2, r1
 8004e6a:	d100      	bne.n	8004e6e <memmove+0x2a>
 8004e6c:	bd10      	pop	{r4, pc}
 8004e6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e76:	e7f7      	b.n	8004e68 <memmove+0x24>

08004e78 <_sbrk_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4d06      	ldr	r5, [pc, #24]	@ (8004e94 <_sbrk_r+0x1c>)
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4604      	mov	r4, r0
 8004e80:	4608      	mov	r0, r1
 8004e82:	602b      	str	r3, [r5, #0]
 8004e84:	f7fc fa64 	bl	8001350 <_sbrk>
 8004e88:	1c43      	adds	r3, r0, #1
 8004e8a:	d102      	bne.n	8004e92 <_sbrk_r+0x1a>
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	b103      	cbz	r3, 8004e92 <_sbrk_r+0x1a>
 8004e90:	6023      	str	r3, [r4, #0]
 8004e92:	bd38      	pop	{r3, r4, r5, pc}
 8004e94:	200003dc 	.word	0x200003dc

08004e98 <memcpy>:
 8004e98:	440a      	add	r2, r1
 8004e9a:	4291      	cmp	r1, r2
 8004e9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ea0:	d100      	bne.n	8004ea4 <memcpy+0xc>
 8004ea2:	4770      	bx	lr
 8004ea4:	b510      	push	{r4, lr}
 8004ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004eae:	4291      	cmp	r1, r2
 8004eb0:	d1f9      	bne.n	8004ea6 <memcpy+0xe>
 8004eb2:	bd10      	pop	{r4, pc}

08004eb4 <_realloc_r>:
 8004eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb8:	4607      	mov	r7, r0
 8004eba:	4614      	mov	r4, r2
 8004ebc:	460d      	mov	r5, r1
 8004ebe:	b921      	cbnz	r1, 8004eca <_realloc_r+0x16>
 8004ec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	f7ff bc4d 	b.w	8004764 <_malloc_r>
 8004eca:	b92a      	cbnz	r2, 8004ed8 <_realloc_r+0x24>
 8004ecc:	f7ff fbde 	bl	800468c <_free_r>
 8004ed0:	4625      	mov	r5, r4
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ed8:	f000 f81a 	bl	8004f10 <_malloc_usable_size_r>
 8004edc:	4284      	cmp	r4, r0
 8004ede:	4606      	mov	r6, r0
 8004ee0:	d802      	bhi.n	8004ee8 <_realloc_r+0x34>
 8004ee2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ee6:	d8f4      	bhi.n	8004ed2 <_realloc_r+0x1e>
 8004ee8:	4621      	mov	r1, r4
 8004eea:	4638      	mov	r0, r7
 8004eec:	f7ff fc3a 	bl	8004764 <_malloc_r>
 8004ef0:	4680      	mov	r8, r0
 8004ef2:	b908      	cbnz	r0, 8004ef8 <_realloc_r+0x44>
 8004ef4:	4645      	mov	r5, r8
 8004ef6:	e7ec      	b.n	8004ed2 <_realloc_r+0x1e>
 8004ef8:	42b4      	cmp	r4, r6
 8004efa:	4622      	mov	r2, r4
 8004efc:	4629      	mov	r1, r5
 8004efe:	bf28      	it	cs
 8004f00:	4632      	movcs	r2, r6
 8004f02:	f7ff ffc9 	bl	8004e98 <memcpy>
 8004f06:	4629      	mov	r1, r5
 8004f08:	4638      	mov	r0, r7
 8004f0a:	f7ff fbbf 	bl	800468c <_free_r>
 8004f0e:	e7f1      	b.n	8004ef4 <_realloc_r+0x40>

08004f10 <_malloc_usable_size_r>:
 8004f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f14:	1f18      	subs	r0, r3, #4
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	bfbc      	itt	lt
 8004f1a:	580b      	ldrlt	r3, [r1, r0]
 8004f1c:	18c0      	addlt	r0, r0, r3
 8004f1e:	4770      	bx	lr

08004f20 <_init>:
 8004f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f22:	bf00      	nop
 8004f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f26:	bc08      	pop	{r3}
 8004f28:	469e      	mov	lr, r3
 8004f2a:	4770      	bx	lr

08004f2c <_fini>:
 8004f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2e:	bf00      	nop
 8004f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f32:	bc08      	pop	{r3}
 8004f34:	469e      	mov	lr, r3
 8004f36:	4770      	bx	lr
