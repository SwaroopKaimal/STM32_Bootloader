
Bootloader_STM32L496xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004700  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  080048b0  080048b0  000058b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b94  08004b94  00006064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004b94  08004b94  00005b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b9c  08004b9c  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b9c  08004b9c  00005b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ba0  08004ba0  00005ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08004ba4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20000064  08004c08  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08004c08  000063cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bab4  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cb3  00000000  00000000  00011b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  00013800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e1  00000000  00000000  00014258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a40  00000000  00000000  00014a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb03  00000000  00000000  0003d479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f72d7  00000000  00000000  00049f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141253  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e74  00000000  00000000  00141298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0014410c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004898 	.word	0x08004898

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08004898 	.word	0x08004898

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 fdb7 	bl	8001142 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f824 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 f8f4 	bl	80007c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005dc:	f000 f8c2 	bl	8000764 <MX_USART2_UART_Init>
  MX_CRC_Init();
 80005e0:	f000 f872 	bl	80006c8 <MX_CRC_Init>
  MX_LPUART1_UART_Init();
 80005e4:	f000 f892 	bl	800070c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

    /* Check whether button is pressed or not, if not pressed jump to user application */
  if ( HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin) == GPIO_PIN_SET ) { /*On Nucleo-boards pressing implies making it low*/
 80005e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ec:	4809      	ldr	r0, [pc, #36]	@ (8000614 <main+0x48>)
 80005ee:	f001 fa95 	bl	8001b1c <HAL_GPIO_ReadPin>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d105      	bne.n	8000604 <main+0x38>
	  printmsg("BL_DEBUG_MSG:Button is pressed.. going to BL mode\n\r");
 80005f8:	4807      	ldr	r0, [pc, #28]	@ (8000618 <main+0x4c>)
 80005fa:	f000 f98f 	bl	800091c <printmsg>

	  //we should continue in boot loader mode
	  bootloader_uart_read_data();
 80005fe:	f000 f9df 	bl	80009c0 <bootloader_uart_read_data>
 8000602:	e005      	b.n	8000610 <main+0x44>
  } else {
	  printmsg("BL_DEBUG_MSG:Button is not pressed.. executing user application\n\r");
 8000604:	4805      	ldr	r0, [pc, #20]	@ (800061c <main+0x50>)
 8000606:	f000 f989 	bl	800091c <printmsg>

	  //jump to user application
	  bootloader_jump_to_user_app();
 800060a:	f000 f9ad 	bl	8000968 <bootloader_jump_to_user_app>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060e:	bf00      	nop
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <main+0x44>
 8000614:	48000800 	.word	0x48000800
 8000618:	080048b0 	.word	0x080048b0
 800061c:	080048e4 	.word	0x080048e4

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b096      	sub	sp, #88	@ 0x58
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	2244      	movs	r2, #68	@ 0x44
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f003 fcb4 	bl	8003f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	463b      	mov	r3, r7
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000642:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000646:	f001 faa7 	bl	8001b98 <HAL_PWREx_ControlVoltageScaling>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000650:	f000 fbe8 	bl	8000e24 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000654:	2310      	movs	r3, #16
 8000656:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000660:	2360      	movs	r3, #96	@ 0x60
 8000662:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000668:	2301      	movs	r3, #1
 800066a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800066c:	2301      	movs	r3, #1
 800066e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000670:	2328      	movs	r3, #40	@ 0x28
 8000672:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	4618      	mov	r0, r3
 8000686:	f001 faed 	bl	8001c64 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000690:	f000 fbc8 	bl	8000e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2303      	movs	r3, #3
 800069a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006aa:	463b      	mov	r3, r7
 80006ac:	2104      	movs	r1, #4
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fef2 	bl	8002498 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ba:	f000 fbb3 	bl	8000e24 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3758      	adds	r7, #88	@ 0x58
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <MX_CRC_Init+0x3c>)
 80006ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000708 <MX_CRC_Init+0x40>)
 80006d0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_CRC_Init+0x3c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <MX_CRC_Init+0x3c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_CRC_Init+0x3c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <MX_CRC_Init+0x3c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_CRC_Init+0x3c>)
 80006ec:	2203      	movs	r2, #3
 80006ee:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	@ (8000704 <MX_CRC_Init+0x3c>)
 80006f2:	f000 fe81 	bl	80013f8 <HAL_CRC_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80006fc:	f000 fb92 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000080 	.word	0x20000080
 8000708:	40023000 	.word	0x40023000

0800070c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000710:	4b12      	ldr	r3, [pc, #72]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 8000712:	4a13      	ldr	r2, [pc, #76]	@ (8000760 <MX_LPUART1_UART_Init+0x54>)
 8000714:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b0a      	ldr	r3, [pc, #40]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073c:	4b07      	ldr	r3, [pc, #28]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	@ (800075c <MX_LPUART1_UART_Init+0x50>)
 800074a:	f002 fd93 	bl	8003274 <HAL_UART_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000754:	f000 fb66 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200000a4 	.word	0x200000a4
 8000760:	40008000 	.word	0x40008000

08000764 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000768:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 800076a:	4a15      	ldr	r2, [pc, #84]	@ (80007c0 <MX_USART2_UART_Init+0x5c>)
 800076c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076e:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 80007a8:	f002 fd64 	bl	8003274 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007b2:	f000 fb37 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	2000012c 	.word	0x2000012c
 80007c0:	40004400 	.word	0x40004400

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	@ 0x28
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	4b4c      	ldr	r3, [pc, #304]	@ (800090c <MX_GPIO_Init+0x148>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	4a4b      	ldr	r2, [pc, #300]	@ (800090c <MX_GPIO_Init+0x148>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e6:	4b49      	ldr	r3, [pc, #292]	@ (800090c <MX_GPIO_Init+0x148>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f2:	4b46      	ldr	r3, [pc, #280]	@ (800090c <MX_GPIO_Init+0x148>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	4a45      	ldr	r2, [pc, #276]	@ (800090c <MX_GPIO_Init+0x148>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007fe:	4b43      	ldr	r3, [pc, #268]	@ (800090c <MX_GPIO_Init+0x148>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b40      	ldr	r3, [pc, #256]	@ (800090c <MX_GPIO_Init+0x148>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	4a3f      	ldr	r2, [pc, #252]	@ (800090c <MX_GPIO_Init+0x148>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000816:	4b3d      	ldr	r3, [pc, #244]	@ (800090c <MX_GPIO_Init+0x148>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b3a      	ldr	r3, [pc, #232]	@ (800090c <MX_GPIO_Init+0x148>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	4a39      	ldr	r2, [pc, #228]	@ (800090c <MX_GPIO_Init+0x148>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082e:	4b37      	ldr	r3, [pc, #220]	@ (800090c <MX_GPIO_Init+0x148>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800083a:	4b34      	ldr	r3, [pc, #208]	@ (800090c <MX_GPIO_Init+0x148>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	4a33      	ldr	r2, [pc, #204]	@ (800090c <MX_GPIO_Init+0x148>)
 8000840:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000846:	4b31      	ldr	r3, [pc, #196]	@ (800090c <MX_GPIO_Init+0x148>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8000852:	f001 f9f7 	bl	8001c44 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 800085c:	482c      	ldr	r0, [pc, #176]	@ (8000910 <MX_GPIO_Init+0x14c>)
 800085e:	f001 f975 	bl	8001b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 5131 	mov.w	r1, #11328	@ 0x2c40
 8000868:	482a      	ldr	r0, [pc, #168]	@ (8000914 <MX_GPIO_Init+0x150>)
 800086a:	f001 f96f 	bl	8001b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800086e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000874:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	4824      	ldr	r0, [pc, #144]	@ (8000918 <MX_GPIO_Init+0x154>)
 8000886:	f000 ffb7 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800088a:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	481b      	ldr	r0, [pc, #108]	@ (8000910 <MX_GPIO_Init+0x14c>)
 80008a4:	f000 ffa8 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 80008a8:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	4815      	ldr	r0, [pc, #84]	@ (8000914 <MX_GPIO_Init+0x150>)
 80008be:	f000 ff9b 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 80008c2:	f44f 5331 	mov.w	r3, #11328	@ 0x2c40
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	480e      	ldr	r0, [pc, #56]	@ (8000914 <MX_GPIO_Init+0x150>)
 80008dc:	f000 ff8c 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008e0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008f2:	230a      	movs	r3, #10
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000900:	f000 ff7a 	bl	80017f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000904:	bf00      	nop
 8000906:	3728      	adds	r7, #40	@ 0x28
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40021000 	.word	0x40021000
 8000910:	48000400 	.word	0x48000400
 8000914:	48001800 	.word	0x48001800
 8000918:	48000800 	.word	0x48000800

0800091c <printmsg>:

/*Prints formatted string to console over UART
 * HAL_UART_Transmit() only sends raw bytes
 * If we want to print variables (integers, floats, hex values, etc.), we need to format them */
void printmsg(char *format,...)
{
 800091c:	b40f      	push	{r0, r1, r2, r3}
 800091e:	b580      	push	{r7, lr}
 8000920:	b096      	sub	sp, #88	@ 0x58
 8000922:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];

	/*Extract the argument list using C VA APIs*/
	va_list args;
	va_start(args, format);
 8000924:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000928:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000932:	4618      	mov	r0, r3
 8000934:	f003 fb28 	bl	8003f88 <vsiprintf>
	HAL_UART_Transmit(D_UART, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000938:	f107 0308 	add.w	r3, r7, #8
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fc57 	bl	80001f0 <strlen>
 8000942:	4603      	mov	r3, r0
 8000944:	b29a      	uxth	r2, r3
 8000946:	f107 0108 	add.w	r1, r7, #8
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	4805      	ldr	r0, [pc, #20]	@ (8000964 <printmsg+0x48>)
 8000950:	f002 fcde 	bl	8003310 <HAL_UART_Transmit>
	va_end(args);
#endif
}
 8000954:	bf00      	nop
 8000956:	3758      	adds	r7, #88	@ 0x58
 8000958:	46bd      	mov	sp, r7
 800095a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800095e:	b004      	add	sp, #16
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	200000a4 	.word	0x200000a4

08000968 <bootloader_jump_to_user_app>:


void bootloader_jump_to_user_app(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
	 */

	// A 'function pointer' to hold the address of the reset handler of the user application
	void (*app_reset_handler) (void); /*Used in Step 2 */

	printmsg("BL_DEBUG_MSG:bootloader_jump_to_user_app\n");
 800096e:	480f      	ldr	r0, [pc, #60]	@ (80009ac <bootloader_jump_to_user_app+0x44>)
 8000970:	f7ff ffd4 	bl	800091c <printmsg>

	/*The first byte at address of the FLASH area holds the value of MSP and next byte holds the Reset Handler
	 * according to ARM-Cortex Architecture */

	/*1. Configure the Main Stack Pointer (MSP) by reading the value form the flash base address of desired sector*/
	uint32_t msp_value = *(volatile uint32_t*)FLASH_APP_CODE_BASEADDR;
 8000974:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <bootloader_jump_to_user_app+0x48>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	f383 8808 	msr	MSP, r3
}
 8000984:	bf00      	nop

	/* Set MSP function form CMSIS*/
	__set_MSP(msp_value);

	/* Re-map vector table to user application base address */
	SCB->VTOR = FLASH_APP_CODE_BASEADDR; /* System Control Block - Vector Table Offset Register */
 8000986:	4b0b      	ldr	r3, [pc, #44]	@ (80009b4 <bootloader_jump_to_user_app+0x4c>)
 8000988:	4a09      	ldr	r2, [pc, #36]	@ (80009b0 <bootloader_jump_to_user_app+0x48>)
 800098a:	609a      	str	r2, [r3, #8]

	/* 2. Now fetch the reset handler address of the user application
	 * from the location FLASH_SECTOR2_BASE_ADDRESS + 4*/

	uint32_t resethandler_address = *(volatile uint32_t *) (FLASH_APP_CODE_BASEADDR + 4);
 800098c:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <bootloader_jump_to_user_app+0x50>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	60bb      	str	r3, [r7, #8]

	app_reset_handler = (void*) resethandler_address; /*Initializing function pointer with reset handler*/
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	607b      	str	r3, [r7, #4]

	printmsg("BL_DEBUG_MSG: Application reset handler address : %#x\n",app_reset_handler);
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	4808      	ldr	r0, [pc, #32]	@ (80009bc <bootloader_jump_to_user_app+0x54>)
 800099a:	f7ff ffbf 	bl	800091c <printmsg>

	/*3. Jumping to the reset handler of user application - Now this address will be loaded into the Program Counter*/
	app_reset_handler();
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4798      	blx	r3

}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	08004928 	.word	0x08004928
 80009b0:	08008000 	.word	0x08008000
 80009b4:	e000ed00 	.word	0xe000ed00
 80009b8:	08008004 	.word	0x08008004
 80009bc:	08004954 	.word	0x08004954

080009c0 <bootloader_uart_read_data>:

void bootloader_uart_read_data(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
	/*First read only one byte, which is the length. Then read the other bytes from UART */

	uint8_t rcv_len=0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		memset(bl_rx_buffer, 0, 200); //??
 80009ca:	22c8      	movs	r2, #200	@ 0xc8
 80009cc:	2100      	movs	r1, #0
 80009ce:	4835      	ldr	r0, [pc, #212]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 80009d0:	f003 fae4 	bl	8003f9c <memset>

		HAL_UART_Receive(C_UART, (uint8_t*)&bl_rx_buffer, 1, HAL_MAX_DELAY);
 80009d4:	f04f 33ff 	mov.w	r3, #4294967295
 80009d8:	2201      	movs	r2, #1
 80009da:	4932      	ldr	r1, [pc, #200]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 80009dc:	4832      	ldr	r0, [pc, #200]	@ (8000aa8 <bootloader_uart_read_data+0xe8>)
 80009de:	f002 fd20 	bl	8003422 <HAL_UART_Receive>
		rcv_len = bl_rx_buffer[0];
 80009e2:	4b30      	ldr	r3, [pc, #192]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(C_UART, &bl_rx_buffer[1], rcv_len, HAL_MAX_DELAY);
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295
 80009f0:	492e      	ldr	r1, [pc, #184]	@ (8000aac <bootloader_uart_read_data+0xec>)
 80009f2:	482d      	ldr	r0, [pc, #180]	@ (8000aa8 <bootloader_uart_read_data+0xe8>)
 80009f4:	f002 fd15 	bl	8003422 <HAL_UART_Receive>

		switch(bl_rx_buffer[1]) /* To check for command codes */
 80009f8:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 80009fa:	785b      	ldrb	r3, [r3, #1]
 80009fc:	3b51      	subs	r3, #81	@ 0x51
 80009fe:	2b0b      	cmp	r3, #11
 8000a00:	d84a      	bhi.n	8000a98 <bootloader_uart_read_data+0xd8>
 8000a02:	a201      	add	r2, pc, #4	@ (adr r2, 8000a08 <bootloader_uart_read_data+0x48>)
 8000a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a08:	08000a39 	.word	0x08000a39
 8000a0c:	08000a41 	.word	0x08000a41
 8000a10:	08000a49 	.word	0x08000a49
 8000a14:	08000a51 	.word	0x08000a51
 8000a18:	08000a59 	.word	0x08000a59
 8000a1c:	08000a61 	.word	0x08000a61
 8000a20:	08000a69 	.word	0x08000a69
 8000a24:	08000a71 	.word	0x08000a71
 8000a28:	08000a79 	.word	0x08000a79
 8000a2c:	08000a81 	.word	0x08000a81
 8000a30:	08000a89 	.word	0x08000a89
 8000a34:	08000a91 	.word	0x08000a91
		{
		case BL_GET_VER:
			bootloader_handle_getver_cmd(bl_rx_buffer);
 8000a38:	481a      	ldr	r0, [pc, #104]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 8000a3a:	f000 f83b 	bl	8000ab4 <bootloader_handle_getver_cmd>
			break;
 8000a3e:	e02f      	b.n	8000aa0 <bootloader_uart_read_data+0xe0>
		case BL_GET_HELP:
			bootloader_handle_gethelp_cmd(bl_rx_buffer);
 8000a40:	4818      	ldr	r0, [pc, #96]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 8000a42:	f000 f87f 	bl	8000b44 <bootloader_handle_gethelp_cmd>
			break;
 8000a46:	e02b      	b.n	8000aa0 <bootloader_uart_read_data+0xe0>
		case BL_GET_CID:
			bootloader_handle_getcid_cmd(bl_rx_buffer);
 8000a48:	4816      	ldr	r0, [pc, #88]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 8000a4a:	f000 f8b7 	bl	8000bbc <bootloader_handle_getcid_cmd>
			break;
 8000a4e:	e027      	b.n	8000aa0 <bootloader_uart_read_data+0xe0>
		case BL_GET_RDP_STATUS:
			bootloader_handle_getrdp_cmd(bl_rx_buffer);
 8000a50:	4814      	ldr	r0, [pc, #80]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 8000a52:	f000 f8ff 	bl	8000c54 <bootloader_handle_getrdp_cmd>
			break;
 8000a56:	e023      	b.n	8000aa0 <bootloader_uart_read_data+0xe0>
		case BL_GO_TO_ADDR:
			bootloader_handle_go_cmd(bl_rx_buffer);
 8000a58:	4812      	ldr	r0, [pc, #72]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 8000a5a:	f000 f905 	bl	8000c68 <bootloader_handle_go_cmd>
			break;
 8000a5e:	e01f      	b.n	8000aa0 <bootloader_uart_read_data+0xe0>
		case BL_FLASH_ERASE:
			bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8000a60:	4810      	ldr	r0, [pc, #64]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 8000a62:	f000 f90b 	bl	8000c7c <bootloader_handle_flash_erase_cmd>
			break;
 8000a66:	e01b      	b.n	8000aa0 <bootloader_uart_read_data+0xe0>
		case BL_MEM_WRITE:
			bootloader_handle_mem_write_cmd(bl_rx_buffer);
 8000a68:	480e      	ldr	r0, [pc, #56]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 8000a6a:	f000 f911 	bl	8000c90 <bootloader_handle_mem_write_cmd>
			break;
 8000a6e:	e017      	b.n	8000aa0 <bootloader_uart_read_data+0xe0>
		case BL_EN_RW_PROTECT:
			bootloader_handle_en_rw_protect(bl_rx_buffer);
 8000a70:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 8000a72:	f000 f917 	bl	8000ca4 <bootloader_handle_en_rw_protect>
			break;
 8000a76:	e013      	b.n	8000aa0 <bootloader_uart_read_data+0xe0>
		case BL_MEM_READ:
			bootloader_handle_mem_read(bl_rx_buffer);
 8000a78:	480a      	ldr	r0, [pc, #40]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 8000a7a:	f000 f91d 	bl	8000cb8 <bootloader_handle_mem_read>
			break;
 8000a7e:	e00f      	b.n	8000aa0 <bootloader_uart_read_data+0xe0>
		case BL_READ_SECTOR_P_STATUS:
			bootloader_handle_read_sector_protection_status(bl_rx_buffer);
 8000a80:	4808      	ldr	r0, [pc, #32]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 8000a82:	f000 f923 	bl	8000ccc <bootloader_handle_read_sector_protection_status>
			break;
 8000a86:	e00b      	b.n	8000aa0 <bootloader_uart_read_data+0xe0>
		case BL_OTP_READ:
			bootloader_handle_read_otp(bl_rx_buffer);
 8000a88:	4806      	ldr	r0, [pc, #24]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 8000a8a:	f000 f929 	bl	8000ce0 <bootloader_handle_read_otp>
			break;
 8000a8e:	e007      	b.n	8000aa0 <bootloader_uart_read_data+0xe0>
		case BL_DIS_R_W_PROTECT:
			bootloader_handle_dis_rw_protect(bl_rx_buffer);
 8000a90:	4804      	ldr	r0, [pc, #16]	@ (8000aa4 <bootloader_uart_read_data+0xe4>)
 8000a92:	f000 f92f 	bl	8000cf4 <bootloader_handle_dis_rw_protect>
			break;
 8000a96:	e003      	b.n	8000aa0 <bootloader_uart_read_data+0xe0>
		default:
			printmsg("BL_DEBUG_MSG:Invalid command code received from host \n");
 8000a98:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <bootloader_uart_read_data+0xf0>)
 8000a9a:	f7ff ff3f 	bl	800091c <printmsg>
			break;
 8000a9e:	bf00      	nop
		memset(bl_rx_buffer, 0, 200); //??
 8000aa0:	e793      	b.n	80009ca <bootloader_uart_read_data+0xa>
 8000aa2:	bf00      	nop
 8000aa4:	200001b4 	.word	0x200001b4
 8000aa8:	2000012c 	.word	0x2000012c
 8000aac:	200001b5 	.word	0x200001b5
 8000ab0:	0800498c 	.word	0x0800498c

08000ab4 <bootloader_handle_getver_cmd>:
}

/******************* Boot loader handler functions *******************/

void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	uint8_t bl_version;

	/*Total length of command packet*/
	uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]

	/*Extract the 4 bytes of CRC32 sent by the host*/
	uint32_t host_crc = *((uint32_t*) (bl_rx_buffer + command_packet_len - 4)); /* ?? */
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	3b04      	subs	r3, #4
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	4413      	add	r3, r2
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	613b      	str	r3, [r7, #16]

	/*Verify the checksum */
	printmsg("BL_DEBUG_MSG: bootloader_handle_getver_cmd\n");
 8000ad0:	4818      	ldr	r0, [pc, #96]	@ (8000b34 <bootloader_handle_getver_cmd+0x80>)
 8000ad2:	f7ff ff23 	bl	800091c <printmsg>
	if(! bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc)) /*Subtract the CRC bytes - ??*/
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	3b04      	subs	r3, #4
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4619      	mov	r1, r3
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f000 f93e 	bl	8000d60 <bootloader_verify_crc>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d11a      	bne.n	8000b20 <bootloader_handle_getver_cmd+0x6c>
	{
		/*Checksum is correct*/
		printmsg("BL_DEBUG_MSG: Checksum success...!\n");
 8000aea:	4813      	ldr	r0, [pc, #76]	@ (8000b38 <bootloader_handle_getver_cmd+0x84>)
 8000aec:	f7ff ff16 	bl	800091c <printmsg>
		bootloader_send_ack(bl_rx_buffer[0], 1);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2101      	movs	r1, #1
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f918 	bl	8000d2c <bootloader_send_ack>
		bl_version = get_bootloader_version();
 8000afc:	f000 f964 	bl	8000dc8 <get_bootloader_version>
 8000b00:	4603      	mov	r3, r0
 8000b02:	73fb      	strb	r3, [r7, #15]
		printmsg("BL_DEBUG_MSG: BL_VER: %d &#x\n", bl_version, bl_version);
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	4619      	mov	r1, r3
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	480b      	ldr	r0, [pc, #44]	@ (8000b3c <bootloader_handle_getver_cmd+0x88>)
 8000b0e:	f7ff ff05 	bl	800091c <printmsg>
		bootloader_uart_write_data(&bl_version, 1); /* Sends data back to the HOST */
 8000b12:	f107 030f 	add.w	r3, r7, #15
 8000b16:	2101      	movs	r1, #1
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 f95d 	bl	8000dd8 <bootloader_uart_write_data>
		printmsg("BL_DEBUG_MSG: Checksum failed...!\n");
		bootloader_send_nack();

	}

}
 8000b1e:	e004      	b.n	8000b2a <bootloader_handle_getver_cmd+0x76>
		printmsg("BL_DEBUG_MSG: Checksum failed...!\n");
 8000b20:	4807      	ldr	r0, [pc, #28]	@ (8000b40 <bootloader_handle_getver_cmd+0x8c>)
 8000b22:	f7ff fefb 	bl	800091c <printmsg>
		bootloader_send_nack();
 8000b26:	f000 f8ef 	bl	8000d08 <bootloader_send_nack>
}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	080049c4 	.word	0x080049c4
 8000b38:	080049f0 	.word	0x080049f0
 8000b3c:	08004a14 	.word	0x08004a14
 8000b40:	08004a34 	.word	0x08004a34

08000b44 <bootloader_handle_gethelp_cmd>:

void bootloader_handle_gethelp_cmd(uint8_t *pBuffer) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

  printmsg("BL_DEBUG_MSG:bootloader_handle_gethelp_cmd\n");
 8000b4c:	4816      	ldr	r0, [pc, #88]	@ (8000ba8 <bootloader_handle_gethelp_cmd+0x64>)
 8000b4e:	f7ff fee5 	bl	800091c <printmsg>

  //Total length of the command packet
  uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000b52:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <bootloader_handle_gethelp_cmd+0x68>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	3301      	adds	r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]

  //extract the CRC32 sent by the Host
  uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	3b04      	subs	r3, #4
 8000b5e:	4a13      	ldr	r2, [pc, #76]	@ (8000bac <bootloader_handle_gethelp_cmd+0x68>)
 8000b60:	4413      	add	r3, r2
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	60bb      	str	r3, [r7, #8]

  if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc)) {
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	3b04      	subs	r3, #4
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480f      	ldr	r0, [pc, #60]	@ (8000bac <bootloader_handle_gethelp_cmd+0x68>)
 8000b70:	f000 f8f6 	bl	8000d60 <bootloader_verify_crc>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d10d      	bne.n	8000b96 <bootloader_handle_gethelp_cmd+0x52>
    printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000b7a:	480d      	ldr	r0, [pc, #52]	@ (8000bb0 <bootloader_handle_gethelp_cmd+0x6c>)
 8000b7c:	f7ff fece 	bl	800091c <printmsg>
    bootloader_send_ack(pBuffer[0],sizeof(supported_commands));
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2108      	movs	r1, #8
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f8d0 	bl	8000d2c <bootloader_send_ack>
    bootloader_uart_write_data(supported_commands,sizeof(supported_commands) );
 8000b8c:	2108      	movs	r1, #8
 8000b8e:	4809      	ldr	r0, [pc, #36]	@ (8000bb4 <bootloader_handle_gethelp_cmd+0x70>)
 8000b90:	f000 f922 	bl	8000dd8 <bootloader_uart_write_data>

  } else {
    printmsg("BL_DEBUG_MSG:checksum fail !!\n");
    bootloader_send_nack();
  }
}
 8000b94:	e004      	b.n	8000ba0 <bootloader_handle_gethelp_cmd+0x5c>
    printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000b96:	4808      	ldr	r0, [pc, #32]	@ (8000bb8 <bootloader_handle_gethelp_cmd+0x74>)
 8000b98:	f7ff fec0 	bl	800091c <printmsg>
    bootloader_send_nack();
 8000b9c:	f000 f8b4 	bl	8000d08 <bootloader_send_nack>
}
 8000ba0:	bf00      	nop
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	08004a58 	.word	0x08004a58
 8000bac:	200001b4 	.word	0x200001b4
 8000bb0:	08004a84 	.word	0x08004a84
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	08004aa8 	.word	0x08004aa8

08000bbc <bootloader_handle_getcid_cmd>:

void bootloader_handle_getcid_cmd(uint8_t *pBuffer)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

	printmsg("BL_DEBUG_MSG:bootloader_handle_getcid_cmd\n");
 8000bc4:	481e      	ldr	r0, [pc, #120]	@ (8000c40 <bootloader_handle_getcid_cmd+0x84>)
 8000bc6:	f7ff fea9 	bl	800091c <printmsg>

	uint16_t bl_cid_num = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	81fb      	strh	r3, [r7, #14]

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0] + 1 ;
 8000bce:	4b1d      	ldr	r3, [pc, #116]	@ (8000c44 <bootloader_handle_getcid_cmd+0x88>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3b04      	subs	r3, #4
 8000bda:	4a1a      	ldr	r2, [pc, #104]	@ (8000c44 <bootloader_handle_getcid_cmd+0x88>)
 8000bdc:	4413      	add	r3, r2
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc)) {
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3b04      	subs	r3, #4
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	4619      	mov	r1, r3
 8000bea:	4816      	ldr	r0, [pc, #88]	@ (8000c44 <bootloader_handle_getcid_cmd+0x88>)
 8000bec:	f000 f8b8 	bl	8000d60 <bootloader_verify_crc>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d11a      	bne.n	8000c2c <bootloader_handle_getcid_cmd+0x70>

		printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000bf6:	4814      	ldr	r0, [pc, #80]	@ (8000c48 <bootloader_handle_getcid_cmd+0x8c>)
 8000bf8:	f7ff fe90 	bl	800091c <printmsg>
		bootloader_send_ack(pBuffer[0],2);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2102      	movs	r1, #2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f892 	bl	8000d2c <bootloader_send_ack>
		bl_cid_num = get_mcu_chip_id();
 8000c08:	f000 f8fa 	bl	8000e00 <get_mcu_chip_id>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	81fb      	strh	r3, [r7, #14]
		printmsg("BL_DEBUG_MSG:MCU id : %d %#x !!\n",bl_cid_num, bl_cid_num);
 8000c10:	89fb      	ldrh	r3, [r7, #14]
 8000c12:	4619      	mov	r1, r3
 8000c14:	89fb      	ldrh	r3, [r7, #14]
 8000c16:	461a      	mov	r2, r3
 8000c18:	480c      	ldr	r0, [pc, #48]	@ (8000c4c <bootloader_handle_getcid_cmd+0x90>)
 8000c1a:	f7ff fe7f 	bl	800091c <printmsg>
		bootloader_uart_write_data((uint8_t *)&bl_cid_num,2);
 8000c1e:	f107 030e 	add.w	r3, r7, #14
 8000c22:	2102      	movs	r1, #2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 f8d7 	bl	8000dd8 <bootloader_uart_write_data>
	} else {
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}

}
 8000c2a:	e004      	b.n	8000c36 <bootloader_handle_getcid_cmd+0x7a>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000c2c:	4808      	ldr	r0, [pc, #32]	@ (8000c50 <bootloader_handle_getcid_cmd+0x94>)
 8000c2e:	f7ff fe75 	bl	800091c <printmsg>
		bootloader_send_nack();
 8000c32:	f000 f869 	bl	8000d08 <bootloader_send_nack>
}
 8000c36:	bf00      	nop
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	08004ac8 	.word	0x08004ac8
 8000c44:	200001b4 	.word	0x200001b4
 8000c48:	08004a84 	.word	0x08004a84
 8000c4c:	08004af4 	.word	0x08004af4
 8000c50:	08004aa8 	.word	0x08004aa8

08000c54 <bootloader_handle_getrdp_cmd>:

void bootloader_handle_getrdp_cmd(uint8_t *pBuffer)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <bootloader_handle_go_cmd>:

void bootloader_handle_go_cmd(uint8_t *pBuffer)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <bootloader_handle_flash_erase_cmd>:

void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <bootloader_handle_mem_write_cmd>:

void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]

}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <bootloader_handle_en_rw_protect>:

void bootloader_handle_en_rw_protect(uint8_t *pBuffer)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <bootloader_handle_mem_read>:

void bootloader_handle_mem_read(uint8_t *pBuffer)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <bootloader_handle_read_sector_protection_status>:

void bootloader_handle_read_sector_protection_status(uint8_t *pBuffer)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <bootloader_handle_read_otp>:

void bootloader_handle_read_otp(uint8_t *pBuffer)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <bootloader_handle_dis_rw_protect>:

void bootloader_handle_dis_rw_protect(uint8_t *pBuffer)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <bootloader_send_nack>:

void bootloader_send_nack(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 8000d0e:	237f      	movs	r3, #127	@ 0x7f
 8000d10:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(C_UART, (uint8_t*)&nack, 1, HAL_MAX_DELAY);
 8000d12:	1df9      	adds	r1, r7, #7
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4803      	ldr	r0, [pc, #12]	@ (8000d28 <bootloader_send_nack+0x20>)
 8000d1c:	f002 faf8 	bl	8003310 <HAL_UART_Transmit>

}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	2000012c 	.word	0x2000012c

08000d2c <bootloader_send_ack>:

void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	460a      	mov	r2, r1
 8000d36:	71fb      	strb	r3, [r7, #7]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	71bb      	strb	r3, [r7, #6]
	/* 2 Bytes are sent, first byte is ACK and second is the length value */
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 8000d3c:	23a5      	movs	r3, #165	@ 0xa5
 8000d3e:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 8000d40:	79bb      	ldrb	r3, [r7, #6]
 8000d42:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(C_UART, (uint8_t*)&ack_buf, 2, HAL_MAX_DELAY);
 8000d44:	f107 010c 	add.w	r1, r7, #12
 8000d48:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	4803      	ldr	r0, [pc, #12]	@ (8000d5c <bootloader_send_ack+0x30>)
 8000d50:	f002 fade 	bl	8003310 <HAL_UART_Transmit>
}
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	2000012c 	.word	0x2000012c

08000d60 <bootloader_verify_crc>:

uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len,uint32_t crc_host)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
	uint32_t uwCRCValue = 0xff;
 8000d6c:	23ff      	movs	r3, #255	@ 0xff
 8000d6e:	61fb      	str	r3, [r7, #28]

	for(uint32_t i=0; i<len; i++)
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
 8000d74:	e00f      	b.n	8000d96 <bootloader_verify_crc+0x36>
	{
		uint32_t i_data = pData[i];
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	617b      	str	r3, [r7, #20]
		uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2201      	movs	r2, #1
 8000d86:	4619      	mov	r1, r3
 8000d88:	480e      	ldr	r0, [pc, #56]	@ (8000dc4 <bootloader_verify_crc+0x64>)
 8000d8a:	f000 fb99 	bl	80014c0 <HAL_CRC_Accumulate>
 8000d8e:	61f8      	str	r0, [r7, #28]
	for(uint32_t i=0; i<len; i++)
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	3301      	adds	r3, #1
 8000d94:	61bb      	str	r3, [r7, #24]
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d3eb      	bcc.n	8000d76 <bootloader_verify_crc+0x16>
	}

	/* Reset CRC Calculation Unit */
	__HAL_CRC_DR_RESET(&hcrc);
 8000d9e:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <bootloader_verify_crc+0x64>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <bootloader_verify_crc+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f042 0201 	orr.w	r2, r2, #1
 8000dac:	609a      	str	r2, [r3, #8]

	if(uwCRCValue == crc_host)
 8000dae:	69fa      	ldr	r2, [r7, #28]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d101      	bne.n	8000dba <bootloader_verify_crc+0x5a>
	{
		return VERIFY_CRC_SUCCESS;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <bootloader_verify_crc+0x5c>
	}
	return VERIFY_CRC_FAIL;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3720      	adds	r7, #32
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000080 	.word	0x20000080

08000dc8 <get_bootloader_version>:

uint8_t get_bootloader_version(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
	return (uint8_t)BL_VERSION;
 8000dcc:	2310      	movs	r3, #16
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <bootloader_uart_write_data>:

void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(C_UART, pBuffer, len, HAL_MAX_DELAY);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	4803      	ldr	r0, [pc, #12]	@ (8000dfc <bootloader_uart_write_data+0x24>)
 8000dee:	f002 fa8f 	bl	8003310 <HAL_UART_Transmit>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000012c 	.word	0x2000012c

08000e00 <get_mcu_chip_id>:

uint16_t get_mcu_chip_id(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
	   the user software. It is even accessible while the MCU is under system reset.
	 */

	uint16_t cid;
	/* Reading the register and masking the unnecessary bits */
	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8000e06:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <get_mcu_chip_id+0x20>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e10:	80fb      	strh	r3, [r7, #6]
	return  cid;
 8000e12:	88fb      	ldrh	r3, [r7, #6]

}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e0042000 	.word	0xe0042000

08000e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e28:	b672      	cpsid	i
}
 8000e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <Error_Handler+0x8>

08000e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <HAL_MspInit+0x44>)
 8000e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e74 <HAL_MspInit+0x44>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e42:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <HAL_MspInit+0x44>)
 8000e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <HAL_MspInit+0x44>)
 8000e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e52:	4a08      	ldr	r2, [pc, #32]	@ (8000e74 <HAL_MspInit+0x44>)
 8000e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e5a:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <HAL_MspInit+0x44>)
 8000e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40021000 	.word	0x40021000

08000e78 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <HAL_CRC_MspInit+0x38>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d10b      	bne.n	8000ea2 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <HAL_CRC_MspInit+0x3c>)
 8000e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e8e:	4a09      	ldr	r2, [pc, #36]	@ (8000eb4 <HAL_CRC_MspInit+0x3c>)
 8000e90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e94:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e96:	4b07      	ldr	r3, [pc, #28]	@ (8000eb4 <HAL_CRC_MspInit+0x3c>)
 8000e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000ea2:	bf00      	nop
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40023000 	.word	0x40023000
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b0ae      	sub	sp, #184	@ 0xb8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed0:	f107 0318 	add.w	r3, r7, #24
 8000ed4:	228c      	movs	r2, #140	@ 0x8c
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f003 f85f 	bl	8003f9c <memset>
  if(huart->Instance==LPUART1)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a43      	ldr	r2, [pc, #268]	@ (8000ff0 <HAL_UART_MspInit+0x138>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d13e      	bne.n	8000f66 <HAL_UART_MspInit+0xae>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ee8:	2320      	movs	r3, #32
 8000eea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef0:	f107 0318 	add.w	r3, r7, #24
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 fcf3 	bl	80028e0 <HAL_RCCEx_PeriphCLKConfig>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f00:	f7ff ff90 	bl	8000e24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f04:	4b3b      	ldr	r3, [pc, #236]	@ (8000ff4 <HAL_UART_MspInit+0x13c>)
 8000f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f08:	4a3a      	ldr	r2, [pc, #232]	@ (8000ff4 <HAL_UART_MspInit+0x13c>)
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000f10:	4b38      	ldr	r3, [pc, #224]	@ (8000ff4 <HAL_UART_MspInit+0x13c>)
 8000f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f1c:	4b35      	ldr	r3, [pc, #212]	@ (8000ff4 <HAL_UART_MspInit+0x13c>)
 8000f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f20:	4a34      	ldr	r2, [pc, #208]	@ (8000ff4 <HAL_UART_MspInit+0x13c>)
 8000f22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f28:	4b32      	ldr	r3, [pc, #200]	@ (8000ff4 <HAL_UART_MspInit+0x13c>)
 8000f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000f34:	f000 fe86 	bl	8001c44 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f38:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000f3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f52:	2308      	movs	r3, #8
 8000f54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f58:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4826      	ldr	r0, [pc, #152]	@ (8000ff8 <HAL_UART_MspInit+0x140>)
 8000f60:	f000 fc4a 	bl	80017f8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f64:	e040      	b.n	8000fe8 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART2)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a24      	ldr	r2, [pc, #144]	@ (8000ffc <HAL_UART_MspInit+0x144>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d13b      	bne.n	8000fe8 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f78:	f107 0318 	add.w	r3, r7, #24
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f001 fcaf 	bl	80028e0 <HAL_RCCEx_PeriphCLKConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000f88:	f7ff ff4c 	bl	8000e24 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <HAL_UART_MspInit+0x13c>)
 8000f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f90:	4a18      	ldr	r2, [pc, #96]	@ (8000ff4 <HAL_UART_MspInit+0x13c>)
 8000f92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f96:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f98:	4b16      	ldr	r3, [pc, #88]	@ (8000ff4 <HAL_UART_MspInit+0x13c>)
 8000f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	4b13      	ldr	r3, [pc, #76]	@ (8000ff4 <HAL_UART_MspInit+0x13c>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa8:	4a12      	ldr	r2, [pc, #72]	@ (8000ff4 <HAL_UART_MspInit+0x13c>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fb0:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <HAL_UART_MspInit+0x13c>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fbc:	230c      	movs	r3, #12
 8000fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fd4:	2307      	movs	r3, #7
 8000fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fe4:	f000 fc08 	bl	80017f8 <HAL_GPIO_Init>
}
 8000fe8:	bf00      	nop
 8000fea:	37b8      	adds	r7, #184	@ 0xb8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40008000 	.word	0x40008000
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	48001800 	.word	0x48001800
 8000ffc:	40004400 	.word	0x40004400

08001000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <NMI_Handler+0x4>

08001008 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <HardFault_Handler+0x4>

08001010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <MemManage_Handler+0x4>

08001018 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <BusFault_Handler+0x4>

08001020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <UsageFault_Handler+0x4>

08001028 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001056:	f000 f8c9 	bl	80011ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001068:	4a14      	ldr	r2, [pc, #80]	@ (80010bc <_sbrk+0x5c>)
 800106a:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <_sbrk+0x60>)
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001074:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800107c:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <_sbrk+0x64>)
 800107e:	4a12      	ldr	r2, [pc, #72]	@ (80010c8 <_sbrk+0x68>)
 8001080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001082:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	429a      	cmp	r2, r3
 800108e:	d207      	bcs.n	80010a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001090:	f002 ff8c 	bl	8003fac <__errno>
 8001094:	4603      	mov	r3, r0
 8001096:	220c      	movs	r2, #12
 8001098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	e009      	b.n	80010b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a0:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a6:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a05      	ldr	r2, [pc, #20]	@ (80010c4 <_sbrk+0x64>)
 80010b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20040000 	.word	0x20040000
 80010c0:	00000400 	.word	0x00000400
 80010c4:	2000027c 	.word	0x2000027c
 80010c8:	200003d0 	.word	0x200003d0

080010cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010d0:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <SystemInit+0x20>)
 80010d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010d6:	4a05      	ldr	r2, [pc, #20]	@ (80010ec <SystemInit+0x20>)
 80010d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001128 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010f4:	f7ff ffea 	bl	80010cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f8:	480c      	ldr	r0, [pc, #48]	@ (800112c <LoopForever+0x6>)
  ldr r1, =_edata
 80010fa:	490d      	ldr	r1, [pc, #52]	@ (8001130 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001134 <LoopForever+0xe>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001100:	e002      	b.n	8001108 <LoopCopyDataInit>

08001102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001106:	3304      	adds	r3, #4

08001108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800110c:	d3f9      	bcc.n	8001102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110e:	4a0a      	ldr	r2, [pc, #40]	@ (8001138 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001110:	4c0a      	ldr	r4, [pc, #40]	@ (800113c <LoopForever+0x16>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001114:	e001      	b.n	800111a <LoopFillZerobss>

08001116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001118:	3204      	adds	r2, #4

0800111a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800111c:	d3fb      	bcc.n	8001116 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800111e:	f002 ff4b 	bl	8003fb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001122:	f7ff fa53 	bl	80005cc <main>

08001126 <LoopForever>:

LoopForever:
    b LoopForever
 8001126:	e7fe      	b.n	8001126 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001128:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800112c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001130:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001134:	08004ba4 	.word	0x08004ba4
  ldr r2, =_sbss
 8001138:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800113c:	200003cc 	.word	0x200003cc

08001140 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001140:	e7fe      	b.n	8001140 <ADC1_2_IRQHandler>

08001142 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114c:	2003      	movs	r0, #3
 800114e:	f000 f91f 	bl	8001390 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001152:	2000      	movs	r0, #0
 8001154:	f000 f80e 	bl	8001174 <HAL_InitTick>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d002      	beq.n	8001164 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	71fb      	strb	r3, [r7, #7]
 8001162:	e001      	b.n	8001168 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001164:	f7ff fe64 	bl	8000e30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001168:	79fb      	ldrb	r3, [r7, #7]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800117c:	2300      	movs	r3, #0
 800117e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001180:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <HAL_InitTick+0x6c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d023      	beq.n	80011d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001188:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <HAL_InitTick+0x70>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <HAL_InitTick+0x6c>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001196:	fbb3 f3f1 	udiv	r3, r3, r1
 800119a:	fbb2 f3f3 	udiv	r3, r2, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 f91d 	bl	80013de <HAL_SYSTICK_Config>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10f      	bne.n	80011ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	d809      	bhi.n	80011c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b0:	2200      	movs	r2, #0
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f000 f8f5 	bl	80013a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011bc:	4a0a      	ldr	r2, [pc, #40]	@ (80011e8 <HAL_InitTick+0x74>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e007      	b.n	80011d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	e004      	b.n	80011d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	73fb      	strb	r3, [r7, #15]
 80011ce:	e001      	b.n	80011d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000010 	.word	0x20000010
 80011e4:	20000008 	.word	0x20000008
 80011e8:	2000000c 	.word	0x2000000c

080011ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <HAL_IncTick+0x20>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <HAL_IncTick+0x24>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <HAL_IncTick+0x24>)
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000010 	.word	0x20000010
 8001210:	20000280 	.word	0x20000280

08001214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return uwTick;
 8001218:	4b03      	ldr	r3, [pc, #12]	@ (8001228 <HAL_GetTick+0x14>)
 800121a:	681b      	ldr	r3, [r3, #0]
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000280 	.word	0x20000280

0800122c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800123c:	4b0c      	ldr	r3, [pc, #48]	@ (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001248:	4013      	ands	r3, r2
 800124a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001254:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800125c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125e:	4a04      	ldr	r2, [pc, #16]	@ (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	60d3      	str	r3, [r2, #12]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001278:	4b04      	ldr	r3, [pc, #16]	@ (800128c <__NVIC_GetPriorityGrouping+0x18>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	f003 0307 	and.w	r3, r3, #7
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	db0a      	blt.n	80012ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	490c      	ldr	r1, [pc, #48]	@ (80012dc <__NVIC_SetPriority+0x4c>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	0112      	lsls	r2, r2, #4
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	440b      	add	r3, r1
 80012b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b8:	e00a      	b.n	80012d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4908      	ldr	r1, [pc, #32]	@ (80012e0 <__NVIC_SetPriority+0x50>)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	3b04      	subs	r3, #4
 80012c8:	0112      	lsls	r2, r2, #4
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	440b      	add	r3, r1
 80012ce:	761a      	strb	r2, [r3, #24]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000e100 	.word	0xe000e100
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	@ 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f1c3 0307 	rsb	r3, r3, #7
 80012fe:	2b04      	cmp	r3, #4
 8001300:	bf28      	it	cs
 8001302:	2304      	movcs	r3, #4
 8001304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3304      	adds	r3, #4
 800130a:	2b06      	cmp	r3, #6
 800130c:	d902      	bls.n	8001314 <NVIC_EncodePriority+0x30>
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3b03      	subs	r3, #3
 8001312:	e000      	b.n	8001316 <NVIC_EncodePriority+0x32>
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	f04f 32ff 	mov.w	r2, #4294967295
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43da      	mvns	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	401a      	ands	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800132c:	f04f 31ff 	mov.w	r1, #4294967295
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa01 f303 	lsl.w	r3, r1, r3
 8001336:	43d9      	mvns	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	4313      	orrs	r3, r2
         );
}
 800133e:	4618      	mov	r0, r3
 8001340:	3724      	adds	r7, #36	@ 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800135c:	d301      	bcc.n	8001362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135e:	2301      	movs	r3, #1
 8001360:	e00f      	b.n	8001382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001362:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <SysTick_Config+0x40>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136a:	210f      	movs	r1, #15
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f7ff ff8e 	bl	8001290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001374:	4b05      	ldr	r3, [pc, #20]	@ (800138c <SysTick_Config+0x40>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137a:	4b04      	ldr	r3, [pc, #16]	@ (800138c <SysTick_Config+0x40>)
 800137c:	2207      	movs	r2, #7
 800137e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	e000e010 	.word	0xe000e010

08001390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff47 	bl	800122c <__NVIC_SetPriorityGrouping>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013b8:	f7ff ff5c 	bl	8001274 <__NVIC_GetPriorityGrouping>
 80013bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	6978      	ldr	r0, [r7, #20]
 80013c4:	f7ff ff8e 	bl	80012e4 <NVIC_EncodePriority>
 80013c8:	4602      	mov	r2, r0
 80013ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff5d 	bl	8001290 <__NVIC_SetPriority>
}
 80013d6:	bf00      	nop
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ffb0 	bl	800134c <SysTick_Config>
 80013ec:	4603      	mov	r3, r0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e054      	b.n	80014b4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	7f5b      	ldrb	r3, [r3, #29]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	d105      	bne.n	8001420 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff fd2c 	bl	8000e78 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2202      	movs	r2, #2
 8001424:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	791b      	ldrb	r3, [r3, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10c      	bne.n	8001448 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a22      	ldr	r2, [pc, #136]	@ (80014bc <HAL_CRC_Init+0xc4>)
 8001434:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0218 	bic.w	r2, r2, #24
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	e00c      	b.n	8001462 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6899      	ldr	r1, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	461a      	mov	r2, r3
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f942 	bl	80016dc <HAL_CRCEx_Polynomial_Set>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e028      	b.n	80014b4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	795b      	ldrb	r3, [r3, #5]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d105      	bne.n	8001476 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f04f 32ff 	mov.w	r2, #4294967295
 8001472:	611a      	str	r2, [r3, #16]
 8001474:	e004      	b.n	8001480 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6912      	ldr	r2, [r2, #16]
 800147e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695a      	ldr	r2, [r3, #20]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	699a      	ldr	r2, [r3, #24]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	04c11db7 	.word	0x04c11db7

080014c0 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2202      	movs	r2, #2
 80014d4:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d006      	beq.n	80014ec <HAL_CRC_Accumulate+0x2c>
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d829      	bhi.n	8001536 <HAL_CRC_Accumulate+0x76>
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d019      	beq.n	800151a <HAL_CRC_Accumulate+0x5a>
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d01e      	beq.n	8001528 <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 80014ea:	e024      	b.n	8001536 <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	e00a      	b.n	8001508 <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	441a      	add	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	d3f0      	bcc.n	80014f2 <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	613b      	str	r3, [r7, #16]
      break;
 8001518:	e00e      	b.n	8001538 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f000 f812 	bl	8001548 <CRC_Handle_8>
 8001524:	6138      	str	r0, [r7, #16]
      break;
 8001526:	e007      	b.n	8001538 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	68b9      	ldr	r1, [r7, #8]
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f000 f89b 	bl	8001668 <CRC_Handle_16>
 8001532:	6138      	str	r0, [r7, #16]
      break;
 8001534:	e000      	b.n	8001538 <HAL_CRC_Accumulate+0x78>
      break;
 8001536:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2201      	movs	r2, #1
 800153c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800153e:	693b      	ldr	r3, [r7, #16]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	@ 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	e023      	b.n	80015a2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	4413      	add	r3, r2
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	3301      	adds	r3, #1
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	440b      	add	r3, r1
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001574:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	3302      	adds	r3, #2
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	440b      	add	r3, r1
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001584:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	3303      	adds	r3, #3
 800158c:	68b9      	ldr	r1, [r7, #8]
 800158e:	440b      	add	r3, r1
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001598:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800159a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	3301      	adds	r3, #1
 80015a0:	61fb      	str	r3, [r7, #28]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	69fa      	ldr	r2, [r7, #28]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d3d6      	bcc.n	800155a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d04f      	beq.n	8001656 <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d107      	bne.n	80015d0 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	4413      	add	r3, r2
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d117      	bne.n	800160a <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	4413      	add	r3, r2
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	b21a      	sxth	r2, r3
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	3301      	adds	r3, #1
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	440b      	add	r3, r1
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	8b7a      	ldrh	r2, [r7, #26]
 8001608:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	2b03      	cmp	r3, #3
 8001612:	d120      	bne.n	8001656 <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	4413      	add	r3, r2
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	b21b      	sxth	r3, r3
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	b21a      	sxth	r2, r3
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	3301      	adds	r3, #1
 800162a:	68b9      	ldr	r1, [r7, #8]
 800162c:	440b      	add	r3, r1
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	b21b      	sxth	r3, r3
 8001632:	4313      	orrs	r3, r2
 8001634:	b21b      	sxth	r3, r3
 8001636:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	8b7a      	ldrh	r2, [r7, #26]
 8001642:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	3302      	adds	r3, #2
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	4413      	add	r3, r2
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3724      	adds	r7, #36	@ 0x24
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001668:	b480      	push	{r7}
 800166a:	b087      	sub	sp, #28
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	e013      	b.n	80016a2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	4413      	add	r3, r2
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	041a      	lsls	r2, r3, #16
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	3302      	adds	r3, #2
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	440b      	add	r3, r1
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	4619      	mov	r1, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	3301      	adds	r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	085b      	lsrs	r3, r3, #1
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d3e6      	bcc.n	800167a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d009      	beq.n	80016ca <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	4413      	add	r3, r2
 80016c4:	881a      	ldrh	r2, [r3, #0]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	371c      	adds	r7, #28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80016ec:	231f      	movs	r3, #31
 80016ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d102      	bne.n	8001700 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	75fb      	strb	r3, [r7, #23]
 80016fe:	e063      	b.n	80017c8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001700:	bf00      	nop
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1e5a      	subs	r2, r3, #1
 8001706:	613a      	str	r2, [r7, #16]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d009      	beq.n	8001720 <HAL_CRCEx_Polynomial_Set+0x44>
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	f003 031f 	and.w	r3, r3, #31
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	fa22 f303 	lsr.w	r3, r2, r3
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b18      	cmp	r3, #24
 8001724:	d846      	bhi.n	80017b4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001726:	a201      	add	r2, pc, #4	@ (adr r2, 800172c <HAL_CRCEx_Polynomial_Set+0x50>)
 8001728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172c:	080017bb 	.word	0x080017bb
 8001730:	080017b5 	.word	0x080017b5
 8001734:	080017b5 	.word	0x080017b5
 8001738:	080017b5 	.word	0x080017b5
 800173c:	080017b5 	.word	0x080017b5
 8001740:	080017b5 	.word	0x080017b5
 8001744:	080017b5 	.word	0x080017b5
 8001748:	080017b5 	.word	0x080017b5
 800174c:	080017a9 	.word	0x080017a9
 8001750:	080017b5 	.word	0x080017b5
 8001754:	080017b5 	.word	0x080017b5
 8001758:	080017b5 	.word	0x080017b5
 800175c:	080017b5 	.word	0x080017b5
 8001760:	080017b5 	.word	0x080017b5
 8001764:	080017b5 	.word	0x080017b5
 8001768:	080017b5 	.word	0x080017b5
 800176c:	0800179d 	.word	0x0800179d
 8001770:	080017b5 	.word	0x080017b5
 8001774:	080017b5 	.word	0x080017b5
 8001778:	080017b5 	.word	0x080017b5
 800177c:	080017b5 	.word	0x080017b5
 8001780:	080017b5 	.word	0x080017b5
 8001784:	080017b5 	.word	0x080017b5
 8001788:	080017b5 	.word	0x080017b5
 800178c:	08001791 	.word	0x08001791
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	2b06      	cmp	r3, #6
 8001794:	d913      	bls.n	80017be <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800179a:	e010      	b.n	80017be <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	2b07      	cmp	r3, #7
 80017a0:	d90f      	bls.n	80017c2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80017a6:	e00c      	b.n	80017c2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	2b0f      	cmp	r3, #15
 80017ac:	d90b      	bls.n	80017c6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80017b2:	e008      	b.n	80017c6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	75fb      	strb	r3, [r7, #23]
        break;
 80017b8:	e006      	b.n	80017c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80017ba:	bf00      	nop
 80017bc:	e004      	b.n	80017c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80017be:	bf00      	nop
 80017c0:	e002      	b.n	80017c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80017c2:	bf00      	nop
 80017c4:	e000      	b.n	80017c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80017c6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80017c8:	7dfb      	ldrb	r3, [r7, #23]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10d      	bne.n	80017ea <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f023 0118 	bic.w	r1, r3, #24
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80017ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	371c      	adds	r7, #28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b087      	sub	sp, #28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001806:	e166      	b.n	8001ad6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	2101      	movs	r1, #1
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	fa01 f303 	lsl.w	r3, r1, r3
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8158 	beq.w	8001ad0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	2b01      	cmp	r3, #1
 800182a:	d005      	beq.n	8001838 <HAL_GPIO_Init+0x40>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d130      	bne.n	800189a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	2203      	movs	r2, #3
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800186e:	2201      	movs	r2, #1
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	f003 0201 	and.w	r2, r3, #1
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d017      	beq.n	80018d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	2203      	movs	r2, #3
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d123      	bne.n	800192a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	08da      	lsrs	r2, r3, #3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3208      	adds	r2, #8
 80018ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	220f      	movs	r2, #15
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	691a      	ldr	r2, [r3, #16]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	08da      	lsrs	r2, r3, #3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3208      	adds	r2, #8
 8001924:	6939      	ldr	r1, [r7, #16]
 8001926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2203      	movs	r2, #3
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 0203 	and.w	r2, r3, #3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 80b2 	beq.w	8001ad0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196c:	4b61      	ldr	r3, [pc, #388]	@ (8001af4 <HAL_GPIO_Init+0x2fc>)
 800196e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001970:	4a60      	ldr	r2, [pc, #384]	@ (8001af4 <HAL_GPIO_Init+0x2fc>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6613      	str	r3, [r2, #96]	@ 0x60
 8001978:	4b5e      	ldr	r3, [pc, #376]	@ (8001af4 <HAL_GPIO_Init+0x2fc>)
 800197a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001984:	4a5c      	ldr	r2, [pc, #368]	@ (8001af8 <HAL_GPIO_Init+0x300>)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	089b      	lsrs	r3, r3, #2
 800198a:	3302      	adds	r3, #2
 800198c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	220f      	movs	r2, #15
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019ae:	d02b      	beq.n	8001a08 <HAL_GPIO_Init+0x210>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a52      	ldr	r2, [pc, #328]	@ (8001afc <HAL_GPIO_Init+0x304>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d025      	beq.n	8001a04 <HAL_GPIO_Init+0x20c>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a51      	ldr	r2, [pc, #324]	@ (8001b00 <HAL_GPIO_Init+0x308>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d01f      	beq.n	8001a00 <HAL_GPIO_Init+0x208>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a50      	ldr	r2, [pc, #320]	@ (8001b04 <HAL_GPIO_Init+0x30c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d019      	beq.n	80019fc <HAL_GPIO_Init+0x204>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a4f      	ldr	r2, [pc, #316]	@ (8001b08 <HAL_GPIO_Init+0x310>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d013      	beq.n	80019f8 <HAL_GPIO_Init+0x200>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a4e      	ldr	r2, [pc, #312]	@ (8001b0c <HAL_GPIO_Init+0x314>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d00d      	beq.n	80019f4 <HAL_GPIO_Init+0x1fc>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a4d      	ldr	r2, [pc, #308]	@ (8001b10 <HAL_GPIO_Init+0x318>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d007      	beq.n	80019f0 <HAL_GPIO_Init+0x1f8>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a4c      	ldr	r2, [pc, #304]	@ (8001b14 <HAL_GPIO_Init+0x31c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d101      	bne.n	80019ec <HAL_GPIO_Init+0x1f4>
 80019e8:	2307      	movs	r3, #7
 80019ea:	e00e      	b.n	8001a0a <HAL_GPIO_Init+0x212>
 80019ec:	2308      	movs	r3, #8
 80019ee:	e00c      	b.n	8001a0a <HAL_GPIO_Init+0x212>
 80019f0:	2306      	movs	r3, #6
 80019f2:	e00a      	b.n	8001a0a <HAL_GPIO_Init+0x212>
 80019f4:	2305      	movs	r3, #5
 80019f6:	e008      	b.n	8001a0a <HAL_GPIO_Init+0x212>
 80019f8:	2304      	movs	r3, #4
 80019fa:	e006      	b.n	8001a0a <HAL_GPIO_Init+0x212>
 80019fc:	2303      	movs	r3, #3
 80019fe:	e004      	b.n	8001a0a <HAL_GPIO_Init+0x212>
 8001a00:	2302      	movs	r3, #2
 8001a02:	e002      	b.n	8001a0a <HAL_GPIO_Init+0x212>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <HAL_GPIO_Init+0x212>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	f002 0203 	and.w	r2, r2, #3
 8001a10:	0092      	lsls	r2, r2, #2
 8001a12:	4093      	lsls	r3, r2
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a1a:	4937      	ldr	r1, [pc, #220]	@ (8001af8 <HAL_GPIO_Init+0x300>)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	089b      	lsrs	r3, r3, #2
 8001a20:	3302      	adds	r3, #2
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a28:	4b3b      	ldr	r3, [pc, #236]	@ (8001b18 <HAL_GPIO_Init+0x320>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a4c:	4a32      	ldr	r2, [pc, #200]	@ (8001b18 <HAL_GPIO_Init+0x320>)
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a52:	4b31      	ldr	r3, [pc, #196]	@ (8001b18 <HAL_GPIO_Init+0x320>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a76:	4a28      	ldr	r2, [pc, #160]	@ (8001b18 <HAL_GPIO_Init+0x320>)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a7c:	4b26      	ldr	r3, [pc, #152]	@ (8001b18 <HAL_GPIO_Init+0x320>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8001b18 <HAL_GPIO_Init+0x320>)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <HAL_GPIO_Init+0x320>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001aca:	4a13      	ldr	r2, [pc, #76]	@ (8001b18 <HAL_GPIO_Init+0x320>)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f47f ae91 	bne.w	8001808 <HAL_GPIO_Init+0x10>
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	bf00      	nop
 8001aea:	371c      	adds	r7, #28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40010000 	.word	0x40010000
 8001afc:	48000400 	.word	0x48000400
 8001b00:	48000800 	.word	0x48000800
 8001b04:	48000c00 	.word	0x48000c00
 8001b08:	48001000 	.word	0x48001000
 8001b0c:	48001400 	.word	0x48001400
 8001b10:	48001800 	.word	0x48001800
 8001b14:	48001c00 	.word	0x48001c00
 8001b18:	40010400 	.word	0x40010400

08001b1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691a      	ldr	r2, [r3, #16]
 8001b2c:	887b      	ldrh	r3, [r7, #2]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b34:	2301      	movs	r3, #1
 8001b36:	73fb      	strb	r3, [r7, #15]
 8001b38:	e001      	b.n	8001b3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	807b      	strh	r3, [r7, #2]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b5c:	787b      	ldrb	r3, [r7, #1]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b62:	887a      	ldrh	r2, [r7, #2]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b68:	e002      	b.n	8001b70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b6a:	887a      	ldrh	r2, [r7, #2]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b80:	4b04      	ldr	r3, [pc, #16]	@ (8001b94 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40007000 	.word	0x40007000

08001b98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ba6:	d130      	bne.n	8001c0a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ba8:	4b23      	ldr	r3, [pc, #140]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bb4:	d038      	beq.n	8001c28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bb6:	4b20      	ldr	r3, [pc, #128]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bc4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2232      	movs	r2, #50	@ 0x32
 8001bcc:	fb02 f303 	mul.w	r3, r2, r3
 8001bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd6:	0c9b      	lsrs	r3, r3, #18
 8001bd8:	3301      	adds	r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bdc:	e002      	b.n	8001be4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001be4:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bf0:	d102      	bne.n	8001bf8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f2      	bne.n	8001bde <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c04:	d110      	bne.n	8001c28 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e00f      	b.n	8001c2a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c16:	d007      	beq.n	8001c28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c18:	4b07      	ldr	r3, [pc, #28]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c20:	4a05      	ldr	r2, [pc, #20]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c26:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40007000 	.word	0x40007000
 8001c3c:	20000008 	.word	0x20000008
 8001c40:	431bde83 	.word	0x431bde83

08001c44 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001c48:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4a04      	ldr	r2, [pc, #16]	@ (8001c60 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001c4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c52:	6053      	str	r3, [r2, #4]
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40007000 	.word	0x40007000

08001c64 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	f000 bc08 	b.w	8002488 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c78:	4b96      	ldr	r3, [pc, #600]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c82:	4b94      	ldr	r3, [pc, #592]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80e4 	beq.w	8001e62 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d007      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x4c>
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2b0c      	cmp	r3, #12
 8001ca4:	f040 808b 	bne.w	8001dbe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	f040 8087 	bne.w	8001dbe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cb0:	4b88      	ldr	r3, [pc, #544]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x64>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e3df      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a1a      	ldr	r2, [r3, #32]
 8001ccc:	4b81      	ldr	r3, [pc, #516]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d004      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x7e>
 8001cd8:	4b7e      	ldr	r3, [pc, #504]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ce0:	e005      	b.n	8001cee <HAL_RCC_OscConfig+0x8a>
 8001ce2:	4b7c      	ldr	r3, [pc, #496]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ce8:	091b      	lsrs	r3, r3, #4
 8001cea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d223      	bcs.n	8001d3a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 fd92 	bl	8002820 <RCC_SetFlashLatencyFromMSIRange>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e3c0      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d06:	4b73      	ldr	r3, [pc, #460]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a72      	ldr	r2, [pc, #456]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	f043 0308 	orr.w	r3, r3, #8
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4b70      	ldr	r3, [pc, #448]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	496d      	ldr	r1, [pc, #436]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d24:	4b6b      	ldr	r3, [pc, #428]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	4968      	ldr	r1, [pc, #416]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
 8001d38:	e025      	b.n	8001d86 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d3a:	4b66      	ldr	r3, [pc, #408]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a65      	ldr	r2, [pc, #404]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d40:	f043 0308 	orr.w	r3, r3, #8
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	4b63      	ldr	r3, [pc, #396]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	4960      	ldr	r1, [pc, #384]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d58:	4b5e      	ldr	r3, [pc, #376]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	495b      	ldr	r1, [pc, #364]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d109      	bne.n	8001d86 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 fd52 	bl	8002820 <RCC_SetFlashLatencyFromMSIRange>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e380      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d86:	f000 fc87 	bl	8002698 <HAL_RCC_GetSysClockFreq>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	4b51      	ldr	r3, [pc, #324]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	4950      	ldr	r1, [pc, #320]	@ (8001ed8 <HAL_RCC_OscConfig+0x274>)
 8001d98:	5ccb      	ldrb	r3, [r1, r3]
 8001d9a:	f003 031f 	and.w	r3, r3, #31
 8001d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001da2:	4a4e      	ldr	r2, [pc, #312]	@ (8001edc <HAL_RCC_OscConfig+0x278>)
 8001da4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001da6:	4b4e      	ldr	r3, [pc, #312]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff f9e2 	bl	8001174 <HAL_InitTick>
 8001db0:	4603      	mov	r3, r0
 8001db2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d052      	beq.n	8001e60 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	e364      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d032      	beq.n	8001e2c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dc6:	4b43      	ldr	r3, [pc, #268]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a42      	ldr	r2, [pc, #264]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dd2:	f7ff fa1f 	bl	8001214 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dda:	f7ff fa1b 	bl	8001214 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e34d      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dec:	4b39      	ldr	r3, [pc, #228]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001df8:	4b36      	ldr	r3, [pc, #216]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a35      	ldr	r2, [pc, #212]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	f043 0308 	orr.w	r3, r3, #8
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	4b33      	ldr	r3, [pc, #204]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4930      	ldr	r1, [pc, #192]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e16:	4b2f      	ldr	r3, [pc, #188]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	492b      	ldr	r1, [pc, #172]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	604b      	str	r3, [r1, #4]
 8001e2a:	e01a      	b.n	8001e62 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e2c:	4b29      	ldr	r3, [pc, #164]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a28      	ldr	r2, [pc, #160]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001e32:	f023 0301 	bic.w	r3, r3, #1
 8001e36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e38:	f7ff f9ec 	bl	8001214 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e40:	f7ff f9e8 	bl	8001214 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e31a      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e52:	4b20      	ldr	r3, [pc, #128]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x1dc>
 8001e5e:	e000      	b.n	8001e62 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d073      	beq.n	8001f56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_OscConfig+0x21c>
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	d10e      	bne.n	8001e98 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	d10b      	bne.n	8001e98 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e80:	4b14      	ldr	r3, [pc, #80]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d063      	beq.n	8001f54 <HAL_RCC_OscConfig+0x2f0>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d15f      	bne.n	8001f54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e2f7      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea0:	d106      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x24c>
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a0b      	ldr	r2, [pc, #44]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	e025      	b.n	8001efc <HAL_RCC_OscConfig+0x298>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001eb8:	d114      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x280>
 8001eba:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a05      	ldr	r2, [pc, #20]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001ec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	4b03      	ldr	r3, [pc, #12]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a02      	ldr	r2, [pc, #8]	@ (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	e013      	b.n	8001efc <HAL_RCC_OscConfig+0x298>
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	08004b18 	.word	0x08004b18
 8001edc:	20000008 	.word	0x20000008
 8001ee0:	2000000c 	.word	0x2000000c
 8001ee4:	4ba0      	ldr	r3, [pc, #640]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a9f      	ldr	r2, [pc, #636]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 8001eea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	4b9d      	ldr	r3, [pc, #628]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a9c      	ldr	r2, [pc, #624]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 8001ef6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d013      	beq.n	8001f2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7ff f986 	bl	8001214 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7ff f982 	bl	8001214 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	@ 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e2b4      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f1e:	4b92      	ldr	r3, [pc, #584]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0x2a8>
 8001f2a:	e014      	b.n	8001f56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7ff f972 	bl	8001214 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f34:	f7ff f96e 	bl	8001214 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	@ 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e2a0      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f46:	4b88      	ldr	r3, [pc, #544]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x2d0>
 8001f52:	e000      	b.n	8001f56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d060      	beq.n	8002024 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_OscConfig+0x310>
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	2b0c      	cmp	r3, #12
 8001f6c:	d119      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d116      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f74:	4b7c      	ldr	r3, [pc, #496]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_OscConfig+0x328>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e27d      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8c:	4b76      	ldr	r3, [pc, #472]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	061b      	lsls	r3, r3, #24
 8001f9a:	4973      	ldr	r1, [pc, #460]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fa0:	e040      	b.n	8002024 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d023      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001faa:	4b6f      	ldr	r3, [pc, #444]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a6e      	ldr	r2, [pc, #440]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 8001fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb6:	f7ff f92d 	bl	8001214 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fbe:	f7ff f929 	bl	8001214 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e25b      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd0:	4b65      	ldr	r3, [pc, #404]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fdc:	4b62      	ldr	r3, [pc, #392]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	061b      	lsls	r3, r3, #24
 8001fea:	495f      	ldr	r1, [pc, #380]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]
 8001ff0:	e018      	b.n	8002024 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff2:	4b5d      	ldr	r3, [pc, #372]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a5c      	ldr	r2, [pc, #368]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 8001ff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffe:	f7ff f909 	bl	8001214 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002006:	f7ff f905 	bl	8001214 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e237      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002018:	4b53      	ldr	r3, [pc, #332]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f0      	bne.n	8002006 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b00      	cmp	r3, #0
 800202e:	d03c      	beq.n	80020aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d01c      	beq.n	8002072 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002038:	4b4b      	ldr	r3, [pc, #300]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 800203a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800203e:	4a4a      	ldr	r2, [pc, #296]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002048:	f7ff f8e4 	bl	8001214 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002050:	f7ff f8e0 	bl	8001214 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e212      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002062:	4b41      	ldr	r3, [pc, #260]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 8002064:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0ef      	beq.n	8002050 <HAL_RCC_OscConfig+0x3ec>
 8002070:	e01b      	b.n	80020aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002072:	4b3d      	ldr	r3, [pc, #244]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 8002074:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002078:	4a3b      	ldr	r2, [pc, #236]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 800207a:	f023 0301 	bic.w	r3, r3, #1
 800207e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002082:	f7ff f8c7 	bl	8001214 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800208a:	f7ff f8c3 	bl	8001214 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e1f5      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800209c:	4b32      	ldr	r3, [pc, #200]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 800209e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1ef      	bne.n	800208a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 80a6 	beq.w	8002204 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b8:	2300      	movs	r3, #0
 80020ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 80020be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10d      	bne.n	80020e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c8:	4b27      	ldr	r3, [pc, #156]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 80020ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020cc:	4a26      	ldr	r2, [pc, #152]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 80020ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80020d4:	4b24      	ldr	r3, [pc, #144]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 80020d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e0:	2301      	movs	r3, #1
 80020e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e4:	4b21      	ldr	r3, [pc, #132]	@ (800216c <HAL_RCC_OscConfig+0x508>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d118      	bne.n	8002122 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020f0:	4b1e      	ldr	r3, [pc, #120]	@ (800216c <HAL_RCC_OscConfig+0x508>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a1d      	ldr	r2, [pc, #116]	@ (800216c <HAL_RCC_OscConfig+0x508>)
 80020f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fc:	f7ff f88a 	bl	8001214 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002104:	f7ff f886 	bl	8001214 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e1b8      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002116:	4b15      	ldr	r3, [pc, #84]	@ (800216c <HAL_RCC_OscConfig+0x508>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f0      	beq.n	8002104 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d108      	bne.n	800213c <HAL_RCC_OscConfig+0x4d8>
 800212a:	4b0f      	ldr	r3, [pc, #60]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 800212c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002130:	4a0d      	ldr	r2, [pc, #52]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800213a:	e029      	b.n	8002190 <HAL_RCC_OscConfig+0x52c>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b05      	cmp	r3, #5
 8002142:	d115      	bne.n	8002170 <HAL_RCC_OscConfig+0x50c>
 8002144:	4b08      	ldr	r3, [pc, #32]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800214a:	4a07      	ldr	r2, [pc, #28]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 800214c:	f043 0304 	orr.w	r3, r3, #4
 8002150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002154:	4b04      	ldr	r3, [pc, #16]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 8002156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215a:	4a03      	ldr	r2, [pc, #12]	@ (8002168 <HAL_RCC_OscConfig+0x504>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002164:	e014      	b.n	8002190 <HAL_RCC_OscConfig+0x52c>
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
 800216c:	40007000 	.word	0x40007000
 8002170:	4b9d      	ldr	r3, [pc, #628]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 8002172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002176:	4a9c      	ldr	r2, [pc, #624]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 8002178:	f023 0301 	bic.w	r3, r3, #1
 800217c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002180:	4b99      	ldr	r3, [pc, #612]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002186:	4a98      	ldr	r2, [pc, #608]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 8002188:	f023 0304 	bic.w	r3, r3, #4
 800218c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d016      	beq.n	80021c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002198:	f7ff f83c 	bl	8001214 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800219e:	e00a      	b.n	80021b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a0:	f7ff f838 	bl	8001214 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e168      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b6:	4b8c      	ldr	r3, [pc, #560]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 80021b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0ed      	beq.n	80021a0 <HAL_RCC_OscConfig+0x53c>
 80021c4:	e015      	b.n	80021f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c6:	f7ff f825 	bl	8001214 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021cc:	e00a      	b.n	80021e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ce:	f7ff f821 	bl	8001214 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021dc:	4293      	cmp	r3, r2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e151      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021e4:	4b80      	ldr	r3, [pc, #512]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 80021e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1ed      	bne.n	80021ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021f2:	7ffb      	ldrb	r3, [r7, #31]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d105      	bne.n	8002204 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f8:	4b7b      	ldr	r3, [pc, #492]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 80021fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fc:	4a7a      	ldr	r2, [pc, #488]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 80021fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002202:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0320 	and.w	r3, r3, #32
 800220c:	2b00      	cmp	r3, #0
 800220e:	d03c      	beq.n	800228a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002214:	2b00      	cmp	r3, #0
 8002216:	d01c      	beq.n	8002252 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002218:	4b73      	ldr	r3, [pc, #460]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 800221a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800221e:	4a72      	ldr	r2, [pc, #456]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002228:	f7fe fff4 	bl	8001214 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002230:	f7fe fff0 	bl	8001214 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e122      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002242:	4b69      	ldr	r3, [pc, #420]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 8002244:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0ef      	beq.n	8002230 <HAL_RCC_OscConfig+0x5cc>
 8002250:	e01b      	b.n	800228a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002252:	4b65      	ldr	r3, [pc, #404]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 8002254:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002258:	4a63      	ldr	r2, [pc, #396]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002262:	f7fe ffd7 	bl	8001214 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800226a:	f7fe ffd3 	bl	8001214 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e105      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800227c:	4b5a      	ldr	r3, [pc, #360]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 800227e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1ef      	bne.n	800226a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 80f9 	beq.w	8002486 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002298:	2b02      	cmp	r3, #2
 800229a:	f040 80cf 	bne.w	800243c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800229e:	4b52      	ldr	r3, [pc, #328]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f003 0203 	and.w	r2, r3, #3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d12c      	bne.n	800230c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022bc:	3b01      	subs	r3, #1
 80022be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d123      	bne.n	800230c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d11b      	bne.n	800230c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d113      	bne.n	800230c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ee:	085b      	lsrs	r3, r3, #1
 80022f0:	3b01      	subs	r3, #1
 80022f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d109      	bne.n	800230c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	085b      	lsrs	r3, r3, #1
 8002304:	3b01      	subs	r3, #1
 8002306:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002308:	429a      	cmp	r2, r3
 800230a:	d071      	beq.n	80023f0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	2b0c      	cmp	r3, #12
 8002310:	d068      	beq.n	80023e4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002312:	4b35      	ldr	r3, [pc, #212]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d105      	bne.n	800232a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800231e:	4b32      	ldr	r3, [pc, #200]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e0ac      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800232e:	4b2e      	ldr	r3, [pc, #184]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a2d      	ldr	r2, [pc, #180]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 8002334:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002338:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800233a:	f7fe ff6b 	bl	8001214 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002342:	f7fe ff67 	bl	8001214 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e099      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002354:	4b24      	ldr	r3, [pc, #144]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f0      	bne.n	8002342 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002360:	4b21      	ldr	r3, [pc, #132]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	4b21      	ldr	r3, [pc, #132]	@ (80023ec <HAL_RCC_OscConfig+0x788>)
 8002366:	4013      	ands	r3, r2
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002370:	3a01      	subs	r2, #1
 8002372:	0112      	lsls	r2, r2, #4
 8002374:	4311      	orrs	r1, r2
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800237a:	0212      	lsls	r2, r2, #8
 800237c:	4311      	orrs	r1, r2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002382:	0852      	lsrs	r2, r2, #1
 8002384:	3a01      	subs	r2, #1
 8002386:	0552      	lsls	r2, r2, #21
 8002388:	4311      	orrs	r1, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800238e:	0852      	lsrs	r2, r2, #1
 8002390:	3a01      	subs	r2, #1
 8002392:	0652      	lsls	r2, r2, #25
 8002394:	4311      	orrs	r1, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800239a:	06d2      	lsls	r2, r2, #27
 800239c:	430a      	orrs	r2, r1
 800239e:	4912      	ldr	r1, [pc, #72]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023a4:	4b10      	ldr	r3, [pc, #64]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0f      	ldr	r2, [pc, #60]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 80023aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023b0:	4b0d      	ldr	r3, [pc, #52]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4a0c      	ldr	r2, [pc, #48]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 80023b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023bc:	f7fe ff2a 	bl	8001214 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c4:	f7fe ff26 	bl	8001214 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e058      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d6:	4b04      	ldr	r3, [pc, #16]	@ (80023e8 <HAL_RCC_OscConfig+0x784>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f0      	beq.n	80023c4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023e2:	e050      	b.n	8002486 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e04f      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
 80023e8:	40021000 	.word	0x40021000
 80023ec:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023f0:	4b27      	ldr	r3, [pc, #156]	@ (8002490 <HAL_RCC_OscConfig+0x82c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d144      	bne.n	8002486 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023fc:	4b24      	ldr	r3, [pc, #144]	@ (8002490 <HAL_RCC_OscConfig+0x82c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a23      	ldr	r2, [pc, #140]	@ (8002490 <HAL_RCC_OscConfig+0x82c>)
 8002402:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002406:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002408:	4b21      	ldr	r3, [pc, #132]	@ (8002490 <HAL_RCC_OscConfig+0x82c>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4a20      	ldr	r2, [pc, #128]	@ (8002490 <HAL_RCC_OscConfig+0x82c>)
 800240e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002412:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002414:	f7fe fefe 	bl	8001214 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241c:	f7fe fefa 	bl	8001214 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e02c      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242e:	4b18      	ldr	r3, [pc, #96]	@ (8002490 <HAL_RCC_OscConfig+0x82c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x7b8>
 800243a:	e024      	b.n	8002486 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	2b0c      	cmp	r3, #12
 8002440:	d01f      	beq.n	8002482 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002442:	4b13      	ldr	r3, [pc, #76]	@ (8002490 <HAL_RCC_OscConfig+0x82c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a12      	ldr	r2, [pc, #72]	@ (8002490 <HAL_RCC_OscConfig+0x82c>)
 8002448:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800244c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244e:	f7fe fee1 	bl	8001214 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002456:	f7fe fedd 	bl	8001214 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e00f      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002468:	4b09      	ldr	r3, [pc, #36]	@ (8002490 <HAL_RCC_OscConfig+0x82c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f0      	bne.n	8002456 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002474:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <HAL_RCC_OscConfig+0x82c>)
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	4905      	ldr	r1, [pc, #20]	@ (8002490 <HAL_RCC_OscConfig+0x82c>)
 800247a:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <HAL_RCC_OscConfig+0x830>)
 800247c:	4013      	ands	r3, r2
 800247e:	60cb      	str	r3, [r1, #12]
 8002480:	e001      	b.n	8002486 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3720      	adds	r7, #32
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40021000 	.word	0x40021000
 8002494:	feeefffc 	.word	0xfeeefffc

08002498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0e7      	b.n	800267c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024ac:	4b75      	ldr	r3, [pc, #468]	@ (8002684 <HAL_RCC_ClockConfig+0x1ec>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d910      	bls.n	80024dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ba:	4b72      	ldr	r3, [pc, #456]	@ (8002684 <HAL_RCC_ClockConfig+0x1ec>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f023 0207 	bic.w	r2, r3, #7
 80024c2:	4970      	ldr	r1, [pc, #448]	@ (8002684 <HAL_RCC_ClockConfig+0x1ec>)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ca:	4b6e      	ldr	r3, [pc, #440]	@ (8002684 <HAL_RCC_ClockConfig+0x1ec>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d001      	beq.n	80024dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0cf      	b.n	800267c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d010      	beq.n	800250a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	4b66      	ldr	r3, [pc, #408]	@ (8002688 <HAL_RCC_ClockConfig+0x1f0>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d908      	bls.n	800250a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f8:	4b63      	ldr	r3, [pc, #396]	@ (8002688 <HAL_RCC_ClockConfig+0x1f0>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4960      	ldr	r1, [pc, #384]	@ (8002688 <HAL_RCC_ClockConfig+0x1f0>)
 8002506:	4313      	orrs	r3, r2
 8002508:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d04c      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b03      	cmp	r3, #3
 800251c:	d107      	bne.n	800252e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800251e:	4b5a      	ldr	r3, [pc, #360]	@ (8002688 <HAL_RCC_ClockConfig+0x1f0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d121      	bne.n	800256e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e0a6      	b.n	800267c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d107      	bne.n	8002546 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002536:	4b54      	ldr	r3, [pc, #336]	@ (8002688 <HAL_RCC_ClockConfig+0x1f0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d115      	bne.n	800256e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e09a      	b.n	800267c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d107      	bne.n	800255e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800254e:	4b4e      	ldr	r3, [pc, #312]	@ (8002688 <HAL_RCC_ClockConfig+0x1f0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d109      	bne.n	800256e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e08e      	b.n	800267c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800255e:	4b4a      	ldr	r3, [pc, #296]	@ (8002688 <HAL_RCC_ClockConfig+0x1f0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e086      	b.n	800267c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800256e:	4b46      	ldr	r3, [pc, #280]	@ (8002688 <HAL_RCC_ClockConfig+0x1f0>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f023 0203 	bic.w	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4943      	ldr	r1, [pc, #268]	@ (8002688 <HAL_RCC_ClockConfig+0x1f0>)
 800257c:	4313      	orrs	r3, r2
 800257e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002580:	f7fe fe48 	bl	8001214 <HAL_GetTick>
 8002584:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	e00a      	b.n	800259e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002588:	f7fe fe44 	bl	8001214 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e06e      	b.n	800267c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259e:	4b3a      	ldr	r3, [pc, #232]	@ (8002688 <HAL_RCC_ClockConfig+0x1f0>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 020c 	and.w	r2, r3, #12
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d1eb      	bne.n	8002588 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d010      	beq.n	80025de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	4b31      	ldr	r3, [pc, #196]	@ (8002688 <HAL_RCC_ClockConfig+0x1f0>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d208      	bcs.n	80025de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002688 <HAL_RCC_ClockConfig+0x1f0>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	492b      	ldr	r1, [pc, #172]	@ (8002688 <HAL_RCC_ClockConfig+0x1f0>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025de:	4b29      	ldr	r3, [pc, #164]	@ (8002684 <HAL_RCC_ClockConfig+0x1ec>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d210      	bcs.n	800260e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ec:	4b25      	ldr	r3, [pc, #148]	@ (8002684 <HAL_RCC_ClockConfig+0x1ec>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f023 0207 	bic.w	r2, r3, #7
 80025f4:	4923      	ldr	r1, [pc, #140]	@ (8002684 <HAL_RCC_ClockConfig+0x1ec>)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fc:	4b21      	ldr	r3, [pc, #132]	@ (8002684 <HAL_RCC_ClockConfig+0x1ec>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d001      	beq.n	800260e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e036      	b.n	800267c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b00      	cmp	r3, #0
 8002618:	d008      	beq.n	800262c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800261a:	4b1b      	ldr	r3, [pc, #108]	@ (8002688 <HAL_RCC_ClockConfig+0x1f0>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	4918      	ldr	r1, [pc, #96]	@ (8002688 <HAL_RCC_ClockConfig+0x1f0>)
 8002628:	4313      	orrs	r3, r2
 800262a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b00      	cmp	r3, #0
 8002636:	d009      	beq.n	800264c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002638:	4b13      	ldr	r3, [pc, #76]	@ (8002688 <HAL_RCC_ClockConfig+0x1f0>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4910      	ldr	r1, [pc, #64]	@ (8002688 <HAL_RCC_ClockConfig+0x1f0>)
 8002648:	4313      	orrs	r3, r2
 800264a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800264c:	f000 f824 	bl	8002698 <HAL_RCC_GetSysClockFreq>
 8002650:	4602      	mov	r2, r0
 8002652:	4b0d      	ldr	r3, [pc, #52]	@ (8002688 <HAL_RCC_ClockConfig+0x1f0>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	091b      	lsrs	r3, r3, #4
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	490b      	ldr	r1, [pc, #44]	@ (800268c <HAL_RCC_ClockConfig+0x1f4>)
 800265e:	5ccb      	ldrb	r3, [r1, r3]
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	fa22 f303 	lsr.w	r3, r2, r3
 8002668:	4a09      	ldr	r2, [pc, #36]	@ (8002690 <HAL_RCC_ClockConfig+0x1f8>)
 800266a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800266c:	4b09      	ldr	r3, [pc, #36]	@ (8002694 <HAL_RCC_ClockConfig+0x1fc>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7fe fd7f 	bl	8001174 <HAL_InitTick>
 8002676:	4603      	mov	r3, r0
 8002678:	72fb      	strb	r3, [r7, #11]

  return status;
 800267a:	7afb      	ldrb	r3, [r7, #11]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40022000 	.word	0x40022000
 8002688:	40021000 	.word	0x40021000
 800268c:	08004b18 	.word	0x08004b18
 8002690:	20000008 	.word	0x20000008
 8002694:	2000000c 	.word	0x2000000c

08002698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002698:	b480      	push	{r7}
 800269a:	b089      	sub	sp, #36	@ 0x24
 800269c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
 80026a2:	2300      	movs	r3, #0
 80026a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a6:	4b3e      	ldr	r3, [pc, #248]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026b0:	4b3b      	ldr	r3, [pc, #236]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_RCC_GetSysClockFreq+0x34>
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	2b0c      	cmp	r3, #12
 80026c4:	d121      	bne.n	800270a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d11e      	bne.n	800270a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026cc:	4b34      	ldr	r3, [pc, #208]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d107      	bne.n	80026e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026d8:	4b31      	ldr	r3, [pc, #196]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026de:	0a1b      	lsrs	r3, r3, #8
 80026e0:	f003 030f 	and.w	r3, r3, #15
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	e005      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026e8:	4b2d      	ldr	r3, [pc, #180]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026f4:	4a2b      	ldr	r2, [pc, #172]	@ (80027a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10d      	bne.n	8002720 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002708:	e00a      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	2b04      	cmp	r3, #4
 800270e:	d102      	bne.n	8002716 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002710:	4b25      	ldr	r3, [pc, #148]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002712:	61bb      	str	r3, [r7, #24]
 8002714:	e004      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	2b08      	cmp	r3, #8
 800271a:	d101      	bne.n	8002720 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800271c:	4b23      	ldr	r3, [pc, #140]	@ (80027ac <HAL_RCC_GetSysClockFreq+0x114>)
 800271e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	2b0c      	cmp	r3, #12
 8002724:	d134      	bne.n	8002790 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002726:	4b1e      	ldr	r3, [pc, #120]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d003      	beq.n	800273e <HAL_RCC_GetSysClockFreq+0xa6>
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d003      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0xac>
 800273c:	e005      	b.n	800274a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800273e:	4b1a      	ldr	r3, [pc, #104]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002740:	617b      	str	r3, [r7, #20]
      break;
 8002742:	e005      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002744:	4b19      	ldr	r3, [pc, #100]	@ (80027ac <HAL_RCC_GetSysClockFreq+0x114>)
 8002746:	617b      	str	r3, [r7, #20]
      break;
 8002748:	e002      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	617b      	str	r3, [r7, #20]
      break;
 800274e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002750:	4b13      	ldr	r3, [pc, #76]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	3301      	adds	r3, #1
 800275c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800275e:	4b10      	ldr	r3, [pc, #64]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	0a1b      	lsrs	r3, r3, #8
 8002764:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	fb03 f202 	mul.w	r2, r3, r2
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	fbb2 f3f3 	udiv	r3, r2, r3
 8002774:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002776:	4b0a      	ldr	r3, [pc, #40]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	0e5b      	lsrs	r3, r3, #25
 800277c:	f003 0303 	and.w	r3, r3, #3
 8002780:	3301      	adds	r3, #1
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	fbb2 f3f3 	udiv	r3, r2, r3
 800278e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002790:	69bb      	ldr	r3, [r7, #24]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3724      	adds	r7, #36	@ 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000
 80027a4:	08004b30 	.word	0x08004b30
 80027a8:	00f42400 	.word	0x00f42400
 80027ac:	007a1200 	.word	0x007a1200

080027b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b4:	4b03      	ldr	r3, [pc, #12]	@ (80027c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027b6:	681b      	ldr	r3, [r3, #0]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	20000008 	.word	0x20000008

080027c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027cc:	f7ff fff0 	bl	80027b0 <HAL_RCC_GetHCLKFreq>
 80027d0:	4602      	mov	r2, r0
 80027d2:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	0a1b      	lsrs	r3, r3, #8
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	4904      	ldr	r1, [pc, #16]	@ (80027f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027de:	5ccb      	ldrb	r3, [r1, r3]
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40021000 	.word	0x40021000
 80027f0:	08004b28 	.word	0x08004b28

080027f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027f8:	f7ff ffda 	bl	80027b0 <HAL_RCC_GetHCLKFreq>
 80027fc:	4602      	mov	r2, r0
 80027fe:	4b06      	ldr	r3, [pc, #24]	@ (8002818 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	0adb      	lsrs	r3, r3, #11
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	4904      	ldr	r1, [pc, #16]	@ (800281c <HAL_RCC_GetPCLK2Freq+0x28>)
 800280a:	5ccb      	ldrb	r3, [r1, r3]
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002814:	4618      	mov	r0, r3
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40021000 	.word	0x40021000
 800281c:	08004b28 	.word	0x08004b28

08002820 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002828:	2300      	movs	r3, #0
 800282a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800282c:	4b2a      	ldr	r3, [pc, #168]	@ (80028d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800282e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002838:	f7ff f9a0 	bl	8001b7c <HAL_PWREx_GetVoltageRange>
 800283c:	6178      	str	r0, [r7, #20]
 800283e:	e014      	b.n	800286a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002840:	4b25      	ldr	r3, [pc, #148]	@ (80028d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002844:	4a24      	ldr	r2, [pc, #144]	@ (80028d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002846:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800284a:	6593      	str	r3, [r2, #88]	@ 0x58
 800284c:	4b22      	ldr	r3, [pc, #136]	@ (80028d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800284e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002850:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002858:	f7ff f990 	bl	8001b7c <HAL_PWREx_GetVoltageRange>
 800285c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800285e:	4b1e      	ldr	r3, [pc, #120]	@ (80028d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002862:	4a1d      	ldr	r2, [pc, #116]	@ (80028d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002864:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002868:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002870:	d10b      	bne.n	800288a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b80      	cmp	r3, #128	@ 0x80
 8002876:	d919      	bls.n	80028ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2ba0      	cmp	r3, #160	@ 0xa0
 800287c:	d902      	bls.n	8002884 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800287e:	2302      	movs	r3, #2
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	e013      	b.n	80028ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002884:	2301      	movs	r3, #1
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	e010      	b.n	80028ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b80      	cmp	r3, #128	@ 0x80
 800288e:	d902      	bls.n	8002896 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002890:	2303      	movs	r3, #3
 8002892:	613b      	str	r3, [r7, #16]
 8002894:	e00a      	b.n	80028ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b80      	cmp	r3, #128	@ 0x80
 800289a:	d102      	bne.n	80028a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800289c:	2302      	movs	r3, #2
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	e004      	b.n	80028ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b70      	cmp	r3, #112	@ 0x70
 80028a6:	d101      	bne.n	80028ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028a8:	2301      	movs	r3, #1
 80028aa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028ac:	4b0b      	ldr	r3, [pc, #44]	@ (80028dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f023 0207 	bic.w	r2, r3, #7
 80028b4:	4909      	ldr	r1, [pc, #36]	@ (80028dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028bc:	4b07      	ldr	r3, [pc, #28]	@ (80028dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d001      	beq.n	80028ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40022000 	.word	0x40022000

080028e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028e8:	2300      	movs	r3, #0
 80028ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028ec:	2300      	movs	r3, #0
 80028ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d041      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002900:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002904:	d02a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002906:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800290a:	d824      	bhi.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800290c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002910:	d008      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002912:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002916:	d81e      	bhi.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00a      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800291c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002920:	d010      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002922:	e018      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002924:	4b86      	ldr	r3, [pc, #536]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4a85      	ldr	r2, [pc, #532]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800292e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002930:	e015      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3304      	adds	r3, #4
 8002936:	2100      	movs	r1, #0
 8002938:	4618      	mov	r0, r3
 800293a:	f000 facd 	bl	8002ed8 <RCCEx_PLLSAI1_Config>
 800293e:	4603      	mov	r3, r0
 8002940:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002942:	e00c      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3320      	adds	r3, #32
 8002948:	2100      	movs	r1, #0
 800294a:	4618      	mov	r0, r3
 800294c:	f000 fbb6 	bl	80030bc <RCCEx_PLLSAI2_Config>
 8002950:	4603      	mov	r3, r0
 8002952:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002954:	e003      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	74fb      	strb	r3, [r7, #19]
      break;
 800295a:	e000      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800295c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800295e:	7cfb      	ldrb	r3, [r7, #19]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10b      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002964:	4b76      	ldr	r3, [pc, #472]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002972:	4973      	ldr	r1, [pc, #460]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800297a:	e001      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800297c:	7cfb      	ldrb	r3, [r7, #19]
 800297e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d041      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002990:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002994:	d02a      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002996:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800299a:	d824      	bhi.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800299c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80029a0:	d008      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80029a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80029a6:	d81e      	bhi.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80029ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029b0:	d010      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029b2:	e018      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029b4:	4b62      	ldr	r3, [pc, #392]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4a61      	ldr	r2, [pc, #388]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029c0:	e015      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3304      	adds	r3, #4
 80029c6:	2100      	movs	r1, #0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 fa85 	bl	8002ed8 <RCCEx_PLLSAI1_Config>
 80029ce:	4603      	mov	r3, r0
 80029d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029d2:	e00c      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3320      	adds	r3, #32
 80029d8:	2100      	movs	r1, #0
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 fb6e 	bl	80030bc <RCCEx_PLLSAI2_Config>
 80029e0:	4603      	mov	r3, r0
 80029e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029e4:	e003      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	74fb      	strb	r3, [r7, #19]
      break;
 80029ea:	e000      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80029ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ee:	7cfb      	ldrb	r3, [r7, #19]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10b      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029f4:	4b52      	ldr	r3, [pc, #328]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029fa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a02:	494f      	ldr	r1, [pc, #316]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002a0a:	e001      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a0c:	7cfb      	ldrb	r3, [r7, #19]
 8002a0e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80a0 	beq.w	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a22:	4b47      	ldr	r3, [pc, #284]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002a32:	2300      	movs	r3, #0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00d      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a38:	4b41      	ldr	r3, [pc, #260]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3c:	4a40      	ldr	r2, [pc, #256]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a42:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a44:	4b3e      	ldr	r3, [pc, #248]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a50:	2301      	movs	r3, #1
 8002a52:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a54:	4b3b      	ldr	r3, [pc, #236]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a3a      	ldr	r2, [pc, #232]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a60:	f7fe fbd8 	bl	8001214 <HAL_GetTick>
 8002a64:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a66:	e009      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a68:	f7fe fbd4 	bl	8001214 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d902      	bls.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	74fb      	strb	r3, [r7, #19]
        break;
 8002a7a:	e005      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a7c:	4b31      	ldr	r3, [pc, #196]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0ef      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a88:	7cfb      	ldrb	r3, [r7, #19]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d15c      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a8e:	4b2c      	ldr	r3, [pc, #176]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a98:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d01f      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d019      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002aac:	4b24      	ldr	r3, [pc, #144]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ab6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ab8:	4b21      	ldr	r3, [pc, #132]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002abe:	4a20      	ldr	r2, [pc, #128]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ace:	4a1c      	ldr	r2, [pc, #112]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ad4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ad8:	4a19      	ldr	r2, [pc, #100]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d016      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aea:	f7fe fb93 	bl	8001214 <HAL_GetTick>
 8002aee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002af0:	e00b      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af2:	f7fe fb8f 	bl	8001214 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d902      	bls.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	74fb      	strb	r3, [r7, #19]
            break;
 8002b08:	e006      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0ec      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002b18:	7cfb      	ldrb	r3, [r7, #19]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10c      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b1e:	4b08      	ldr	r3, [pc, #32]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b2e:	4904      	ldr	r1, [pc, #16]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b36:	e009      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b38:	7cfb      	ldrb	r3, [r7, #19]
 8002b3a:	74bb      	strb	r3, [r7, #18]
 8002b3c:	e006      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002b3e:	bf00      	nop
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b48:	7cfb      	ldrb	r3, [r7, #19]
 8002b4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b4c:	7c7b      	ldrb	r3, [r7, #17]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d105      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b52:	4ba6      	ldr	r3, [pc, #664]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b56:	4aa5      	ldr	r2, [pc, #660]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b5c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b6a:	4ba0      	ldr	r3, [pc, #640]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b70:	f023 0203 	bic.w	r2, r3, #3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b78:	499c      	ldr	r1, [pc, #624]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b8c:	4b97      	ldr	r3, [pc, #604]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b92:	f023 020c 	bic.w	r2, r3, #12
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b9a:	4994      	ldr	r1, [pc, #592]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bae:	4b8f      	ldr	r3, [pc, #572]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbc:	498b      	ldr	r1, [pc, #556]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bd0:	4b86      	ldr	r3, [pc, #536]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bde:	4983      	ldr	r1, [pc, #524]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bf2:	4b7e      	ldr	r3, [pc, #504]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c00:	497a      	ldr	r1, [pc, #488]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0320 	and.w	r3, r3, #32
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c14:	4b75      	ldr	r3, [pc, #468]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c1a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c22:	4972      	ldr	r1, [pc, #456]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c36:	4b6d      	ldr	r3, [pc, #436]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c44:	4969      	ldr	r1, [pc, #420]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00a      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c58:	4b64      	ldr	r3, [pc, #400]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c66:	4961      	ldr	r1, [pc, #388]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c7a:	4b5c      	ldr	r3, [pc, #368]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c80:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c88:	4958      	ldr	r1, [pc, #352]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00a      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c9c:	4b53      	ldr	r3, [pc, #332]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002caa:	4950      	ldr	r1, [pc, #320]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00a      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cbe:	4b4b      	ldr	r3, [pc, #300]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ccc:	4947      	ldr	r1, [pc, #284]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00a      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ce0:	4b42      	ldr	r3, [pc, #264]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ce2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ce6:	f023 0203 	bic.w	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cee:	493f      	ldr	r1, [pc, #252]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d028      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d02:	4b3a      	ldr	r3, [pc, #232]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d08:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d10:	4936      	ldr	r1, [pc, #216]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d20:	d106      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d22:	4b32      	ldr	r3, [pc, #200]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	4a31      	ldr	r2, [pc, #196]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d2c:	60d3      	str	r3, [r2, #12]
 8002d2e:	e011      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	2101      	movs	r1, #1
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 f8c9 	bl	8002ed8 <RCCEx_PLLSAI1_Config>
 8002d46:	4603      	mov	r3, r0
 8002d48:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d4a:	7cfb      	ldrb	r3, [r7, #19]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002d50:	7cfb      	ldrb	r3, [r7, #19]
 8002d52:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d028      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d60:	4b22      	ldr	r3, [pc, #136]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d6e:	491f      	ldr	r1, [pc, #124]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d7e:	d106      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d80:	4b1a      	ldr	r3, [pc, #104]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	4a19      	ldr	r2, [pc, #100]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d8a:	60d3      	str	r3, [r2, #12]
 8002d8c:	e011      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d96:	d10c      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f89a 	bl	8002ed8 <RCCEx_PLLSAI1_Config>
 8002da4:	4603      	mov	r3, r0
 8002da6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002da8:	7cfb      	ldrb	r3, [r7, #19]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002dae:	7cfb      	ldrb	r3, [r7, #19]
 8002db0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d02a      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dcc:	4907      	ldr	r1, [pc, #28]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ddc:	d108      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dde:	4b03      	ldr	r3, [pc, #12]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	4a02      	ldr	r2, [pc, #8]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002de4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002de8:	60d3      	str	r3, [r2, #12]
 8002dea:	e013      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002dec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002df4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002df8:	d10c      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	2101      	movs	r1, #1
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 f869 	bl	8002ed8 <RCCEx_PLLSAI1_Config>
 8002e06:	4603      	mov	r3, r0
 8002e08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e0a:	7cfb      	ldrb	r3, [r7, #19]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002e10:	7cfb      	ldrb	r3, [r7, #19]
 8002e12:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d02f      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e20:	4b2c      	ldr	r3, [pc, #176]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e26:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e2e:	4929      	ldr	r1, [pc, #164]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e3e:	d10d      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3304      	adds	r3, #4
 8002e44:	2102      	movs	r1, #2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 f846 	bl	8002ed8 <RCCEx_PLLSAI1_Config>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e50:	7cfb      	ldrb	r3, [r7, #19]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d014      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002e56:	7cfb      	ldrb	r3, [r7, #19]
 8002e58:	74bb      	strb	r3, [r7, #18]
 8002e5a:	e011      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e64:	d10c      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3320      	adds	r3, #32
 8002e6a:	2102      	movs	r1, #2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 f925 	bl	80030bc <RCCEx_PLLSAI2_Config>
 8002e72:	4603      	mov	r3, r0
 8002e74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e76:	7cfb      	ldrb	r3, [r7, #19]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002e7c:	7cfb      	ldrb	r3, [r7, #19]
 8002e7e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00b      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e8c:	4b11      	ldr	r3, [pc, #68]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e92:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e9c:	490d      	ldr	r1, [pc, #52]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00b      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002eb0:	4b08      	ldr	r3, [pc, #32]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ec0:	4904      	ldr	r1, [pc, #16]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ec8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40021000 	.word	0x40021000

08002ed8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ee6:	4b74      	ldr	r3, [pc, #464]	@ (80030b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d018      	beq.n	8002f24 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ef2:	4b71      	ldr	r3, [pc, #452]	@ (80030b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f003 0203 	and.w	r2, r3, #3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d10d      	bne.n	8002f1e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
       ||
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d009      	beq.n	8002f1e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f0a:	4b6b      	ldr	r3, [pc, #428]	@ (80030b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	091b      	lsrs	r3, r3, #4
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
       ||
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d047      	beq.n	8002fae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	73fb      	strb	r3, [r7, #15]
 8002f22:	e044      	b.n	8002fae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d018      	beq.n	8002f5e <RCCEx_PLLSAI1_Config+0x86>
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d825      	bhi.n	8002f7c <RCCEx_PLLSAI1_Config+0xa4>
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d002      	beq.n	8002f3a <RCCEx_PLLSAI1_Config+0x62>
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d009      	beq.n	8002f4c <RCCEx_PLLSAI1_Config+0x74>
 8002f38:	e020      	b.n	8002f7c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f3a:	4b5f      	ldr	r3, [pc, #380]	@ (80030b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d11d      	bne.n	8002f82 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f4a:	e01a      	b.n	8002f82 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f4c:	4b5a      	ldr	r3, [pc, #360]	@ (80030b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d116      	bne.n	8002f86 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f5c:	e013      	b.n	8002f86 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f5e:	4b56      	ldr	r3, [pc, #344]	@ (80030b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10f      	bne.n	8002f8a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f6a:	4b53      	ldr	r3, [pc, #332]	@ (80030b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d109      	bne.n	8002f8a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f7a:	e006      	b.n	8002f8a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f80:	e004      	b.n	8002f8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f82:	bf00      	nop
 8002f84:	e002      	b.n	8002f8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f86:	bf00      	nop
 8002f88:	e000      	b.n	8002f8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10d      	bne.n	8002fae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f92:	4b49      	ldr	r3, [pc, #292]	@ (80030b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6819      	ldr	r1, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	430b      	orrs	r3, r1
 8002fa8:	4943      	ldr	r1, [pc, #268]	@ (80030b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d17c      	bne.n	80030ae <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fb4:	4b40      	ldr	r3, [pc, #256]	@ (80030b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a3f      	ldr	r2, [pc, #252]	@ (80030b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002fbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fc0:	f7fe f928 	bl	8001214 <HAL_GetTick>
 8002fc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fc6:	e009      	b.n	8002fdc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fc8:	f7fe f924 	bl	8001214 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d902      	bls.n	8002fdc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	73fb      	strb	r3, [r7, #15]
        break;
 8002fda:	e005      	b.n	8002fe8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fdc:	4b36      	ldr	r3, [pc, #216]	@ (80030b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1ef      	bne.n	8002fc8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d15f      	bne.n	80030ae <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d110      	bne.n	8003016 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ff4:	4b30      	ldr	r3, [pc, #192]	@ (80030b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002ffc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6892      	ldr	r2, [r2, #8]
 8003004:	0211      	lsls	r1, r2, #8
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68d2      	ldr	r2, [r2, #12]
 800300a:	06d2      	lsls	r2, r2, #27
 800300c:	430a      	orrs	r2, r1
 800300e:	492a      	ldr	r1, [pc, #168]	@ (80030b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003010:	4313      	orrs	r3, r2
 8003012:	610b      	str	r3, [r1, #16]
 8003014:	e027      	b.n	8003066 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d112      	bne.n	8003042 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800301c:	4b26      	ldr	r3, [pc, #152]	@ (80030b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003024:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6892      	ldr	r2, [r2, #8]
 800302c:	0211      	lsls	r1, r2, #8
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6912      	ldr	r2, [r2, #16]
 8003032:	0852      	lsrs	r2, r2, #1
 8003034:	3a01      	subs	r2, #1
 8003036:	0552      	lsls	r2, r2, #21
 8003038:	430a      	orrs	r2, r1
 800303a:	491f      	ldr	r1, [pc, #124]	@ (80030b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800303c:	4313      	orrs	r3, r2
 800303e:	610b      	str	r3, [r1, #16]
 8003040:	e011      	b.n	8003066 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003042:	4b1d      	ldr	r3, [pc, #116]	@ (80030b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800304a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6892      	ldr	r2, [r2, #8]
 8003052:	0211      	lsls	r1, r2, #8
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6952      	ldr	r2, [r2, #20]
 8003058:	0852      	lsrs	r2, r2, #1
 800305a:	3a01      	subs	r2, #1
 800305c:	0652      	lsls	r2, r2, #25
 800305e:	430a      	orrs	r2, r1
 8003060:	4915      	ldr	r1, [pc, #84]	@ (80030b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003062:	4313      	orrs	r3, r2
 8003064:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003066:	4b14      	ldr	r3, [pc, #80]	@ (80030b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a13      	ldr	r2, [pc, #76]	@ (80030b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800306c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003070:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003072:	f7fe f8cf 	bl	8001214 <HAL_GetTick>
 8003076:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003078:	e009      	b.n	800308e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800307a:	f7fe f8cb 	bl	8001214 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d902      	bls.n	800308e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	73fb      	strb	r3, [r7, #15]
          break;
 800308c:	e005      	b.n	800309a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800308e:	4b0a      	ldr	r3, [pc, #40]	@ (80030b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0ef      	beq.n	800307a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800309a:	7bfb      	ldrb	r3, [r7, #15]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d106      	bne.n	80030ae <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030a0:	4b05      	ldr	r3, [pc, #20]	@ (80030b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	4903      	ldr	r1, [pc, #12]	@ (80030b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40021000 	.word	0x40021000

080030bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030ca:	4b69      	ldr	r3, [pc, #420]	@ (8003270 <RCCEx_PLLSAI2_Config+0x1b4>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d018      	beq.n	8003108 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80030d6:	4b66      	ldr	r3, [pc, #408]	@ (8003270 <RCCEx_PLLSAI2_Config+0x1b4>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f003 0203 	and.w	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d10d      	bne.n	8003102 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
       ||
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80030ee:	4b60      	ldr	r3, [pc, #384]	@ (8003270 <RCCEx_PLLSAI2_Config+0x1b4>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	091b      	lsrs	r3, r3, #4
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
       ||
 80030fe:	429a      	cmp	r2, r3
 8003100:	d047      	beq.n	8003192 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	73fb      	strb	r3, [r7, #15]
 8003106:	e044      	b.n	8003192 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b03      	cmp	r3, #3
 800310e:	d018      	beq.n	8003142 <RCCEx_PLLSAI2_Config+0x86>
 8003110:	2b03      	cmp	r3, #3
 8003112:	d825      	bhi.n	8003160 <RCCEx_PLLSAI2_Config+0xa4>
 8003114:	2b01      	cmp	r3, #1
 8003116:	d002      	beq.n	800311e <RCCEx_PLLSAI2_Config+0x62>
 8003118:	2b02      	cmp	r3, #2
 800311a:	d009      	beq.n	8003130 <RCCEx_PLLSAI2_Config+0x74>
 800311c:	e020      	b.n	8003160 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800311e:	4b54      	ldr	r3, [pc, #336]	@ (8003270 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d11d      	bne.n	8003166 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800312e:	e01a      	b.n	8003166 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003130:	4b4f      	ldr	r3, [pc, #316]	@ (8003270 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003138:	2b00      	cmp	r3, #0
 800313a:	d116      	bne.n	800316a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003140:	e013      	b.n	800316a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003142:	4b4b      	ldr	r3, [pc, #300]	@ (8003270 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10f      	bne.n	800316e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800314e:	4b48      	ldr	r3, [pc, #288]	@ (8003270 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d109      	bne.n	800316e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800315e:	e006      	b.n	800316e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	73fb      	strb	r3, [r7, #15]
      break;
 8003164:	e004      	b.n	8003170 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003166:	bf00      	nop
 8003168:	e002      	b.n	8003170 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800316a:	bf00      	nop
 800316c:	e000      	b.n	8003170 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800316e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003170:	7bfb      	ldrb	r3, [r7, #15]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10d      	bne.n	8003192 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003176:	4b3e      	ldr	r3, [pc, #248]	@ (8003270 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6819      	ldr	r1, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	3b01      	subs	r3, #1
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	430b      	orrs	r3, r1
 800318c:	4938      	ldr	r1, [pc, #224]	@ (8003270 <RCCEx_PLLSAI2_Config+0x1b4>)
 800318e:	4313      	orrs	r3, r2
 8003190:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d166      	bne.n	8003266 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003198:	4b35      	ldr	r3, [pc, #212]	@ (8003270 <RCCEx_PLLSAI2_Config+0x1b4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a34      	ldr	r2, [pc, #208]	@ (8003270 <RCCEx_PLLSAI2_Config+0x1b4>)
 800319e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031a4:	f7fe f836 	bl	8001214 <HAL_GetTick>
 80031a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031aa:	e009      	b.n	80031c0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031ac:	f7fe f832 	bl	8001214 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d902      	bls.n	80031c0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	73fb      	strb	r3, [r7, #15]
        break;
 80031be:	e005      	b.n	80031cc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003270 <RCCEx_PLLSAI2_Config+0x1b4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1ef      	bne.n	80031ac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d149      	bne.n	8003266 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d110      	bne.n	80031fa <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031d8:	4b25      	ldr	r3, [pc, #148]	@ (8003270 <RCCEx_PLLSAI2_Config+0x1b4>)
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80031e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6892      	ldr	r2, [r2, #8]
 80031e8:	0211      	lsls	r1, r2, #8
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	68d2      	ldr	r2, [r2, #12]
 80031ee:	06d2      	lsls	r2, r2, #27
 80031f0:	430a      	orrs	r2, r1
 80031f2:	491f      	ldr	r1, [pc, #124]	@ (8003270 <RCCEx_PLLSAI2_Config+0x1b4>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	614b      	str	r3, [r1, #20]
 80031f8:	e011      	b.n	800321e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003270 <RCCEx_PLLSAI2_Config+0x1b4>)
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003202:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6892      	ldr	r2, [r2, #8]
 800320a:	0211      	lsls	r1, r2, #8
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6912      	ldr	r2, [r2, #16]
 8003210:	0852      	lsrs	r2, r2, #1
 8003212:	3a01      	subs	r2, #1
 8003214:	0652      	lsls	r2, r2, #25
 8003216:	430a      	orrs	r2, r1
 8003218:	4915      	ldr	r1, [pc, #84]	@ (8003270 <RCCEx_PLLSAI2_Config+0x1b4>)
 800321a:	4313      	orrs	r3, r2
 800321c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800321e:	4b14      	ldr	r3, [pc, #80]	@ (8003270 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a13      	ldr	r2, [pc, #76]	@ (8003270 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003228:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322a:	f7fd fff3 	bl	8001214 <HAL_GetTick>
 800322e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003230:	e009      	b.n	8003246 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003232:	f7fd ffef 	bl	8001214 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d902      	bls.n	8003246 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	73fb      	strb	r3, [r7, #15]
          break;
 8003244:	e005      	b.n	8003252 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003246:	4b0a      	ldr	r3, [pc, #40]	@ (8003270 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0ef      	beq.n	8003232 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d106      	bne.n	8003266 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003258:	4b05      	ldr	r3, [pc, #20]	@ (8003270 <RCCEx_PLLSAI2_Config+0x1b4>)
 800325a:	695a      	ldr	r2, [r3, #20]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	4903      	ldr	r1, [pc, #12]	@ (8003270 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003262:	4313      	orrs	r3, r2
 8003264:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003266:	7bfb      	ldrb	r3, [r7, #15]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40021000 	.word	0x40021000

08003274 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e040      	b.n	8003308 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800328a:	2b00      	cmp	r3, #0
 800328c:	d106      	bne.n	800329c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fd fe0e 	bl	8000eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2224      	movs	r2, #36	@ 0x24
 80032a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0201 	bic.w	r2, r2, #1
 80032b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fc32 	bl	8003b24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f977 	bl	80035b4 <UART_SetConfig>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e01b      	b.n	8003308 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80032de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0201 	orr.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 fcb1 	bl	8003c68 <UART_CheckIdleState>
 8003306:	4603      	mov	r3, r0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08a      	sub	sp, #40	@ 0x28
 8003314:	af02      	add	r7, sp, #8
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	4613      	mov	r3, r2
 800331e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003324:	2b20      	cmp	r3, #32
 8003326:	d177      	bne.n	8003418 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <HAL_UART_Transmit+0x24>
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e070      	b.n	800341a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2221      	movs	r2, #33	@ 0x21
 8003344:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003346:	f7fd ff65 	bl	8001214 <HAL_GetTick>
 800334a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	88fa      	ldrh	r2, [r7, #6]
 8003350:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	88fa      	ldrh	r2, [r7, #6]
 8003358:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003364:	d108      	bne.n	8003378 <HAL_UART_Transmit+0x68>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d104      	bne.n	8003378 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	e003      	b.n	8003380 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800337c:	2300      	movs	r3, #0
 800337e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003380:	e02f      	b.n	80033e2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2200      	movs	r2, #0
 800338a:	2180      	movs	r1, #128	@ 0x80
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 fd13 	bl	8003db8 <UART_WaitOnFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d004      	beq.n	80033a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2220      	movs	r2, #32
 800339c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e03b      	b.n	800341a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10b      	bne.n	80033c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	881a      	ldrh	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033b4:	b292      	uxth	r2, r2
 80033b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	3302      	adds	r3, #2
 80033bc:	61bb      	str	r3, [r7, #24]
 80033be:	e007      	b.n	80033d0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	781a      	ldrb	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	3301      	adds	r3, #1
 80033ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1c9      	bne.n	8003382 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2200      	movs	r2, #0
 80033f6:	2140      	movs	r1, #64	@ 0x40
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 fcdd 	bl	8003db8 <UART_WaitOnFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d004      	beq.n	800340e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e005      	b.n	800341a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2220      	movs	r2, #32
 8003412:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	e000      	b.n	800341a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003418:	2302      	movs	r3, #2
  }
}
 800341a:	4618      	mov	r0, r3
 800341c:	3720      	adds	r7, #32
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b08a      	sub	sp, #40	@ 0x28
 8003426:	af02      	add	r7, sp, #8
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	603b      	str	r3, [r7, #0]
 800342e:	4613      	mov	r3, r2
 8003430:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003438:	2b20      	cmp	r3, #32
 800343a:	f040 80b6 	bne.w	80035aa <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <HAL_UART_Receive+0x28>
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e0ae      	b.n	80035ac <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2222      	movs	r2, #34	@ 0x22
 800345a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003464:	f7fd fed6 	bl	8001214 <HAL_GetTick>
 8003468:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	88fa      	ldrh	r2, [r7, #6]
 800346e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	88fa      	ldrh	r2, [r7, #6]
 8003476:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003482:	d10e      	bne.n	80034a2 <HAL_UART_Receive+0x80>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d105      	bne.n	8003498 <HAL_UART_Receive+0x76>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003492:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003496:	e02d      	b.n	80034f4 <HAL_UART_Receive+0xd2>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	22ff      	movs	r2, #255	@ 0xff
 800349c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80034a0:	e028      	b.n	80034f4 <HAL_UART_Receive+0xd2>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10d      	bne.n	80034c6 <HAL_UART_Receive+0xa4>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d104      	bne.n	80034bc <HAL_UART_Receive+0x9a>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	22ff      	movs	r2, #255	@ 0xff
 80034b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80034ba:	e01b      	b.n	80034f4 <HAL_UART_Receive+0xd2>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	227f      	movs	r2, #127	@ 0x7f
 80034c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80034c4:	e016      	b.n	80034f4 <HAL_UART_Receive+0xd2>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034ce:	d10d      	bne.n	80034ec <HAL_UART_Receive+0xca>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d104      	bne.n	80034e2 <HAL_UART_Receive+0xc0>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	227f      	movs	r2, #127	@ 0x7f
 80034dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80034e0:	e008      	b.n	80034f4 <HAL_UART_Receive+0xd2>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	223f      	movs	r2, #63	@ 0x3f
 80034e6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80034ea:	e003      	b.n	80034f4 <HAL_UART_Receive+0xd2>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80034fa:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003504:	d108      	bne.n	8003518 <HAL_UART_Receive+0xf6>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d104      	bne.n	8003518 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	61bb      	str	r3, [r7, #24]
 8003516:	e003      	b.n	8003520 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800351c:	2300      	movs	r3, #0
 800351e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003520:	e037      	b.n	8003592 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2200      	movs	r2, #0
 800352a:	2120      	movs	r1, #32
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 fc43 	bl	8003db8 <UART_WaitOnFlagUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2220      	movs	r2, #32
 800353c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e033      	b.n	80035ac <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10c      	bne.n	8003564 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003550:	b29a      	uxth	r2, r3
 8003552:	8a7b      	ldrh	r3, [r7, #18]
 8003554:	4013      	ands	r3, r2
 8003556:	b29a      	uxth	r2, r3
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	3302      	adds	r3, #2
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	e00d      	b.n	8003580 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800356a:	b29b      	uxth	r3, r3
 800356c:	b2da      	uxtb	r2, r3
 800356e:	8a7b      	ldrh	r3, [r7, #18]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	4013      	ands	r3, r2
 8003574:	b2da      	uxtb	r2, r3
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	3301      	adds	r3, #1
 800357e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1c1      	bne.n	8003522 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2220      	movs	r2, #32
 80035a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	e000      	b.n	80035ac <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80035aa:	2302      	movs	r3, #2
  }
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3720      	adds	r7, #32
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035b8:	b08a      	sub	sp, #40	@ 0x28
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	431a      	orrs	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	4313      	orrs	r3, r2
 80035da:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	4ba4      	ldr	r3, [pc, #656]	@ (8003874 <UART_SetConfig+0x2c0>)
 80035e4:	4013      	ands	r3, r2
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	6812      	ldr	r2, [r2, #0]
 80035ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035ec:	430b      	orrs	r3, r1
 80035ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a99      	ldr	r2, [pc, #612]	@ (8003878 <UART_SetConfig+0x2c4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d004      	beq.n	8003620 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800361c:	4313      	orrs	r3, r2
 800361e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003630:	430a      	orrs	r2, r1
 8003632:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a90      	ldr	r2, [pc, #576]	@ (800387c <UART_SetConfig+0x2c8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d126      	bne.n	800368c <UART_SetConfig+0xd8>
 800363e:	4b90      	ldr	r3, [pc, #576]	@ (8003880 <UART_SetConfig+0x2cc>)
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	2b03      	cmp	r3, #3
 800364a:	d81b      	bhi.n	8003684 <UART_SetConfig+0xd0>
 800364c:	a201      	add	r2, pc, #4	@ (adr r2, 8003654 <UART_SetConfig+0xa0>)
 800364e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003652:	bf00      	nop
 8003654:	08003665 	.word	0x08003665
 8003658:	08003675 	.word	0x08003675
 800365c:	0800366d 	.word	0x0800366d
 8003660:	0800367d 	.word	0x0800367d
 8003664:	2301      	movs	r3, #1
 8003666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800366a:	e116      	b.n	800389a <UART_SetConfig+0x2e6>
 800366c:	2302      	movs	r3, #2
 800366e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003672:	e112      	b.n	800389a <UART_SetConfig+0x2e6>
 8003674:	2304      	movs	r3, #4
 8003676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800367a:	e10e      	b.n	800389a <UART_SetConfig+0x2e6>
 800367c:	2308      	movs	r3, #8
 800367e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003682:	e10a      	b.n	800389a <UART_SetConfig+0x2e6>
 8003684:	2310      	movs	r3, #16
 8003686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800368a:	e106      	b.n	800389a <UART_SetConfig+0x2e6>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a7c      	ldr	r2, [pc, #496]	@ (8003884 <UART_SetConfig+0x2d0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d138      	bne.n	8003708 <UART_SetConfig+0x154>
 8003696:	4b7a      	ldr	r3, [pc, #488]	@ (8003880 <UART_SetConfig+0x2cc>)
 8003698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800369c:	f003 030c 	and.w	r3, r3, #12
 80036a0:	2b0c      	cmp	r3, #12
 80036a2:	d82d      	bhi.n	8003700 <UART_SetConfig+0x14c>
 80036a4:	a201      	add	r2, pc, #4	@ (adr r2, 80036ac <UART_SetConfig+0xf8>)
 80036a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036aa:	bf00      	nop
 80036ac:	080036e1 	.word	0x080036e1
 80036b0:	08003701 	.word	0x08003701
 80036b4:	08003701 	.word	0x08003701
 80036b8:	08003701 	.word	0x08003701
 80036bc:	080036f1 	.word	0x080036f1
 80036c0:	08003701 	.word	0x08003701
 80036c4:	08003701 	.word	0x08003701
 80036c8:	08003701 	.word	0x08003701
 80036cc:	080036e9 	.word	0x080036e9
 80036d0:	08003701 	.word	0x08003701
 80036d4:	08003701 	.word	0x08003701
 80036d8:	08003701 	.word	0x08003701
 80036dc:	080036f9 	.word	0x080036f9
 80036e0:	2300      	movs	r3, #0
 80036e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036e6:	e0d8      	b.n	800389a <UART_SetConfig+0x2e6>
 80036e8:	2302      	movs	r3, #2
 80036ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ee:	e0d4      	b.n	800389a <UART_SetConfig+0x2e6>
 80036f0:	2304      	movs	r3, #4
 80036f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036f6:	e0d0      	b.n	800389a <UART_SetConfig+0x2e6>
 80036f8:	2308      	movs	r3, #8
 80036fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036fe:	e0cc      	b.n	800389a <UART_SetConfig+0x2e6>
 8003700:	2310      	movs	r3, #16
 8003702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003706:	e0c8      	b.n	800389a <UART_SetConfig+0x2e6>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a5e      	ldr	r2, [pc, #376]	@ (8003888 <UART_SetConfig+0x2d4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d125      	bne.n	800375e <UART_SetConfig+0x1aa>
 8003712:	4b5b      	ldr	r3, [pc, #364]	@ (8003880 <UART_SetConfig+0x2cc>)
 8003714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003718:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800371c:	2b30      	cmp	r3, #48	@ 0x30
 800371e:	d016      	beq.n	800374e <UART_SetConfig+0x19a>
 8003720:	2b30      	cmp	r3, #48	@ 0x30
 8003722:	d818      	bhi.n	8003756 <UART_SetConfig+0x1a2>
 8003724:	2b20      	cmp	r3, #32
 8003726:	d00a      	beq.n	800373e <UART_SetConfig+0x18a>
 8003728:	2b20      	cmp	r3, #32
 800372a:	d814      	bhi.n	8003756 <UART_SetConfig+0x1a2>
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <UART_SetConfig+0x182>
 8003730:	2b10      	cmp	r3, #16
 8003732:	d008      	beq.n	8003746 <UART_SetConfig+0x192>
 8003734:	e00f      	b.n	8003756 <UART_SetConfig+0x1a2>
 8003736:	2300      	movs	r3, #0
 8003738:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800373c:	e0ad      	b.n	800389a <UART_SetConfig+0x2e6>
 800373e:	2302      	movs	r3, #2
 8003740:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003744:	e0a9      	b.n	800389a <UART_SetConfig+0x2e6>
 8003746:	2304      	movs	r3, #4
 8003748:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800374c:	e0a5      	b.n	800389a <UART_SetConfig+0x2e6>
 800374e:	2308      	movs	r3, #8
 8003750:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003754:	e0a1      	b.n	800389a <UART_SetConfig+0x2e6>
 8003756:	2310      	movs	r3, #16
 8003758:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800375c:	e09d      	b.n	800389a <UART_SetConfig+0x2e6>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a4a      	ldr	r2, [pc, #296]	@ (800388c <UART_SetConfig+0x2d8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d125      	bne.n	80037b4 <UART_SetConfig+0x200>
 8003768:	4b45      	ldr	r3, [pc, #276]	@ (8003880 <UART_SetConfig+0x2cc>)
 800376a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800376e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003772:	2bc0      	cmp	r3, #192	@ 0xc0
 8003774:	d016      	beq.n	80037a4 <UART_SetConfig+0x1f0>
 8003776:	2bc0      	cmp	r3, #192	@ 0xc0
 8003778:	d818      	bhi.n	80037ac <UART_SetConfig+0x1f8>
 800377a:	2b80      	cmp	r3, #128	@ 0x80
 800377c:	d00a      	beq.n	8003794 <UART_SetConfig+0x1e0>
 800377e:	2b80      	cmp	r3, #128	@ 0x80
 8003780:	d814      	bhi.n	80037ac <UART_SetConfig+0x1f8>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <UART_SetConfig+0x1d8>
 8003786:	2b40      	cmp	r3, #64	@ 0x40
 8003788:	d008      	beq.n	800379c <UART_SetConfig+0x1e8>
 800378a:	e00f      	b.n	80037ac <UART_SetConfig+0x1f8>
 800378c:	2300      	movs	r3, #0
 800378e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003792:	e082      	b.n	800389a <UART_SetConfig+0x2e6>
 8003794:	2302      	movs	r3, #2
 8003796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800379a:	e07e      	b.n	800389a <UART_SetConfig+0x2e6>
 800379c:	2304      	movs	r3, #4
 800379e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037a2:	e07a      	b.n	800389a <UART_SetConfig+0x2e6>
 80037a4:	2308      	movs	r3, #8
 80037a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037aa:	e076      	b.n	800389a <UART_SetConfig+0x2e6>
 80037ac:	2310      	movs	r3, #16
 80037ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037b2:	e072      	b.n	800389a <UART_SetConfig+0x2e6>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a35      	ldr	r2, [pc, #212]	@ (8003890 <UART_SetConfig+0x2dc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d12a      	bne.n	8003814 <UART_SetConfig+0x260>
 80037be:	4b30      	ldr	r3, [pc, #192]	@ (8003880 <UART_SetConfig+0x2cc>)
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037cc:	d01a      	beq.n	8003804 <UART_SetConfig+0x250>
 80037ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037d2:	d81b      	bhi.n	800380c <UART_SetConfig+0x258>
 80037d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037d8:	d00c      	beq.n	80037f4 <UART_SetConfig+0x240>
 80037da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037de:	d815      	bhi.n	800380c <UART_SetConfig+0x258>
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <UART_SetConfig+0x238>
 80037e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037e8:	d008      	beq.n	80037fc <UART_SetConfig+0x248>
 80037ea:	e00f      	b.n	800380c <UART_SetConfig+0x258>
 80037ec:	2300      	movs	r3, #0
 80037ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037f2:	e052      	b.n	800389a <UART_SetConfig+0x2e6>
 80037f4:	2302      	movs	r3, #2
 80037f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037fa:	e04e      	b.n	800389a <UART_SetConfig+0x2e6>
 80037fc:	2304      	movs	r3, #4
 80037fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003802:	e04a      	b.n	800389a <UART_SetConfig+0x2e6>
 8003804:	2308      	movs	r3, #8
 8003806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800380a:	e046      	b.n	800389a <UART_SetConfig+0x2e6>
 800380c:	2310      	movs	r3, #16
 800380e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003812:	e042      	b.n	800389a <UART_SetConfig+0x2e6>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a17      	ldr	r2, [pc, #92]	@ (8003878 <UART_SetConfig+0x2c4>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d13a      	bne.n	8003894 <UART_SetConfig+0x2e0>
 800381e:	4b18      	ldr	r3, [pc, #96]	@ (8003880 <UART_SetConfig+0x2cc>)
 8003820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003824:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003828:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800382c:	d01a      	beq.n	8003864 <UART_SetConfig+0x2b0>
 800382e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003832:	d81b      	bhi.n	800386c <UART_SetConfig+0x2b8>
 8003834:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003838:	d00c      	beq.n	8003854 <UART_SetConfig+0x2a0>
 800383a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800383e:	d815      	bhi.n	800386c <UART_SetConfig+0x2b8>
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <UART_SetConfig+0x298>
 8003844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003848:	d008      	beq.n	800385c <UART_SetConfig+0x2a8>
 800384a:	e00f      	b.n	800386c <UART_SetConfig+0x2b8>
 800384c:	2300      	movs	r3, #0
 800384e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003852:	e022      	b.n	800389a <UART_SetConfig+0x2e6>
 8003854:	2302      	movs	r3, #2
 8003856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800385a:	e01e      	b.n	800389a <UART_SetConfig+0x2e6>
 800385c:	2304      	movs	r3, #4
 800385e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003862:	e01a      	b.n	800389a <UART_SetConfig+0x2e6>
 8003864:	2308      	movs	r3, #8
 8003866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800386a:	e016      	b.n	800389a <UART_SetConfig+0x2e6>
 800386c:	2310      	movs	r3, #16
 800386e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003872:	e012      	b.n	800389a <UART_SetConfig+0x2e6>
 8003874:	efff69f3 	.word	0xefff69f3
 8003878:	40008000 	.word	0x40008000
 800387c:	40013800 	.word	0x40013800
 8003880:	40021000 	.word	0x40021000
 8003884:	40004400 	.word	0x40004400
 8003888:	40004800 	.word	0x40004800
 800388c:	40004c00 	.word	0x40004c00
 8003890:	40005000 	.word	0x40005000
 8003894:	2310      	movs	r3, #16
 8003896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a9f      	ldr	r2, [pc, #636]	@ (8003b1c <UART_SetConfig+0x568>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d17a      	bne.n	800399a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d824      	bhi.n	80038f6 <UART_SetConfig+0x342>
 80038ac:	a201      	add	r2, pc, #4	@ (adr r2, 80038b4 <UART_SetConfig+0x300>)
 80038ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b2:	bf00      	nop
 80038b4:	080038d9 	.word	0x080038d9
 80038b8:	080038f7 	.word	0x080038f7
 80038bc:	080038e1 	.word	0x080038e1
 80038c0:	080038f7 	.word	0x080038f7
 80038c4:	080038e7 	.word	0x080038e7
 80038c8:	080038f7 	.word	0x080038f7
 80038cc:	080038f7 	.word	0x080038f7
 80038d0:	080038f7 	.word	0x080038f7
 80038d4:	080038ef 	.word	0x080038ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038d8:	f7fe ff76 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 80038dc:	61f8      	str	r0, [r7, #28]
        break;
 80038de:	e010      	b.n	8003902 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038e0:	4b8f      	ldr	r3, [pc, #572]	@ (8003b20 <UART_SetConfig+0x56c>)
 80038e2:	61fb      	str	r3, [r7, #28]
        break;
 80038e4:	e00d      	b.n	8003902 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038e6:	f7fe fed7 	bl	8002698 <HAL_RCC_GetSysClockFreq>
 80038ea:	61f8      	str	r0, [r7, #28]
        break;
 80038ec:	e009      	b.n	8003902 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038f2:	61fb      	str	r3, [r7, #28]
        break;
 80038f4:	e005      	b.n	8003902 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003900:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80fb 	beq.w	8003b00 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	4413      	add	r3, r2
 8003914:	69fa      	ldr	r2, [r7, #28]
 8003916:	429a      	cmp	r2, r3
 8003918:	d305      	bcc.n	8003926 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	429a      	cmp	r2, r3
 8003924:	d903      	bls.n	800392e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800392c:	e0e8      	b.n	8003b00 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	2200      	movs	r2, #0
 8003932:	461c      	mov	r4, r3
 8003934:	4615      	mov	r5, r2
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	022b      	lsls	r3, r5, #8
 8003940:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003944:	0222      	lsls	r2, r4, #8
 8003946:	68f9      	ldr	r1, [r7, #12]
 8003948:	6849      	ldr	r1, [r1, #4]
 800394a:	0849      	lsrs	r1, r1, #1
 800394c:	2000      	movs	r0, #0
 800394e:	4688      	mov	r8, r1
 8003950:	4681      	mov	r9, r0
 8003952:	eb12 0a08 	adds.w	sl, r2, r8
 8003956:	eb43 0b09 	adc.w	fp, r3, r9
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	603b      	str	r3, [r7, #0]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003968:	4650      	mov	r0, sl
 800396a:	4659      	mov	r1, fp
 800396c:	f7fc fc98 	bl	80002a0 <__aeabi_uldivmod>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4613      	mov	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800397e:	d308      	bcc.n	8003992 <UART_SetConfig+0x3de>
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003986:	d204      	bcs.n	8003992 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	60da      	str	r2, [r3, #12]
 8003990:	e0b6      	b.n	8003b00 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003998:	e0b2      	b.n	8003b00 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039a2:	d15e      	bne.n	8003a62 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80039a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d828      	bhi.n	80039fe <UART_SetConfig+0x44a>
 80039ac:	a201      	add	r2, pc, #4	@ (adr r2, 80039b4 <UART_SetConfig+0x400>)
 80039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b2:	bf00      	nop
 80039b4:	080039d9 	.word	0x080039d9
 80039b8:	080039e1 	.word	0x080039e1
 80039bc:	080039e9 	.word	0x080039e9
 80039c0:	080039ff 	.word	0x080039ff
 80039c4:	080039ef 	.word	0x080039ef
 80039c8:	080039ff 	.word	0x080039ff
 80039cc:	080039ff 	.word	0x080039ff
 80039d0:	080039ff 	.word	0x080039ff
 80039d4:	080039f7 	.word	0x080039f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039d8:	f7fe fef6 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 80039dc:	61f8      	str	r0, [r7, #28]
        break;
 80039de:	e014      	b.n	8003a0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039e0:	f7fe ff08 	bl	80027f4 <HAL_RCC_GetPCLK2Freq>
 80039e4:	61f8      	str	r0, [r7, #28]
        break;
 80039e6:	e010      	b.n	8003a0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e8:	4b4d      	ldr	r3, [pc, #308]	@ (8003b20 <UART_SetConfig+0x56c>)
 80039ea:	61fb      	str	r3, [r7, #28]
        break;
 80039ec:	e00d      	b.n	8003a0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ee:	f7fe fe53 	bl	8002698 <HAL_RCC_GetSysClockFreq>
 80039f2:	61f8      	str	r0, [r7, #28]
        break;
 80039f4:	e009      	b.n	8003a0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039fa:	61fb      	str	r3, [r7, #28]
        break;
 80039fc:	e005      	b.n	8003a0a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d077      	beq.n	8003b00 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	005a      	lsls	r2, r3, #1
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	085b      	lsrs	r3, r3, #1
 8003a1a:	441a      	add	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a24:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b0f      	cmp	r3, #15
 8003a2a:	d916      	bls.n	8003a5a <UART_SetConfig+0x4a6>
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a32:	d212      	bcs.n	8003a5a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	f023 030f 	bic.w	r3, r3, #15
 8003a3c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	8afb      	ldrh	r3, [r7, #22]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	8afa      	ldrh	r2, [r7, #22]
 8003a56:	60da      	str	r2, [r3, #12]
 8003a58:	e052      	b.n	8003b00 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003a60:	e04e      	b.n	8003b00 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a62:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d827      	bhi.n	8003aba <UART_SetConfig+0x506>
 8003a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a70 <UART_SetConfig+0x4bc>)
 8003a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a70:	08003a95 	.word	0x08003a95
 8003a74:	08003a9d 	.word	0x08003a9d
 8003a78:	08003aa5 	.word	0x08003aa5
 8003a7c:	08003abb 	.word	0x08003abb
 8003a80:	08003aab 	.word	0x08003aab
 8003a84:	08003abb 	.word	0x08003abb
 8003a88:	08003abb 	.word	0x08003abb
 8003a8c:	08003abb 	.word	0x08003abb
 8003a90:	08003ab3 	.word	0x08003ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a94:	f7fe fe98 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 8003a98:	61f8      	str	r0, [r7, #28]
        break;
 8003a9a:	e014      	b.n	8003ac6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a9c:	f7fe feaa 	bl	80027f4 <HAL_RCC_GetPCLK2Freq>
 8003aa0:	61f8      	str	r0, [r7, #28]
        break;
 8003aa2:	e010      	b.n	8003ac6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8003b20 <UART_SetConfig+0x56c>)
 8003aa6:	61fb      	str	r3, [r7, #28]
        break;
 8003aa8:	e00d      	b.n	8003ac6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aaa:	f7fe fdf5 	bl	8002698 <HAL_RCC_GetSysClockFreq>
 8003aae:	61f8      	str	r0, [r7, #28]
        break;
 8003ab0:	e009      	b.n	8003ac6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ab6:	61fb      	str	r3, [r7, #28]
        break;
 8003ab8:	e005      	b.n	8003ac6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ac4:	bf00      	nop
    }

    if (pclk != 0U)
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d019      	beq.n	8003b00 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	085a      	lsrs	r2, r3, #1
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	441a      	add	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ade:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	2b0f      	cmp	r3, #15
 8003ae4:	d909      	bls.n	8003afa <UART_SetConfig+0x546>
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aec:	d205      	bcs.n	8003afa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60da      	str	r2, [r3, #12]
 8003af8:	e002      	b.n	8003b00 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003b0c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3728      	adds	r7, #40	@ 0x28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40008000 	.word	0x40008000
 8003b20:	00f42400 	.word	0x00f42400

08003b24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00a      	beq.n	8003b92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d01a      	beq.n	8003c3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c22:	d10a      	bne.n	8003c3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	605a      	str	r2, [r3, #4]
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b098      	sub	sp, #96	@ 0x60
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c78:	f7fd facc 	bl	8001214 <HAL_GetTick>
 8003c7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d12e      	bne.n	8003cea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c94:	2200      	movs	r2, #0
 8003c96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f88c 	bl	8003db8 <UART_WaitOnFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d021      	beq.n	8003cea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cae:	e853 3f00 	ldrex	r3, [r3]
 8003cb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cba:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cc6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003cca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ccc:	e841 2300 	strex	r3, r2, [r1]
 8003cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1e6      	bne.n	8003ca6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e062      	b.n	8003db0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d149      	bne.n	8003d8c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cf8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d00:	2200      	movs	r2, #0
 8003d02:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f856 	bl	8003db8 <UART_WaitOnFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d03c      	beq.n	8003d8c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1a:	e853 3f00 	ldrex	r3, [r3]
 8003d1e:	623b      	str	r3, [r7, #32]
   return(result);
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d30:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d32:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d38:	e841 2300 	strex	r3, r2, [r1]
 8003d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1e6      	bne.n	8003d12 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3308      	adds	r3, #8
 8003d4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	e853 3f00 	ldrex	r3, [r3]
 8003d52:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0301 	bic.w	r3, r3, #1
 8003d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3308      	adds	r3, #8
 8003d62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d64:	61fa      	str	r2, [r7, #28]
 8003d66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d68:	69b9      	ldr	r1, [r7, #24]
 8003d6a:	69fa      	ldr	r2, [r7, #28]
 8003d6c:	e841 2300 	strex	r3, r2, [r1]
 8003d70:	617b      	str	r3, [r7, #20]
   return(result);
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1e5      	bne.n	8003d44 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e011      	b.n	8003db0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3758      	adds	r7, #88	@ 0x58
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc8:	e04f      	b.n	8003e6a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd0:	d04b      	beq.n	8003e6a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd2:	f7fd fa1f 	bl	8001214 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d302      	bcc.n	8003de8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e04e      	b.n	8003e8a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d037      	beq.n	8003e6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b80      	cmp	r3, #128	@ 0x80
 8003dfe:	d034      	beq.n	8003e6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2b40      	cmp	r3, #64	@ 0x40
 8003e04:	d031      	beq.n	8003e6a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d110      	bne.n	8003e36 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2208      	movs	r2, #8
 8003e1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 f838 	bl	8003e92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2208      	movs	r2, #8
 8003e26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e029      	b.n	8003e8a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e44:	d111      	bne.n	8003e6a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 f81e 	bl	8003e92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e00f      	b.n	8003e8a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	4013      	ands	r3, r2
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	bf0c      	ite	eq
 8003e7a:	2301      	moveq	r3, #1
 8003e7c:	2300      	movne	r3, #0
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	461a      	mov	r2, r3
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d0a0      	beq.n	8003dca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b095      	sub	sp, #84	@ 0x54
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea2:	e853 3f00 	ldrex	r3, [r3]
 8003ea6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eaa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003eb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003eba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ebe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ec0:	e841 2300 	strex	r3, r2, [r1]
 8003ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1e6      	bne.n	8003e9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	e853 3f00 	ldrex	r3, [r3]
 8003eda:	61fb      	str	r3, [r7, #28]
   return(result);
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f023 0301 	bic.w	r3, r3, #1
 8003ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	3308      	adds	r3, #8
 8003eea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003eec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003eee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ef2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ef4:	e841 2300 	strex	r3, r2, [r1]
 8003ef8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1e5      	bne.n	8003ecc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d118      	bne.n	8003f3a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	e853 3f00 	ldrex	r3, [r3]
 8003f14:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f023 0310 	bic.w	r3, r3, #16
 8003f1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f26:	61bb      	str	r3, [r7, #24]
 8003f28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	6979      	ldr	r1, [r7, #20]
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	e841 2300 	strex	r3, r2, [r1]
 8003f32:	613b      	str	r3, [r7, #16]
   return(result);
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1e6      	bne.n	8003f08 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f4e:	bf00      	nop
 8003f50:	3754      	adds	r7, #84	@ 0x54
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
	...

08003f5c <_vsiprintf_r>:
 8003f5c:	b510      	push	{r4, lr}
 8003f5e:	b09a      	sub	sp, #104	@ 0x68
 8003f60:	2400      	movs	r4, #0
 8003f62:	9100      	str	r1, [sp, #0]
 8003f64:	9104      	str	r1, [sp, #16]
 8003f66:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003f6a:	9105      	str	r1, [sp, #20]
 8003f6c:	9102      	str	r1, [sp, #8]
 8003f6e:	4905      	ldr	r1, [pc, #20]	@ (8003f84 <_vsiprintf_r+0x28>)
 8003f70:	9103      	str	r1, [sp, #12]
 8003f72:	4669      	mov	r1, sp
 8003f74:	9419      	str	r4, [sp, #100]	@ 0x64
 8003f76:	f000 f999 	bl	80042ac <_svfiprintf_r>
 8003f7a:	9b00      	ldr	r3, [sp, #0]
 8003f7c:	701c      	strb	r4, [r3, #0]
 8003f7e:	b01a      	add	sp, #104	@ 0x68
 8003f80:	bd10      	pop	{r4, pc}
 8003f82:	bf00      	nop
 8003f84:	ffff0208 	.word	0xffff0208

08003f88 <vsiprintf>:
 8003f88:	4613      	mov	r3, r2
 8003f8a:	460a      	mov	r2, r1
 8003f8c:	4601      	mov	r1, r0
 8003f8e:	4802      	ldr	r0, [pc, #8]	@ (8003f98 <vsiprintf+0x10>)
 8003f90:	6800      	ldr	r0, [r0, #0]
 8003f92:	f7ff bfe3 	b.w	8003f5c <_vsiprintf_r>
 8003f96:	bf00      	nop
 8003f98:	20000014 	.word	0x20000014

08003f9c <memset>:
 8003f9c:	4402      	add	r2, r0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d100      	bne.n	8003fa6 <memset+0xa>
 8003fa4:	4770      	bx	lr
 8003fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8003faa:	e7f9      	b.n	8003fa0 <memset+0x4>

08003fac <__errno>:
 8003fac:	4b01      	ldr	r3, [pc, #4]	@ (8003fb4 <__errno+0x8>)
 8003fae:	6818      	ldr	r0, [r3, #0]
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	20000014 	.word	0x20000014

08003fb8 <__libc_init_array>:
 8003fb8:	b570      	push	{r4, r5, r6, lr}
 8003fba:	4d0d      	ldr	r5, [pc, #52]	@ (8003ff0 <__libc_init_array+0x38>)
 8003fbc:	4c0d      	ldr	r4, [pc, #52]	@ (8003ff4 <__libc_init_array+0x3c>)
 8003fbe:	1b64      	subs	r4, r4, r5
 8003fc0:	10a4      	asrs	r4, r4, #2
 8003fc2:	2600      	movs	r6, #0
 8003fc4:	42a6      	cmp	r6, r4
 8003fc6:	d109      	bne.n	8003fdc <__libc_init_array+0x24>
 8003fc8:	4d0b      	ldr	r5, [pc, #44]	@ (8003ff8 <__libc_init_array+0x40>)
 8003fca:	4c0c      	ldr	r4, [pc, #48]	@ (8003ffc <__libc_init_array+0x44>)
 8003fcc:	f000 fc64 	bl	8004898 <_init>
 8003fd0:	1b64      	subs	r4, r4, r5
 8003fd2:	10a4      	asrs	r4, r4, #2
 8003fd4:	2600      	movs	r6, #0
 8003fd6:	42a6      	cmp	r6, r4
 8003fd8:	d105      	bne.n	8003fe6 <__libc_init_array+0x2e>
 8003fda:	bd70      	pop	{r4, r5, r6, pc}
 8003fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fe0:	4798      	blx	r3
 8003fe2:	3601      	adds	r6, #1
 8003fe4:	e7ee      	b.n	8003fc4 <__libc_init_array+0xc>
 8003fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fea:	4798      	blx	r3
 8003fec:	3601      	adds	r6, #1
 8003fee:	e7f2      	b.n	8003fd6 <__libc_init_array+0x1e>
 8003ff0:	08004b9c 	.word	0x08004b9c
 8003ff4:	08004b9c 	.word	0x08004b9c
 8003ff8:	08004b9c 	.word	0x08004b9c
 8003ffc:	08004ba0 	.word	0x08004ba0

08004000 <__retarget_lock_acquire_recursive>:
 8004000:	4770      	bx	lr

08004002 <__retarget_lock_release_recursive>:
 8004002:	4770      	bx	lr

08004004 <_free_r>:
 8004004:	b538      	push	{r3, r4, r5, lr}
 8004006:	4605      	mov	r5, r0
 8004008:	2900      	cmp	r1, #0
 800400a:	d041      	beq.n	8004090 <_free_r+0x8c>
 800400c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004010:	1f0c      	subs	r4, r1, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	bfb8      	it	lt
 8004016:	18e4      	addlt	r4, r4, r3
 8004018:	f000 f8e0 	bl	80041dc <__malloc_lock>
 800401c:	4a1d      	ldr	r2, [pc, #116]	@ (8004094 <_free_r+0x90>)
 800401e:	6813      	ldr	r3, [r2, #0]
 8004020:	b933      	cbnz	r3, 8004030 <_free_r+0x2c>
 8004022:	6063      	str	r3, [r4, #4]
 8004024:	6014      	str	r4, [r2, #0]
 8004026:	4628      	mov	r0, r5
 8004028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800402c:	f000 b8dc 	b.w	80041e8 <__malloc_unlock>
 8004030:	42a3      	cmp	r3, r4
 8004032:	d908      	bls.n	8004046 <_free_r+0x42>
 8004034:	6820      	ldr	r0, [r4, #0]
 8004036:	1821      	adds	r1, r4, r0
 8004038:	428b      	cmp	r3, r1
 800403a:	bf01      	itttt	eq
 800403c:	6819      	ldreq	r1, [r3, #0]
 800403e:	685b      	ldreq	r3, [r3, #4]
 8004040:	1809      	addeq	r1, r1, r0
 8004042:	6021      	streq	r1, [r4, #0]
 8004044:	e7ed      	b.n	8004022 <_free_r+0x1e>
 8004046:	461a      	mov	r2, r3
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	b10b      	cbz	r3, 8004050 <_free_r+0x4c>
 800404c:	42a3      	cmp	r3, r4
 800404e:	d9fa      	bls.n	8004046 <_free_r+0x42>
 8004050:	6811      	ldr	r1, [r2, #0]
 8004052:	1850      	adds	r0, r2, r1
 8004054:	42a0      	cmp	r0, r4
 8004056:	d10b      	bne.n	8004070 <_free_r+0x6c>
 8004058:	6820      	ldr	r0, [r4, #0]
 800405a:	4401      	add	r1, r0
 800405c:	1850      	adds	r0, r2, r1
 800405e:	4283      	cmp	r3, r0
 8004060:	6011      	str	r1, [r2, #0]
 8004062:	d1e0      	bne.n	8004026 <_free_r+0x22>
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	6053      	str	r3, [r2, #4]
 800406a:	4408      	add	r0, r1
 800406c:	6010      	str	r0, [r2, #0]
 800406e:	e7da      	b.n	8004026 <_free_r+0x22>
 8004070:	d902      	bls.n	8004078 <_free_r+0x74>
 8004072:	230c      	movs	r3, #12
 8004074:	602b      	str	r3, [r5, #0]
 8004076:	e7d6      	b.n	8004026 <_free_r+0x22>
 8004078:	6820      	ldr	r0, [r4, #0]
 800407a:	1821      	adds	r1, r4, r0
 800407c:	428b      	cmp	r3, r1
 800407e:	bf04      	itt	eq
 8004080:	6819      	ldreq	r1, [r3, #0]
 8004082:	685b      	ldreq	r3, [r3, #4]
 8004084:	6063      	str	r3, [r4, #4]
 8004086:	bf04      	itt	eq
 8004088:	1809      	addeq	r1, r1, r0
 800408a:	6021      	streq	r1, [r4, #0]
 800408c:	6054      	str	r4, [r2, #4]
 800408e:	e7ca      	b.n	8004026 <_free_r+0x22>
 8004090:	bd38      	pop	{r3, r4, r5, pc}
 8004092:	bf00      	nop
 8004094:	200003c8 	.word	0x200003c8

08004098 <sbrk_aligned>:
 8004098:	b570      	push	{r4, r5, r6, lr}
 800409a:	4e0f      	ldr	r6, [pc, #60]	@ (80040d8 <sbrk_aligned+0x40>)
 800409c:	460c      	mov	r4, r1
 800409e:	6831      	ldr	r1, [r6, #0]
 80040a0:	4605      	mov	r5, r0
 80040a2:	b911      	cbnz	r1, 80040aa <sbrk_aligned+0x12>
 80040a4:	f000 fba4 	bl	80047f0 <_sbrk_r>
 80040a8:	6030      	str	r0, [r6, #0]
 80040aa:	4621      	mov	r1, r4
 80040ac:	4628      	mov	r0, r5
 80040ae:	f000 fb9f 	bl	80047f0 <_sbrk_r>
 80040b2:	1c43      	adds	r3, r0, #1
 80040b4:	d103      	bne.n	80040be <sbrk_aligned+0x26>
 80040b6:	f04f 34ff 	mov.w	r4, #4294967295
 80040ba:	4620      	mov	r0, r4
 80040bc:	bd70      	pop	{r4, r5, r6, pc}
 80040be:	1cc4      	adds	r4, r0, #3
 80040c0:	f024 0403 	bic.w	r4, r4, #3
 80040c4:	42a0      	cmp	r0, r4
 80040c6:	d0f8      	beq.n	80040ba <sbrk_aligned+0x22>
 80040c8:	1a21      	subs	r1, r4, r0
 80040ca:	4628      	mov	r0, r5
 80040cc:	f000 fb90 	bl	80047f0 <_sbrk_r>
 80040d0:	3001      	adds	r0, #1
 80040d2:	d1f2      	bne.n	80040ba <sbrk_aligned+0x22>
 80040d4:	e7ef      	b.n	80040b6 <sbrk_aligned+0x1e>
 80040d6:	bf00      	nop
 80040d8:	200003c4 	.word	0x200003c4

080040dc <_malloc_r>:
 80040dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040e0:	1ccd      	adds	r5, r1, #3
 80040e2:	f025 0503 	bic.w	r5, r5, #3
 80040e6:	3508      	adds	r5, #8
 80040e8:	2d0c      	cmp	r5, #12
 80040ea:	bf38      	it	cc
 80040ec:	250c      	movcc	r5, #12
 80040ee:	2d00      	cmp	r5, #0
 80040f0:	4606      	mov	r6, r0
 80040f2:	db01      	blt.n	80040f8 <_malloc_r+0x1c>
 80040f4:	42a9      	cmp	r1, r5
 80040f6:	d904      	bls.n	8004102 <_malloc_r+0x26>
 80040f8:	230c      	movs	r3, #12
 80040fa:	6033      	str	r3, [r6, #0]
 80040fc:	2000      	movs	r0, #0
 80040fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004102:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80041d8 <_malloc_r+0xfc>
 8004106:	f000 f869 	bl	80041dc <__malloc_lock>
 800410a:	f8d8 3000 	ldr.w	r3, [r8]
 800410e:	461c      	mov	r4, r3
 8004110:	bb44      	cbnz	r4, 8004164 <_malloc_r+0x88>
 8004112:	4629      	mov	r1, r5
 8004114:	4630      	mov	r0, r6
 8004116:	f7ff ffbf 	bl	8004098 <sbrk_aligned>
 800411a:	1c43      	adds	r3, r0, #1
 800411c:	4604      	mov	r4, r0
 800411e:	d158      	bne.n	80041d2 <_malloc_r+0xf6>
 8004120:	f8d8 4000 	ldr.w	r4, [r8]
 8004124:	4627      	mov	r7, r4
 8004126:	2f00      	cmp	r7, #0
 8004128:	d143      	bne.n	80041b2 <_malloc_r+0xd6>
 800412a:	2c00      	cmp	r4, #0
 800412c:	d04b      	beq.n	80041c6 <_malloc_r+0xea>
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	4639      	mov	r1, r7
 8004132:	4630      	mov	r0, r6
 8004134:	eb04 0903 	add.w	r9, r4, r3
 8004138:	f000 fb5a 	bl	80047f0 <_sbrk_r>
 800413c:	4581      	cmp	r9, r0
 800413e:	d142      	bne.n	80041c6 <_malloc_r+0xea>
 8004140:	6821      	ldr	r1, [r4, #0]
 8004142:	1a6d      	subs	r5, r5, r1
 8004144:	4629      	mov	r1, r5
 8004146:	4630      	mov	r0, r6
 8004148:	f7ff ffa6 	bl	8004098 <sbrk_aligned>
 800414c:	3001      	adds	r0, #1
 800414e:	d03a      	beq.n	80041c6 <_malloc_r+0xea>
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	442b      	add	r3, r5
 8004154:	6023      	str	r3, [r4, #0]
 8004156:	f8d8 3000 	ldr.w	r3, [r8]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	bb62      	cbnz	r2, 80041b8 <_malloc_r+0xdc>
 800415e:	f8c8 7000 	str.w	r7, [r8]
 8004162:	e00f      	b.n	8004184 <_malloc_r+0xa8>
 8004164:	6822      	ldr	r2, [r4, #0]
 8004166:	1b52      	subs	r2, r2, r5
 8004168:	d420      	bmi.n	80041ac <_malloc_r+0xd0>
 800416a:	2a0b      	cmp	r2, #11
 800416c:	d917      	bls.n	800419e <_malloc_r+0xc2>
 800416e:	1961      	adds	r1, r4, r5
 8004170:	42a3      	cmp	r3, r4
 8004172:	6025      	str	r5, [r4, #0]
 8004174:	bf18      	it	ne
 8004176:	6059      	strne	r1, [r3, #4]
 8004178:	6863      	ldr	r3, [r4, #4]
 800417a:	bf08      	it	eq
 800417c:	f8c8 1000 	streq.w	r1, [r8]
 8004180:	5162      	str	r2, [r4, r5]
 8004182:	604b      	str	r3, [r1, #4]
 8004184:	4630      	mov	r0, r6
 8004186:	f000 f82f 	bl	80041e8 <__malloc_unlock>
 800418a:	f104 000b 	add.w	r0, r4, #11
 800418e:	1d23      	adds	r3, r4, #4
 8004190:	f020 0007 	bic.w	r0, r0, #7
 8004194:	1ac2      	subs	r2, r0, r3
 8004196:	bf1c      	itt	ne
 8004198:	1a1b      	subne	r3, r3, r0
 800419a:	50a3      	strne	r3, [r4, r2]
 800419c:	e7af      	b.n	80040fe <_malloc_r+0x22>
 800419e:	6862      	ldr	r2, [r4, #4]
 80041a0:	42a3      	cmp	r3, r4
 80041a2:	bf0c      	ite	eq
 80041a4:	f8c8 2000 	streq.w	r2, [r8]
 80041a8:	605a      	strne	r2, [r3, #4]
 80041aa:	e7eb      	b.n	8004184 <_malloc_r+0xa8>
 80041ac:	4623      	mov	r3, r4
 80041ae:	6864      	ldr	r4, [r4, #4]
 80041b0:	e7ae      	b.n	8004110 <_malloc_r+0x34>
 80041b2:	463c      	mov	r4, r7
 80041b4:	687f      	ldr	r7, [r7, #4]
 80041b6:	e7b6      	b.n	8004126 <_malloc_r+0x4a>
 80041b8:	461a      	mov	r2, r3
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	42a3      	cmp	r3, r4
 80041be:	d1fb      	bne.n	80041b8 <_malloc_r+0xdc>
 80041c0:	2300      	movs	r3, #0
 80041c2:	6053      	str	r3, [r2, #4]
 80041c4:	e7de      	b.n	8004184 <_malloc_r+0xa8>
 80041c6:	230c      	movs	r3, #12
 80041c8:	6033      	str	r3, [r6, #0]
 80041ca:	4630      	mov	r0, r6
 80041cc:	f000 f80c 	bl	80041e8 <__malloc_unlock>
 80041d0:	e794      	b.n	80040fc <_malloc_r+0x20>
 80041d2:	6005      	str	r5, [r0, #0]
 80041d4:	e7d6      	b.n	8004184 <_malloc_r+0xa8>
 80041d6:	bf00      	nop
 80041d8:	200003c8 	.word	0x200003c8

080041dc <__malloc_lock>:
 80041dc:	4801      	ldr	r0, [pc, #4]	@ (80041e4 <__malloc_lock+0x8>)
 80041de:	f7ff bf0f 	b.w	8004000 <__retarget_lock_acquire_recursive>
 80041e2:	bf00      	nop
 80041e4:	200003c0 	.word	0x200003c0

080041e8 <__malloc_unlock>:
 80041e8:	4801      	ldr	r0, [pc, #4]	@ (80041f0 <__malloc_unlock+0x8>)
 80041ea:	f7ff bf0a 	b.w	8004002 <__retarget_lock_release_recursive>
 80041ee:	bf00      	nop
 80041f0:	200003c0 	.word	0x200003c0

080041f4 <__ssputs_r>:
 80041f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041f8:	688e      	ldr	r6, [r1, #8]
 80041fa:	461f      	mov	r7, r3
 80041fc:	42be      	cmp	r6, r7
 80041fe:	680b      	ldr	r3, [r1, #0]
 8004200:	4682      	mov	sl, r0
 8004202:	460c      	mov	r4, r1
 8004204:	4690      	mov	r8, r2
 8004206:	d82d      	bhi.n	8004264 <__ssputs_r+0x70>
 8004208:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800420c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004210:	d026      	beq.n	8004260 <__ssputs_r+0x6c>
 8004212:	6965      	ldr	r5, [r4, #20]
 8004214:	6909      	ldr	r1, [r1, #16]
 8004216:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800421a:	eba3 0901 	sub.w	r9, r3, r1
 800421e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004222:	1c7b      	adds	r3, r7, #1
 8004224:	444b      	add	r3, r9
 8004226:	106d      	asrs	r5, r5, #1
 8004228:	429d      	cmp	r5, r3
 800422a:	bf38      	it	cc
 800422c:	461d      	movcc	r5, r3
 800422e:	0553      	lsls	r3, r2, #21
 8004230:	d527      	bpl.n	8004282 <__ssputs_r+0x8e>
 8004232:	4629      	mov	r1, r5
 8004234:	f7ff ff52 	bl	80040dc <_malloc_r>
 8004238:	4606      	mov	r6, r0
 800423a:	b360      	cbz	r0, 8004296 <__ssputs_r+0xa2>
 800423c:	6921      	ldr	r1, [r4, #16]
 800423e:	464a      	mov	r2, r9
 8004240:	f000 fae6 	bl	8004810 <memcpy>
 8004244:	89a3      	ldrh	r3, [r4, #12]
 8004246:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800424a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800424e:	81a3      	strh	r3, [r4, #12]
 8004250:	6126      	str	r6, [r4, #16]
 8004252:	6165      	str	r5, [r4, #20]
 8004254:	444e      	add	r6, r9
 8004256:	eba5 0509 	sub.w	r5, r5, r9
 800425a:	6026      	str	r6, [r4, #0]
 800425c:	60a5      	str	r5, [r4, #8]
 800425e:	463e      	mov	r6, r7
 8004260:	42be      	cmp	r6, r7
 8004262:	d900      	bls.n	8004266 <__ssputs_r+0x72>
 8004264:	463e      	mov	r6, r7
 8004266:	6820      	ldr	r0, [r4, #0]
 8004268:	4632      	mov	r2, r6
 800426a:	4641      	mov	r1, r8
 800426c:	f000 faa6 	bl	80047bc <memmove>
 8004270:	68a3      	ldr	r3, [r4, #8]
 8004272:	1b9b      	subs	r3, r3, r6
 8004274:	60a3      	str	r3, [r4, #8]
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	4433      	add	r3, r6
 800427a:	6023      	str	r3, [r4, #0]
 800427c:	2000      	movs	r0, #0
 800427e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004282:	462a      	mov	r2, r5
 8004284:	f000 fad2 	bl	800482c <_realloc_r>
 8004288:	4606      	mov	r6, r0
 800428a:	2800      	cmp	r0, #0
 800428c:	d1e0      	bne.n	8004250 <__ssputs_r+0x5c>
 800428e:	6921      	ldr	r1, [r4, #16]
 8004290:	4650      	mov	r0, sl
 8004292:	f7ff feb7 	bl	8004004 <_free_r>
 8004296:	230c      	movs	r3, #12
 8004298:	f8ca 3000 	str.w	r3, [sl]
 800429c:	89a3      	ldrh	r3, [r4, #12]
 800429e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042a2:	81a3      	strh	r3, [r4, #12]
 80042a4:	f04f 30ff 	mov.w	r0, #4294967295
 80042a8:	e7e9      	b.n	800427e <__ssputs_r+0x8a>
	...

080042ac <_svfiprintf_r>:
 80042ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b0:	4698      	mov	r8, r3
 80042b2:	898b      	ldrh	r3, [r1, #12]
 80042b4:	061b      	lsls	r3, r3, #24
 80042b6:	b09d      	sub	sp, #116	@ 0x74
 80042b8:	4607      	mov	r7, r0
 80042ba:	460d      	mov	r5, r1
 80042bc:	4614      	mov	r4, r2
 80042be:	d510      	bpl.n	80042e2 <_svfiprintf_r+0x36>
 80042c0:	690b      	ldr	r3, [r1, #16]
 80042c2:	b973      	cbnz	r3, 80042e2 <_svfiprintf_r+0x36>
 80042c4:	2140      	movs	r1, #64	@ 0x40
 80042c6:	f7ff ff09 	bl	80040dc <_malloc_r>
 80042ca:	6028      	str	r0, [r5, #0]
 80042cc:	6128      	str	r0, [r5, #16]
 80042ce:	b930      	cbnz	r0, 80042de <_svfiprintf_r+0x32>
 80042d0:	230c      	movs	r3, #12
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	f04f 30ff 	mov.w	r0, #4294967295
 80042d8:	b01d      	add	sp, #116	@ 0x74
 80042da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042de:	2340      	movs	r3, #64	@ 0x40
 80042e0:	616b      	str	r3, [r5, #20]
 80042e2:	2300      	movs	r3, #0
 80042e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80042e6:	2320      	movs	r3, #32
 80042e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80042ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80042f0:	2330      	movs	r3, #48	@ 0x30
 80042f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004490 <_svfiprintf_r+0x1e4>
 80042f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80042fa:	f04f 0901 	mov.w	r9, #1
 80042fe:	4623      	mov	r3, r4
 8004300:	469a      	mov	sl, r3
 8004302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004306:	b10a      	cbz	r2, 800430c <_svfiprintf_r+0x60>
 8004308:	2a25      	cmp	r2, #37	@ 0x25
 800430a:	d1f9      	bne.n	8004300 <_svfiprintf_r+0x54>
 800430c:	ebba 0b04 	subs.w	fp, sl, r4
 8004310:	d00b      	beq.n	800432a <_svfiprintf_r+0x7e>
 8004312:	465b      	mov	r3, fp
 8004314:	4622      	mov	r2, r4
 8004316:	4629      	mov	r1, r5
 8004318:	4638      	mov	r0, r7
 800431a:	f7ff ff6b 	bl	80041f4 <__ssputs_r>
 800431e:	3001      	adds	r0, #1
 8004320:	f000 80a7 	beq.w	8004472 <_svfiprintf_r+0x1c6>
 8004324:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004326:	445a      	add	r2, fp
 8004328:	9209      	str	r2, [sp, #36]	@ 0x24
 800432a:	f89a 3000 	ldrb.w	r3, [sl]
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 809f 	beq.w	8004472 <_svfiprintf_r+0x1c6>
 8004334:	2300      	movs	r3, #0
 8004336:	f04f 32ff 	mov.w	r2, #4294967295
 800433a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800433e:	f10a 0a01 	add.w	sl, sl, #1
 8004342:	9304      	str	r3, [sp, #16]
 8004344:	9307      	str	r3, [sp, #28]
 8004346:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800434a:	931a      	str	r3, [sp, #104]	@ 0x68
 800434c:	4654      	mov	r4, sl
 800434e:	2205      	movs	r2, #5
 8004350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004354:	484e      	ldr	r0, [pc, #312]	@ (8004490 <_svfiprintf_r+0x1e4>)
 8004356:	f7fb ff53 	bl	8000200 <memchr>
 800435a:	9a04      	ldr	r2, [sp, #16]
 800435c:	b9d8      	cbnz	r0, 8004396 <_svfiprintf_r+0xea>
 800435e:	06d0      	lsls	r0, r2, #27
 8004360:	bf44      	itt	mi
 8004362:	2320      	movmi	r3, #32
 8004364:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004368:	0711      	lsls	r1, r2, #28
 800436a:	bf44      	itt	mi
 800436c:	232b      	movmi	r3, #43	@ 0x2b
 800436e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004372:	f89a 3000 	ldrb.w	r3, [sl]
 8004376:	2b2a      	cmp	r3, #42	@ 0x2a
 8004378:	d015      	beq.n	80043a6 <_svfiprintf_r+0xfa>
 800437a:	9a07      	ldr	r2, [sp, #28]
 800437c:	4654      	mov	r4, sl
 800437e:	2000      	movs	r0, #0
 8004380:	f04f 0c0a 	mov.w	ip, #10
 8004384:	4621      	mov	r1, r4
 8004386:	f811 3b01 	ldrb.w	r3, [r1], #1
 800438a:	3b30      	subs	r3, #48	@ 0x30
 800438c:	2b09      	cmp	r3, #9
 800438e:	d94b      	bls.n	8004428 <_svfiprintf_r+0x17c>
 8004390:	b1b0      	cbz	r0, 80043c0 <_svfiprintf_r+0x114>
 8004392:	9207      	str	r2, [sp, #28]
 8004394:	e014      	b.n	80043c0 <_svfiprintf_r+0x114>
 8004396:	eba0 0308 	sub.w	r3, r0, r8
 800439a:	fa09 f303 	lsl.w	r3, r9, r3
 800439e:	4313      	orrs	r3, r2
 80043a0:	9304      	str	r3, [sp, #16]
 80043a2:	46a2      	mov	sl, r4
 80043a4:	e7d2      	b.n	800434c <_svfiprintf_r+0xa0>
 80043a6:	9b03      	ldr	r3, [sp, #12]
 80043a8:	1d19      	adds	r1, r3, #4
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	9103      	str	r1, [sp, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	bfbb      	ittet	lt
 80043b2:	425b      	neglt	r3, r3
 80043b4:	f042 0202 	orrlt.w	r2, r2, #2
 80043b8:	9307      	strge	r3, [sp, #28]
 80043ba:	9307      	strlt	r3, [sp, #28]
 80043bc:	bfb8      	it	lt
 80043be:	9204      	strlt	r2, [sp, #16]
 80043c0:	7823      	ldrb	r3, [r4, #0]
 80043c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80043c4:	d10a      	bne.n	80043dc <_svfiprintf_r+0x130>
 80043c6:	7863      	ldrb	r3, [r4, #1]
 80043c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80043ca:	d132      	bne.n	8004432 <_svfiprintf_r+0x186>
 80043cc:	9b03      	ldr	r3, [sp, #12]
 80043ce:	1d1a      	adds	r2, r3, #4
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	9203      	str	r2, [sp, #12]
 80043d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80043d8:	3402      	adds	r4, #2
 80043da:	9305      	str	r3, [sp, #20]
 80043dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80044a0 <_svfiprintf_r+0x1f4>
 80043e0:	7821      	ldrb	r1, [r4, #0]
 80043e2:	2203      	movs	r2, #3
 80043e4:	4650      	mov	r0, sl
 80043e6:	f7fb ff0b 	bl	8000200 <memchr>
 80043ea:	b138      	cbz	r0, 80043fc <_svfiprintf_r+0x150>
 80043ec:	9b04      	ldr	r3, [sp, #16]
 80043ee:	eba0 000a 	sub.w	r0, r0, sl
 80043f2:	2240      	movs	r2, #64	@ 0x40
 80043f4:	4082      	lsls	r2, r0
 80043f6:	4313      	orrs	r3, r2
 80043f8:	3401      	adds	r4, #1
 80043fa:	9304      	str	r3, [sp, #16]
 80043fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004400:	4824      	ldr	r0, [pc, #144]	@ (8004494 <_svfiprintf_r+0x1e8>)
 8004402:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004406:	2206      	movs	r2, #6
 8004408:	f7fb fefa 	bl	8000200 <memchr>
 800440c:	2800      	cmp	r0, #0
 800440e:	d036      	beq.n	800447e <_svfiprintf_r+0x1d2>
 8004410:	4b21      	ldr	r3, [pc, #132]	@ (8004498 <_svfiprintf_r+0x1ec>)
 8004412:	bb1b      	cbnz	r3, 800445c <_svfiprintf_r+0x1b0>
 8004414:	9b03      	ldr	r3, [sp, #12]
 8004416:	3307      	adds	r3, #7
 8004418:	f023 0307 	bic.w	r3, r3, #7
 800441c:	3308      	adds	r3, #8
 800441e:	9303      	str	r3, [sp, #12]
 8004420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004422:	4433      	add	r3, r6
 8004424:	9309      	str	r3, [sp, #36]	@ 0x24
 8004426:	e76a      	b.n	80042fe <_svfiprintf_r+0x52>
 8004428:	fb0c 3202 	mla	r2, ip, r2, r3
 800442c:	460c      	mov	r4, r1
 800442e:	2001      	movs	r0, #1
 8004430:	e7a8      	b.n	8004384 <_svfiprintf_r+0xd8>
 8004432:	2300      	movs	r3, #0
 8004434:	3401      	adds	r4, #1
 8004436:	9305      	str	r3, [sp, #20]
 8004438:	4619      	mov	r1, r3
 800443a:	f04f 0c0a 	mov.w	ip, #10
 800443e:	4620      	mov	r0, r4
 8004440:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004444:	3a30      	subs	r2, #48	@ 0x30
 8004446:	2a09      	cmp	r2, #9
 8004448:	d903      	bls.n	8004452 <_svfiprintf_r+0x1a6>
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0c6      	beq.n	80043dc <_svfiprintf_r+0x130>
 800444e:	9105      	str	r1, [sp, #20]
 8004450:	e7c4      	b.n	80043dc <_svfiprintf_r+0x130>
 8004452:	fb0c 2101 	mla	r1, ip, r1, r2
 8004456:	4604      	mov	r4, r0
 8004458:	2301      	movs	r3, #1
 800445a:	e7f0      	b.n	800443e <_svfiprintf_r+0x192>
 800445c:	ab03      	add	r3, sp, #12
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	462a      	mov	r2, r5
 8004462:	4b0e      	ldr	r3, [pc, #56]	@ (800449c <_svfiprintf_r+0x1f0>)
 8004464:	a904      	add	r1, sp, #16
 8004466:	4638      	mov	r0, r7
 8004468:	f3af 8000 	nop.w
 800446c:	1c42      	adds	r2, r0, #1
 800446e:	4606      	mov	r6, r0
 8004470:	d1d6      	bne.n	8004420 <_svfiprintf_r+0x174>
 8004472:	89ab      	ldrh	r3, [r5, #12]
 8004474:	065b      	lsls	r3, r3, #25
 8004476:	f53f af2d 	bmi.w	80042d4 <_svfiprintf_r+0x28>
 800447a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800447c:	e72c      	b.n	80042d8 <_svfiprintf_r+0x2c>
 800447e:	ab03      	add	r3, sp, #12
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	462a      	mov	r2, r5
 8004484:	4b05      	ldr	r3, [pc, #20]	@ (800449c <_svfiprintf_r+0x1f0>)
 8004486:	a904      	add	r1, sp, #16
 8004488:	4638      	mov	r0, r7
 800448a:	f000 f879 	bl	8004580 <_printf_i>
 800448e:	e7ed      	b.n	800446c <_svfiprintf_r+0x1c0>
 8004490:	08004b60 	.word	0x08004b60
 8004494:	08004b6a 	.word	0x08004b6a
 8004498:	00000000 	.word	0x00000000
 800449c:	080041f5 	.word	0x080041f5
 80044a0:	08004b66 	.word	0x08004b66

080044a4 <_printf_common>:
 80044a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a8:	4616      	mov	r6, r2
 80044aa:	4698      	mov	r8, r3
 80044ac:	688a      	ldr	r2, [r1, #8]
 80044ae:	690b      	ldr	r3, [r1, #16]
 80044b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044b4:	4293      	cmp	r3, r2
 80044b6:	bfb8      	it	lt
 80044b8:	4613      	movlt	r3, r2
 80044ba:	6033      	str	r3, [r6, #0]
 80044bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80044c0:	4607      	mov	r7, r0
 80044c2:	460c      	mov	r4, r1
 80044c4:	b10a      	cbz	r2, 80044ca <_printf_common+0x26>
 80044c6:	3301      	adds	r3, #1
 80044c8:	6033      	str	r3, [r6, #0]
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	0699      	lsls	r1, r3, #26
 80044ce:	bf42      	ittt	mi
 80044d0:	6833      	ldrmi	r3, [r6, #0]
 80044d2:	3302      	addmi	r3, #2
 80044d4:	6033      	strmi	r3, [r6, #0]
 80044d6:	6825      	ldr	r5, [r4, #0]
 80044d8:	f015 0506 	ands.w	r5, r5, #6
 80044dc:	d106      	bne.n	80044ec <_printf_common+0x48>
 80044de:	f104 0a19 	add.w	sl, r4, #25
 80044e2:	68e3      	ldr	r3, [r4, #12]
 80044e4:	6832      	ldr	r2, [r6, #0]
 80044e6:	1a9b      	subs	r3, r3, r2
 80044e8:	42ab      	cmp	r3, r5
 80044ea:	dc26      	bgt.n	800453a <_printf_common+0x96>
 80044ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80044f0:	6822      	ldr	r2, [r4, #0]
 80044f2:	3b00      	subs	r3, #0
 80044f4:	bf18      	it	ne
 80044f6:	2301      	movne	r3, #1
 80044f8:	0692      	lsls	r2, r2, #26
 80044fa:	d42b      	bmi.n	8004554 <_printf_common+0xb0>
 80044fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004500:	4641      	mov	r1, r8
 8004502:	4638      	mov	r0, r7
 8004504:	47c8      	blx	r9
 8004506:	3001      	adds	r0, #1
 8004508:	d01e      	beq.n	8004548 <_printf_common+0xa4>
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	6922      	ldr	r2, [r4, #16]
 800450e:	f003 0306 	and.w	r3, r3, #6
 8004512:	2b04      	cmp	r3, #4
 8004514:	bf02      	ittt	eq
 8004516:	68e5      	ldreq	r5, [r4, #12]
 8004518:	6833      	ldreq	r3, [r6, #0]
 800451a:	1aed      	subeq	r5, r5, r3
 800451c:	68a3      	ldr	r3, [r4, #8]
 800451e:	bf0c      	ite	eq
 8004520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004524:	2500      	movne	r5, #0
 8004526:	4293      	cmp	r3, r2
 8004528:	bfc4      	itt	gt
 800452a:	1a9b      	subgt	r3, r3, r2
 800452c:	18ed      	addgt	r5, r5, r3
 800452e:	2600      	movs	r6, #0
 8004530:	341a      	adds	r4, #26
 8004532:	42b5      	cmp	r5, r6
 8004534:	d11a      	bne.n	800456c <_printf_common+0xc8>
 8004536:	2000      	movs	r0, #0
 8004538:	e008      	b.n	800454c <_printf_common+0xa8>
 800453a:	2301      	movs	r3, #1
 800453c:	4652      	mov	r2, sl
 800453e:	4641      	mov	r1, r8
 8004540:	4638      	mov	r0, r7
 8004542:	47c8      	blx	r9
 8004544:	3001      	adds	r0, #1
 8004546:	d103      	bne.n	8004550 <_printf_common+0xac>
 8004548:	f04f 30ff 	mov.w	r0, #4294967295
 800454c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004550:	3501      	adds	r5, #1
 8004552:	e7c6      	b.n	80044e2 <_printf_common+0x3e>
 8004554:	18e1      	adds	r1, r4, r3
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	2030      	movs	r0, #48	@ 0x30
 800455a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800455e:	4422      	add	r2, r4
 8004560:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004564:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004568:	3302      	adds	r3, #2
 800456a:	e7c7      	b.n	80044fc <_printf_common+0x58>
 800456c:	2301      	movs	r3, #1
 800456e:	4622      	mov	r2, r4
 8004570:	4641      	mov	r1, r8
 8004572:	4638      	mov	r0, r7
 8004574:	47c8      	blx	r9
 8004576:	3001      	adds	r0, #1
 8004578:	d0e6      	beq.n	8004548 <_printf_common+0xa4>
 800457a:	3601      	adds	r6, #1
 800457c:	e7d9      	b.n	8004532 <_printf_common+0x8e>
	...

08004580 <_printf_i>:
 8004580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004584:	7e0f      	ldrb	r7, [r1, #24]
 8004586:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004588:	2f78      	cmp	r7, #120	@ 0x78
 800458a:	4691      	mov	r9, r2
 800458c:	4680      	mov	r8, r0
 800458e:	460c      	mov	r4, r1
 8004590:	469a      	mov	sl, r3
 8004592:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004596:	d807      	bhi.n	80045a8 <_printf_i+0x28>
 8004598:	2f62      	cmp	r7, #98	@ 0x62
 800459a:	d80a      	bhi.n	80045b2 <_printf_i+0x32>
 800459c:	2f00      	cmp	r7, #0
 800459e:	f000 80d1 	beq.w	8004744 <_printf_i+0x1c4>
 80045a2:	2f58      	cmp	r7, #88	@ 0x58
 80045a4:	f000 80b8 	beq.w	8004718 <_printf_i+0x198>
 80045a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80045b0:	e03a      	b.n	8004628 <_printf_i+0xa8>
 80045b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80045b6:	2b15      	cmp	r3, #21
 80045b8:	d8f6      	bhi.n	80045a8 <_printf_i+0x28>
 80045ba:	a101      	add	r1, pc, #4	@ (adr r1, 80045c0 <_printf_i+0x40>)
 80045bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045c0:	08004619 	.word	0x08004619
 80045c4:	0800462d 	.word	0x0800462d
 80045c8:	080045a9 	.word	0x080045a9
 80045cc:	080045a9 	.word	0x080045a9
 80045d0:	080045a9 	.word	0x080045a9
 80045d4:	080045a9 	.word	0x080045a9
 80045d8:	0800462d 	.word	0x0800462d
 80045dc:	080045a9 	.word	0x080045a9
 80045e0:	080045a9 	.word	0x080045a9
 80045e4:	080045a9 	.word	0x080045a9
 80045e8:	080045a9 	.word	0x080045a9
 80045ec:	0800472b 	.word	0x0800472b
 80045f0:	08004657 	.word	0x08004657
 80045f4:	080046e5 	.word	0x080046e5
 80045f8:	080045a9 	.word	0x080045a9
 80045fc:	080045a9 	.word	0x080045a9
 8004600:	0800474d 	.word	0x0800474d
 8004604:	080045a9 	.word	0x080045a9
 8004608:	08004657 	.word	0x08004657
 800460c:	080045a9 	.word	0x080045a9
 8004610:	080045a9 	.word	0x080045a9
 8004614:	080046ed 	.word	0x080046ed
 8004618:	6833      	ldr	r3, [r6, #0]
 800461a:	1d1a      	adds	r2, r3, #4
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6032      	str	r2, [r6, #0]
 8004620:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004624:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004628:	2301      	movs	r3, #1
 800462a:	e09c      	b.n	8004766 <_printf_i+0x1e6>
 800462c:	6833      	ldr	r3, [r6, #0]
 800462e:	6820      	ldr	r0, [r4, #0]
 8004630:	1d19      	adds	r1, r3, #4
 8004632:	6031      	str	r1, [r6, #0]
 8004634:	0606      	lsls	r6, r0, #24
 8004636:	d501      	bpl.n	800463c <_printf_i+0xbc>
 8004638:	681d      	ldr	r5, [r3, #0]
 800463a:	e003      	b.n	8004644 <_printf_i+0xc4>
 800463c:	0645      	lsls	r5, r0, #25
 800463e:	d5fb      	bpl.n	8004638 <_printf_i+0xb8>
 8004640:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004644:	2d00      	cmp	r5, #0
 8004646:	da03      	bge.n	8004650 <_printf_i+0xd0>
 8004648:	232d      	movs	r3, #45	@ 0x2d
 800464a:	426d      	negs	r5, r5
 800464c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004650:	4858      	ldr	r0, [pc, #352]	@ (80047b4 <_printf_i+0x234>)
 8004652:	230a      	movs	r3, #10
 8004654:	e011      	b.n	800467a <_printf_i+0xfa>
 8004656:	6821      	ldr	r1, [r4, #0]
 8004658:	6833      	ldr	r3, [r6, #0]
 800465a:	0608      	lsls	r0, r1, #24
 800465c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004660:	d402      	bmi.n	8004668 <_printf_i+0xe8>
 8004662:	0649      	lsls	r1, r1, #25
 8004664:	bf48      	it	mi
 8004666:	b2ad      	uxthmi	r5, r5
 8004668:	2f6f      	cmp	r7, #111	@ 0x6f
 800466a:	4852      	ldr	r0, [pc, #328]	@ (80047b4 <_printf_i+0x234>)
 800466c:	6033      	str	r3, [r6, #0]
 800466e:	bf14      	ite	ne
 8004670:	230a      	movne	r3, #10
 8004672:	2308      	moveq	r3, #8
 8004674:	2100      	movs	r1, #0
 8004676:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800467a:	6866      	ldr	r6, [r4, #4]
 800467c:	60a6      	str	r6, [r4, #8]
 800467e:	2e00      	cmp	r6, #0
 8004680:	db05      	blt.n	800468e <_printf_i+0x10e>
 8004682:	6821      	ldr	r1, [r4, #0]
 8004684:	432e      	orrs	r6, r5
 8004686:	f021 0104 	bic.w	r1, r1, #4
 800468a:	6021      	str	r1, [r4, #0]
 800468c:	d04b      	beq.n	8004726 <_printf_i+0x1a6>
 800468e:	4616      	mov	r6, r2
 8004690:	fbb5 f1f3 	udiv	r1, r5, r3
 8004694:	fb03 5711 	mls	r7, r3, r1, r5
 8004698:	5dc7      	ldrb	r7, [r0, r7]
 800469a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800469e:	462f      	mov	r7, r5
 80046a0:	42bb      	cmp	r3, r7
 80046a2:	460d      	mov	r5, r1
 80046a4:	d9f4      	bls.n	8004690 <_printf_i+0x110>
 80046a6:	2b08      	cmp	r3, #8
 80046a8:	d10b      	bne.n	80046c2 <_printf_i+0x142>
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	07df      	lsls	r7, r3, #31
 80046ae:	d508      	bpl.n	80046c2 <_printf_i+0x142>
 80046b0:	6923      	ldr	r3, [r4, #16]
 80046b2:	6861      	ldr	r1, [r4, #4]
 80046b4:	4299      	cmp	r1, r3
 80046b6:	bfde      	ittt	le
 80046b8:	2330      	movle	r3, #48	@ 0x30
 80046ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046c2:	1b92      	subs	r2, r2, r6
 80046c4:	6122      	str	r2, [r4, #16]
 80046c6:	f8cd a000 	str.w	sl, [sp]
 80046ca:	464b      	mov	r3, r9
 80046cc:	aa03      	add	r2, sp, #12
 80046ce:	4621      	mov	r1, r4
 80046d0:	4640      	mov	r0, r8
 80046d2:	f7ff fee7 	bl	80044a4 <_printf_common>
 80046d6:	3001      	adds	r0, #1
 80046d8:	d14a      	bne.n	8004770 <_printf_i+0x1f0>
 80046da:	f04f 30ff 	mov.w	r0, #4294967295
 80046de:	b004      	add	sp, #16
 80046e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e4:	6823      	ldr	r3, [r4, #0]
 80046e6:	f043 0320 	orr.w	r3, r3, #32
 80046ea:	6023      	str	r3, [r4, #0]
 80046ec:	4832      	ldr	r0, [pc, #200]	@ (80047b8 <_printf_i+0x238>)
 80046ee:	2778      	movs	r7, #120	@ 0x78
 80046f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80046f4:	6823      	ldr	r3, [r4, #0]
 80046f6:	6831      	ldr	r1, [r6, #0]
 80046f8:	061f      	lsls	r7, r3, #24
 80046fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80046fe:	d402      	bmi.n	8004706 <_printf_i+0x186>
 8004700:	065f      	lsls	r7, r3, #25
 8004702:	bf48      	it	mi
 8004704:	b2ad      	uxthmi	r5, r5
 8004706:	6031      	str	r1, [r6, #0]
 8004708:	07d9      	lsls	r1, r3, #31
 800470a:	bf44      	itt	mi
 800470c:	f043 0320 	orrmi.w	r3, r3, #32
 8004710:	6023      	strmi	r3, [r4, #0]
 8004712:	b11d      	cbz	r5, 800471c <_printf_i+0x19c>
 8004714:	2310      	movs	r3, #16
 8004716:	e7ad      	b.n	8004674 <_printf_i+0xf4>
 8004718:	4826      	ldr	r0, [pc, #152]	@ (80047b4 <_printf_i+0x234>)
 800471a:	e7e9      	b.n	80046f0 <_printf_i+0x170>
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	f023 0320 	bic.w	r3, r3, #32
 8004722:	6023      	str	r3, [r4, #0]
 8004724:	e7f6      	b.n	8004714 <_printf_i+0x194>
 8004726:	4616      	mov	r6, r2
 8004728:	e7bd      	b.n	80046a6 <_printf_i+0x126>
 800472a:	6833      	ldr	r3, [r6, #0]
 800472c:	6825      	ldr	r5, [r4, #0]
 800472e:	6961      	ldr	r1, [r4, #20]
 8004730:	1d18      	adds	r0, r3, #4
 8004732:	6030      	str	r0, [r6, #0]
 8004734:	062e      	lsls	r6, r5, #24
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	d501      	bpl.n	800473e <_printf_i+0x1be>
 800473a:	6019      	str	r1, [r3, #0]
 800473c:	e002      	b.n	8004744 <_printf_i+0x1c4>
 800473e:	0668      	lsls	r0, r5, #25
 8004740:	d5fb      	bpl.n	800473a <_printf_i+0x1ba>
 8004742:	8019      	strh	r1, [r3, #0]
 8004744:	2300      	movs	r3, #0
 8004746:	6123      	str	r3, [r4, #16]
 8004748:	4616      	mov	r6, r2
 800474a:	e7bc      	b.n	80046c6 <_printf_i+0x146>
 800474c:	6833      	ldr	r3, [r6, #0]
 800474e:	1d1a      	adds	r2, r3, #4
 8004750:	6032      	str	r2, [r6, #0]
 8004752:	681e      	ldr	r6, [r3, #0]
 8004754:	6862      	ldr	r2, [r4, #4]
 8004756:	2100      	movs	r1, #0
 8004758:	4630      	mov	r0, r6
 800475a:	f7fb fd51 	bl	8000200 <memchr>
 800475e:	b108      	cbz	r0, 8004764 <_printf_i+0x1e4>
 8004760:	1b80      	subs	r0, r0, r6
 8004762:	6060      	str	r0, [r4, #4]
 8004764:	6863      	ldr	r3, [r4, #4]
 8004766:	6123      	str	r3, [r4, #16]
 8004768:	2300      	movs	r3, #0
 800476a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800476e:	e7aa      	b.n	80046c6 <_printf_i+0x146>
 8004770:	6923      	ldr	r3, [r4, #16]
 8004772:	4632      	mov	r2, r6
 8004774:	4649      	mov	r1, r9
 8004776:	4640      	mov	r0, r8
 8004778:	47d0      	blx	sl
 800477a:	3001      	adds	r0, #1
 800477c:	d0ad      	beq.n	80046da <_printf_i+0x15a>
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	079b      	lsls	r3, r3, #30
 8004782:	d413      	bmi.n	80047ac <_printf_i+0x22c>
 8004784:	68e0      	ldr	r0, [r4, #12]
 8004786:	9b03      	ldr	r3, [sp, #12]
 8004788:	4298      	cmp	r0, r3
 800478a:	bfb8      	it	lt
 800478c:	4618      	movlt	r0, r3
 800478e:	e7a6      	b.n	80046de <_printf_i+0x15e>
 8004790:	2301      	movs	r3, #1
 8004792:	4632      	mov	r2, r6
 8004794:	4649      	mov	r1, r9
 8004796:	4640      	mov	r0, r8
 8004798:	47d0      	blx	sl
 800479a:	3001      	adds	r0, #1
 800479c:	d09d      	beq.n	80046da <_printf_i+0x15a>
 800479e:	3501      	adds	r5, #1
 80047a0:	68e3      	ldr	r3, [r4, #12]
 80047a2:	9903      	ldr	r1, [sp, #12]
 80047a4:	1a5b      	subs	r3, r3, r1
 80047a6:	42ab      	cmp	r3, r5
 80047a8:	dcf2      	bgt.n	8004790 <_printf_i+0x210>
 80047aa:	e7eb      	b.n	8004784 <_printf_i+0x204>
 80047ac:	2500      	movs	r5, #0
 80047ae:	f104 0619 	add.w	r6, r4, #25
 80047b2:	e7f5      	b.n	80047a0 <_printf_i+0x220>
 80047b4:	08004b71 	.word	0x08004b71
 80047b8:	08004b82 	.word	0x08004b82

080047bc <memmove>:
 80047bc:	4288      	cmp	r0, r1
 80047be:	b510      	push	{r4, lr}
 80047c0:	eb01 0402 	add.w	r4, r1, r2
 80047c4:	d902      	bls.n	80047cc <memmove+0x10>
 80047c6:	4284      	cmp	r4, r0
 80047c8:	4623      	mov	r3, r4
 80047ca:	d807      	bhi.n	80047dc <memmove+0x20>
 80047cc:	1e43      	subs	r3, r0, #1
 80047ce:	42a1      	cmp	r1, r4
 80047d0:	d008      	beq.n	80047e4 <memmove+0x28>
 80047d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047da:	e7f8      	b.n	80047ce <memmove+0x12>
 80047dc:	4402      	add	r2, r0
 80047de:	4601      	mov	r1, r0
 80047e0:	428a      	cmp	r2, r1
 80047e2:	d100      	bne.n	80047e6 <memmove+0x2a>
 80047e4:	bd10      	pop	{r4, pc}
 80047e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047ee:	e7f7      	b.n	80047e0 <memmove+0x24>

080047f0 <_sbrk_r>:
 80047f0:	b538      	push	{r3, r4, r5, lr}
 80047f2:	4d06      	ldr	r5, [pc, #24]	@ (800480c <_sbrk_r+0x1c>)
 80047f4:	2300      	movs	r3, #0
 80047f6:	4604      	mov	r4, r0
 80047f8:	4608      	mov	r0, r1
 80047fa:	602b      	str	r3, [r5, #0]
 80047fc:	f7fc fc30 	bl	8001060 <_sbrk>
 8004800:	1c43      	adds	r3, r0, #1
 8004802:	d102      	bne.n	800480a <_sbrk_r+0x1a>
 8004804:	682b      	ldr	r3, [r5, #0]
 8004806:	b103      	cbz	r3, 800480a <_sbrk_r+0x1a>
 8004808:	6023      	str	r3, [r4, #0]
 800480a:	bd38      	pop	{r3, r4, r5, pc}
 800480c:	200003bc 	.word	0x200003bc

08004810 <memcpy>:
 8004810:	440a      	add	r2, r1
 8004812:	4291      	cmp	r1, r2
 8004814:	f100 33ff 	add.w	r3, r0, #4294967295
 8004818:	d100      	bne.n	800481c <memcpy+0xc>
 800481a:	4770      	bx	lr
 800481c:	b510      	push	{r4, lr}
 800481e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004822:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004826:	4291      	cmp	r1, r2
 8004828:	d1f9      	bne.n	800481e <memcpy+0xe>
 800482a:	bd10      	pop	{r4, pc}

0800482c <_realloc_r>:
 800482c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004830:	4607      	mov	r7, r0
 8004832:	4614      	mov	r4, r2
 8004834:	460d      	mov	r5, r1
 8004836:	b921      	cbnz	r1, 8004842 <_realloc_r+0x16>
 8004838:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800483c:	4611      	mov	r1, r2
 800483e:	f7ff bc4d 	b.w	80040dc <_malloc_r>
 8004842:	b92a      	cbnz	r2, 8004850 <_realloc_r+0x24>
 8004844:	f7ff fbde 	bl	8004004 <_free_r>
 8004848:	4625      	mov	r5, r4
 800484a:	4628      	mov	r0, r5
 800484c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004850:	f000 f81a 	bl	8004888 <_malloc_usable_size_r>
 8004854:	4284      	cmp	r4, r0
 8004856:	4606      	mov	r6, r0
 8004858:	d802      	bhi.n	8004860 <_realloc_r+0x34>
 800485a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800485e:	d8f4      	bhi.n	800484a <_realloc_r+0x1e>
 8004860:	4621      	mov	r1, r4
 8004862:	4638      	mov	r0, r7
 8004864:	f7ff fc3a 	bl	80040dc <_malloc_r>
 8004868:	4680      	mov	r8, r0
 800486a:	b908      	cbnz	r0, 8004870 <_realloc_r+0x44>
 800486c:	4645      	mov	r5, r8
 800486e:	e7ec      	b.n	800484a <_realloc_r+0x1e>
 8004870:	42b4      	cmp	r4, r6
 8004872:	4622      	mov	r2, r4
 8004874:	4629      	mov	r1, r5
 8004876:	bf28      	it	cs
 8004878:	4632      	movcs	r2, r6
 800487a:	f7ff ffc9 	bl	8004810 <memcpy>
 800487e:	4629      	mov	r1, r5
 8004880:	4638      	mov	r0, r7
 8004882:	f7ff fbbf 	bl	8004004 <_free_r>
 8004886:	e7f1      	b.n	800486c <_realloc_r+0x40>

08004888 <_malloc_usable_size_r>:
 8004888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800488c:	1f18      	subs	r0, r3, #4
 800488e:	2b00      	cmp	r3, #0
 8004890:	bfbc      	itt	lt
 8004892:	580b      	ldrlt	r3, [r1, r0]
 8004894:	18c0      	addlt	r0, r0, r3
 8004896:	4770      	bx	lr

08004898 <_init>:
 8004898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489a:	bf00      	nop
 800489c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489e:	bc08      	pop	{r3}
 80048a0:	469e      	mov	lr, r3
 80048a2:	4770      	bx	lr

080048a4 <_fini>:
 80048a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a6:	bf00      	nop
 80048a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048aa:	bc08      	pop	{r3}
 80048ac:	469e      	mov	lr, r3
 80048ae:	4770      	bx	lr
