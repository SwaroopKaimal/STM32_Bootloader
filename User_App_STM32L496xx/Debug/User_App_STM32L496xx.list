
User_App_STM32L496xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032a4  080081ac  080081ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800b450  0800b450  00004450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b498  0800b498  00005020  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b498  0800b498  00004498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4a0  0800b4a0  00005020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4a0  0800b4a0  000044a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b4a4  0800b4a4  000044a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  0800b4a8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000020  0800b4c8  00005020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  0800b4c8  00005150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a7d7  00000000  00000000  00005050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001783  00000000  00000000  0000f827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  00010fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006da  00000000  00000000  000118a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273ee  00000000  00000000  00011f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5af  00000000  00000000  00039368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2380  00000000  00000000  00043917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135c97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023c8  00000000  00000000  00135cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001380a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081ac <__do_global_dtors_aux>:
 80081ac:	b510      	push	{r4, lr}
 80081ae:	4c05      	ldr	r4, [pc, #20]	@ (80081c4 <__do_global_dtors_aux+0x18>)
 80081b0:	7823      	ldrb	r3, [r4, #0]
 80081b2:	b933      	cbnz	r3, 80081c2 <__do_global_dtors_aux+0x16>
 80081b4:	4b04      	ldr	r3, [pc, #16]	@ (80081c8 <__do_global_dtors_aux+0x1c>)
 80081b6:	b113      	cbz	r3, 80081be <__do_global_dtors_aux+0x12>
 80081b8:	4804      	ldr	r0, [pc, #16]	@ (80081cc <__do_global_dtors_aux+0x20>)
 80081ba:	f3af 8000 	nop.w
 80081be:	2301      	movs	r3, #1
 80081c0:	7023      	strb	r3, [r4, #0]
 80081c2:	bd10      	pop	{r4, pc}
 80081c4:	20000020 	.word	0x20000020
 80081c8:	00000000 	.word	0x00000000
 80081cc:	0800b438 	.word	0x0800b438

080081d0 <frame_dummy>:
 80081d0:	b508      	push	{r3, lr}
 80081d2:	4b03      	ldr	r3, [pc, #12]	@ (80081e0 <frame_dummy+0x10>)
 80081d4:	b11b      	cbz	r3, 80081de <frame_dummy+0xe>
 80081d6:	4903      	ldr	r1, [pc, #12]	@ (80081e4 <frame_dummy+0x14>)
 80081d8:	4803      	ldr	r0, [pc, #12]	@ (80081e8 <frame_dummy+0x18>)
 80081da:	f3af 8000 	nop.w
 80081de:	bd08      	pop	{r3, pc}
 80081e0:	00000000 	.word	0x00000000
 80081e4:	20000024 	.word	0x20000024
 80081e8:	0800b438 	.word	0x0800b438

080081ec <__aeabi_uldivmod>:
 80081ec:	b953      	cbnz	r3, 8008204 <__aeabi_uldivmod+0x18>
 80081ee:	b94a      	cbnz	r2, 8008204 <__aeabi_uldivmod+0x18>
 80081f0:	2900      	cmp	r1, #0
 80081f2:	bf08      	it	eq
 80081f4:	2800      	cmpeq	r0, #0
 80081f6:	bf1c      	itt	ne
 80081f8:	f04f 31ff 	movne.w	r1, #4294967295
 80081fc:	f04f 30ff 	movne.w	r0, #4294967295
 8008200:	f000 b988 	b.w	8008514 <__aeabi_idiv0>
 8008204:	f1ad 0c08 	sub.w	ip, sp, #8
 8008208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800820c:	f000 f806 	bl	800821c <__udivmoddi4>
 8008210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008218:	b004      	add	sp, #16
 800821a:	4770      	bx	lr

0800821c <__udivmoddi4>:
 800821c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008220:	9d08      	ldr	r5, [sp, #32]
 8008222:	468e      	mov	lr, r1
 8008224:	4604      	mov	r4, r0
 8008226:	4688      	mov	r8, r1
 8008228:	2b00      	cmp	r3, #0
 800822a:	d14a      	bne.n	80082c2 <__udivmoddi4+0xa6>
 800822c:	428a      	cmp	r2, r1
 800822e:	4617      	mov	r7, r2
 8008230:	d962      	bls.n	80082f8 <__udivmoddi4+0xdc>
 8008232:	fab2 f682 	clz	r6, r2
 8008236:	b14e      	cbz	r6, 800824c <__udivmoddi4+0x30>
 8008238:	f1c6 0320 	rsb	r3, r6, #32
 800823c:	fa01 f806 	lsl.w	r8, r1, r6
 8008240:	fa20 f303 	lsr.w	r3, r0, r3
 8008244:	40b7      	lsls	r7, r6
 8008246:	ea43 0808 	orr.w	r8, r3, r8
 800824a:	40b4      	lsls	r4, r6
 800824c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008250:	fa1f fc87 	uxth.w	ip, r7
 8008254:	fbb8 f1fe 	udiv	r1, r8, lr
 8008258:	0c23      	lsrs	r3, r4, #16
 800825a:	fb0e 8811 	mls	r8, lr, r1, r8
 800825e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008262:	fb01 f20c 	mul.w	r2, r1, ip
 8008266:	429a      	cmp	r2, r3
 8008268:	d909      	bls.n	800827e <__udivmoddi4+0x62>
 800826a:	18fb      	adds	r3, r7, r3
 800826c:	f101 30ff 	add.w	r0, r1, #4294967295
 8008270:	f080 80ea 	bcs.w	8008448 <__udivmoddi4+0x22c>
 8008274:	429a      	cmp	r2, r3
 8008276:	f240 80e7 	bls.w	8008448 <__udivmoddi4+0x22c>
 800827a:	3902      	subs	r1, #2
 800827c:	443b      	add	r3, r7
 800827e:	1a9a      	subs	r2, r3, r2
 8008280:	b2a3      	uxth	r3, r4
 8008282:	fbb2 f0fe 	udiv	r0, r2, lr
 8008286:	fb0e 2210 	mls	r2, lr, r0, r2
 800828a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800828e:	fb00 fc0c 	mul.w	ip, r0, ip
 8008292:	459c      	cmp	ip, r3
 8008294:	d909      	bls.n	80082aa <__udivmoddi4+0x8e>
 8008296:	18fb      	adds	r3, r7, r3
 8008298:	f100 32ff 	add.w	r2, r0, #4294967295
 800829c:	f080 80d6 	bcs.w	800844c <__udivmoddi4+0x230>
 80082a0:	459c      	cmp	ip, r3
 80082a2:	f240 80d3 	bls.w	800844c <__udivmoddi4+0x230>
 80082a6:	443b      	add	r3, r7
 80082a8:	3802      	subs	r0, #2
 80082aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80082ae:	eba3 030c 	sub.w	r3, r3, ip
 80082b2:	2100      	movs	r1, #0
 80082b4:	b11d      	cbz	r5, 80082be <__udivmoddi4+0xa2>
 80082b6:	40f3      	lsrs	r3, r6
 80082b8:	2200      	movs	r2, #0
 80082ba:	e9c5 3200 	strd	r3, r2, [r5]
 80082be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c2:	428b      	cmp	r3, r1
 80082c4:	d905      	bls.n	80082d2 <__udivmoddi4+0xb6>
 80082c6:	b10d      	cbz	r5, 80082cc <__udivmoddi4+0xb0>
 80082c8:	e9c5 0100 	strd	r0, r1, [r5]
 80082cc:	2100      	movs	r1, #0
 80082ce:	4608      	mov	r0, r1
 80082d0:	e7f5      	b.n	80082be <__udivmoddi4+0xa2>
 80082d2:	fab3 f183 	clz	r1, r3
 80082d6:	2900      	cmp	r1, #0
 80082d8:	d146      	bne.n	8008368 <__udivmoddi4+0x14c>
 80082da:	4573      	cmp	r3, lr
 80082dc:	d302      	bcc.n	80082e4 <__udivmoddi4+0xc8>
 80082de:	4282      	cmp	r2, r0
 80082e0:	f200 8105 	bhi.w	80084ee <__udivmoddi4+0x2d2>
 80082e4:	1a84      	subs	r4, r0, r2
 80082e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80082ea:	2001      	movs	r0, #1
 80082ec:	4690      	mov	r8, r2
 80082ee:	2d00      	cmp	r5, #0
 80082f0:	d0e5      	beq.n	80082be <__udivmoddi4+0xa2>
 80082f2:	e9c5 4800 	strd	r4, r8, [r5]
 80082f6:	e7e2      	b.n	80082be <__udivmoddi4+0xa2>
 80082f8:	2a00      	cmp	r2, #0
 80082fa:	f000 8090 	beq.w	800841e <__udivmoddi4+0x202>
 80082fe:	fab2 f682 	clz	r6, r2
 8008302:	2e00      	cmp	r6, #0
 8008304:	f040 80a4 	bne.w	8008450 <__udivmoddi4+0x234>
 8008308:	1a8a      	subs	r2, r1, r2
 800830a:	0c03      	lsrs	r3, r0, #16
 800830c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008310:	b280      	uxth	r0, r0
 8008312:	b2bc      	uxth	r4, r7
 8008314:	2101      	movs	r1, #1
 8008316:	fbb2 fcfe 	udiv	ip, r2, lr
 800831a:	fb0e 221c 	mls	r2, lr, ip, r2
 800831e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008322:	fb04 f20c 	mul.w	r2, r4, ip
 8008326:	429a      	cmp	r2, r3
 8008328:	d907      	bls.n	800833a <__udivmoddi4+0x11e>
 800832a:	18fb      	adds	r3, r7, r3
 800832c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8008330:	d202      	bcs.n	8008338 <__udivmoddi4+0x11c>
 8008332:	429a      	cmp	r2, r3
 8008334:	f200 80e0 	bhi.w	80084f8 <__udivmoddi4+0x2dc>
 8008338:	46c4      	mov	ip, r8
 800833a:	1a9b      	subs	r3, r3, r2
 800833c:	fbb3 f2fe 	udiv	r2, r3, lr
 8008340:	fb0e 3312 	mls	r3, lr, r2, r3
 8008344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8008348:	fb02 f404 	mul.w	r4, r2, r4
 800834c:	429c      	cmp	r4, r3
 800834e:	d907      	bls.n	8008360 <__udivmoddi4+0x144>
 8008350:	18fb      	adds	r3, r7, r3
 8008352:	f102 30ff 	add.w	r0, r2, #4294967295
 8008356:	d202      	bcs.n	800835e <__udivmoddi4+0x142>
 8008358:	429c      	cmp	r4, r3
 800835a:	f200 80ca 	bhi.w	80084f2 <__udivmoddi4+0x2d6>
 800835e:	4602      	mov	r2, r0
 8008360:	1b1b      	subs	r3, r3, r4
 8008362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8008366:	e7a5      	b.n	80082b4 <__udivmoddi4+0x98>
 8008368:	f1c1 0620 	rsb	r6, r1, #32
 800836c:	408b      	lsls	r3, r1
 800836e:	fa22 f706 	lsr.w	r7, r2, r6
 8008372:	431f      	orrs	r7, r3
 8008374:	fa0e f401 	lsl.w	r4, lr, r1
 8008378:	fa20 f306 	lsr.w	r3, r0, r6
 800837c:	fa2e fe06 	lsr.w	lr, lr, r6
 8008380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8008384:	4323      	orrs	r3, r4
 8008386:	fa00 f801 	lsl.w	r8, r0, r1
 800838a:	fa1f fc87 	uxth.w	ip, r7
 800838e:	fbbe f0f9 	udiv	r0, lr, r9
 8008392:	0c1c      	lsrs	r4, r3, #16
 8008394:	fb09 ee10 	mls	lr, r9, r0, lr
 8008398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800839c:	fb00 fe0c 	mul.w	lr, r0, ip
 80083a0:	45a6      	cmp	lr, r4
 80083a2:	fa02 f201 	lsl.w	r2, r2, r1
 80083a6:	d909      	bls.n	80083bc <__udivmoddi4+0x1a0>
 80083a8:	193c      	adds	r4, r7, r4
 80083aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80083ae:	f080 809c 	bcs.w	80084ea <__udivmoddi4+0x2ce>
 80083b2:	45a6      	cmp	lr, r4
 80083b4:	f240 8099 	bls.w	80084ea <__udivmoddi4+0x2ce>
 80083b8:	3802      	subs	r0, #2
 80083ba:	443c      	add	r4, r7
 80083bc:	eba4 040e 	sub.w	r4, r4, lr
 80083c0:	fa1f fe83 	uxth.w	lr, r3
 80083c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80083c8:	fb09 4413 	mls	r4, r9, r3, r4
 80083cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80083d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80083d4:	45a4      	cmp	ip, r4
 80083d6:	d908      	bls.n	80083ea <__udivmoddi4+0x1ce>
 80083d8:	193c      	adds	r4, r7, r4
 80083da:	f103 3eff 	add.w	lr, r3, #4294967295
 80083de:	f080 8082 	bcs.w	80084e6 <__udivmoddi4+0x2ca>
 80083e2:	45a4      	cmp	ip, r4
 80083e4:	d97f      	bls.n	80084e6 <__udivmoddi4+0x2ca>
 80083e6:	3b02      	subs	r3, #2
 80083e8:	443c      	add	r4, r7
 80083ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80083ee:	eba4 040c 	sub.w	r4, r4, ip
 80083f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80083f6:	4564      	cmp	r4, ip
 80083f8:	4673      	mov	r3, lr
 80083fa:	46e1      	mov	r9, ip
 80083fc:	d362      	bcc.n	80084c4 <__udivmoddi4+0x2a8>
 80083fe:	d05f      	beq.n	80084c0 <__udivmoddi4+0x2a4>
 8008400:	b15d      	cbz	r5, 800841a <__udivmoddi4+0x1fe>
 8008402:	ebb8 0203 	subs.w	r2, r8, r3
 8008406:	eb64 0409 	sbc.w	r4, r4, r9
 800840a:	fa04 f606 	lsl.w	r6, r4, r6
 800840e:	fa22 f301 	lsr.w	r3, r2, r1
 8008412:	431e      	orrs	r6, r3
 8008414:	40cc      	lsrs	r4, r1
 8008416:	e9c5 6400 	strd	r6, r4, [r5]
 800841a:	2100      	movs	r1, #0
 800841c:	e74f      	b.n	80082be <__udivmoddi4+0xa2>
 800841e:	fbb1 fcf2 	udiv	ip, r1, r2
 8008422:	0c01      	lsrs	r1, r0, #16
 8008424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8008428:	b280      	uxth	r0, r0
 800842a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800842e:	463b      	mov	r3, r7
 8008430:	4638      	mov	r0, r7
 8008432:	463c      	mov	r4, r7
 8008434:	46b8      	mov	r8, r7
 8008436:	46be      	mov	lr, r7
 8008438:	2620      	movs	r6, #32
 800843a:	fbb1 f1f7 	udiv	r1, r1, r7
 800843e:	eba2 0208 	sub.w	r2, r2, r8
 8008442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8008446:	e766      	b.n	8008316 <__udivmoddi4+0xfa>
 8008448:	4601      	mov	r1, r0
 800844a:	e718      	b.n	800827e <__udivmoddi4+0x62>
 800844c:	4610      	mov	r0, r2
 800844e:	e72c      	b.n	80082aa <__udivmoddi4+0x8e>
 8008450:	f1c6 0220 	rsb	r2, r6, #32
 8008454:	fa2e f302 	lsr.w	r3, lr, r2
 8008458:	40b7      	lsls	r7, r6
 800845a:	40b1      	lsls	r1, r6
 800845c:	fa20 f202 	lsr.w	r2, r0, r2
 8008460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008464:	430a      	orrs	r2, r1
 8008466:	fbb3 f8fe 	udiv	r8, r3, lr
 800846a:	b2bc      	uxth	r4, r7
 800846c:	fb0e 3318 	mls	r3, lr, r8, r3
 8008470:	0c11      	lsrs	r1, r2, #16
 8008472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008476:	fb08 f904 	mul.w	r9, r8, r4
 800847a:	40b0      	lsls	r0, r6
 800847c:	4589      	cmp	r9, r1
 800847e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8008482:	b280      	uxth	r0, r0
 8008484:	d93e      	bls.n	8008504 <__udivmoddi4+0x2e8>
 8008486:	1879      	adds	r1, r7, r1
 8008488:	f108 3cff 	add.w	ip, r8, #4294967295
 800848c:	d201      	bcs.n	8008492 <__udivmoddi4+0x276>
 800848e:	4589      	cmp	r9, r1
 8008490:	d81f      	bhi.n	80084d2 <__udivmoddi4+0x2b6>
 8008492:	eba1 0109 	sub.w	r1, r1, r9
 8008496:	fbb1 f9fe 	udiv	r9, r1, lr
 800849a:	fb09 f804 	mul.w	r8, r9, r4
 800849e:	fb0e 1119 	mls	r1, lr, r9, r1
 80084a2:	b292      	uxth	r2, r2
 80084a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80084a8:	4542      	cmp	r2, r8
 80084aa:	d229      	bcs.n	8008500 <__udivmoddi4+0x2e4>
 80084ac:	18ba      	adds	r2, r7, r2
 80084ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80084b2:	d2c4      	bcs.n	800843e <__udivmoddi4+0x222>
 80084b4:	4542      	cmp	r2, r8
 80084b6:	d2c2      	bcs.n	800843e <__udivmoddi4+0x222>
 80084b8:	f1a9 0102 	sub.w	r1, r9, #2
 80084bc:	443a      	add	r2, r7
 80084be:	e7be      	b.n	800843e <__udivmoddi4+0x222>
 80084c0:	45f0      	cmp	r8, lr
 80084c2:	d29d      	bcs.n	8008400 <__udivmoddi4+0x1e4>
 80084c4:	ebbe 0302 	subs.w	r3, lr, r2
 80084c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80084cc:	3801      	subs	r0, #1
 80084ce:	46e1      	mov	r9, ip
 80084d0:	e796      	b.n	8008400 <__udivmoddi4+0x1e4>
 80084d2:	eba7 0909 	sub.w	r9, r7, r9
 80084d6:	4449      	add	r1, r9
 80084d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80084dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80084e0:	fb09 f804 	mul.w	r8, r9, r4
 80084e4:	e7db      	b.n	800849e <__udivmoddi4+0x282>
 80084e6:	4673      	mov	r3, lr
 80084e8:	e77f      	b.n	80083ea <__udivmoddi4+0x1ce>
 80084ea:	4650      	mov	r0, sl
 80084ec:	e766      	b.n	80083bc <__udivmoddi4+0x1a0>
 80084ee:	4608      	mov	r0, r1
 80084f0:	e6fd      	b.n	80082ee <__udivmoddi4+0xd2>
 80084f2:	443b      	add	r3, r7
 80084f4:	3a02      	subs	r2, #2
 80084f6:	e733      	b.n	8008360 <__udivmoddi4+0x144>
 80084f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80084fc:	443b      	add	r3, r7
 80084fe:	e71c      	b.n	800833a <__udivmoddi4+0x11e>
 8008500:	4649      	mov	r1, r9
 8008502:	e79c      	b.n	800843e <__udivmoddi4+0x222>
 8008504:	eba1 0109 	sub.w	r1, r1, r9
 8008508:	46c4      	mov	ip, r8
 800850a:	fbb1 f9fe 	udiv	r9, r1, lr
 800850e:	fb09 f804 	mul.w	r8, r9, r4
 8008512:	e7c4      	b.n	800849e <__udivmoddi4+0x282>

08008514 <__aeabi_idiv0>:
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop

08008518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800851c:	f000 fabf 	bl	8008a9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008520:	f000 f818 	bl	8008554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008524:	f000 f8c6 	bl	80086b4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8008528:	f000 f868 	bl	80085fc <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 800852c:	f000 f892 	bl	8008654 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart2, user_data, sizeof(user_data), HAL_MAX_DELAY);
 8008530:	f04f 33ff 	mov.w	r3, #4294967295
 8008534:	2212      	movs	r2, #18
 8008536:	4905      	ldr	r1, [pc, #20]	@ (800854c <main+0x34>)
 8008538:	4805      	ldr	r0, [pc, #20]	@ (8008550 <main+0x38>)
 800853a:	f002 f9f3 	bl	800a924 <HAL_UART_Transmit>
	  HAL_Delay(3000);
 800853e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8008542:	f000 fb21 	bl	8008b88 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, user_data, sizeof(user_data), HAL_MAX_DELAY);
 8008546:	bf00      	nop
 8008548:	e7f2      	b.n	8008530 <main+0x18>
 800854a:	bf00      	nop
 800854c:	20000000 	.word	0x20000000
 8008550:	200000c4 	.word	0x200000c4

08008554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b096      	sub	sp, #88	@ 0x58
 8008558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800855a:	f107 0314 	add.w	r3, r7, #20
 800855e:	2244      	movs	r2, #68	@ 0x44
 8008560:	2100      	movs	r1, #0
 8008562:	4618      	mov	r0, r3
 8008564:	f002 ff3b 	bl	800b3de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008568:	463b      	mov	r3, r7
 800856a:	2200      	movs	r2, #0
 800856c:	601a      	str	r2, [r3, #0]
 800856e:	605a      	str	r2, [r3, #4]
 8008570:	609a      	str	r2, [r3, #8]
 8008572:	60da      	str	r2, [r3, #12]
 8008574:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8008576:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800857a:	f000 fe17 	bl	80091ac <HAL_PWREx_ControlVoltageScaling>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8008584:	f000 f94a 	bl	800881c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8008588:	2310      	movs	r3, #16
 800858a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800858c:	2301      	movs	r3, #1
 800858e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8008590:	2300      	movs	r3, #0
 8008592:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8008594:	2360      	movs	r3, #96	@ 0x60
 8008596:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008598:	2302      	movs	r3, #2
 800859a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800859c:	2301      	movs	r3, #1
 800859e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80085a0:	2301      	movs	r3, #1
 80085a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80085a4:	2328      	movs	r3, #40	@ 0x28
 80085a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80085a8:	2302      	movs	r3, #2
 80085aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80085ac:	2302      	movs	r3, #2
 80085ae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80085b0:	2302      	movs	r3, #2
 80085b2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80085b4:	f107 0314 	add.w	r3, r7, #20
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 fe5d 	bl	8009278 <HAL_RCC_OscConfig>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d001      	beq.n	80085c8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80085c4:	f000 f92a 	bl	800881c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80085c8:	230f      	movs	r3, #15
 80085ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80085cc:	2303      	movs	r3, #3
 80085ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80085d0:	2300      	movs	r3, #0
 80085d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80085d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80085da:	2300      	movs	r3, #0
 80085dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80085de:	463b      	mov	r3, r7
 80085e0:	2104      	movs	r1, #4
 80085e2:	4618      	mov	r0, r3
 80085e4:	f001 fa62 	bl	8009aac <HAL_RCC_ClockConfig>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d001      	beq.n	80085f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80085ee:	f000 f915 	bl	800881c <Error_Handler>
  }
}
 80085f2:	bf00      	nop
 80085f4:	3758      	adds	r7, #88	@ 0x58
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
	...

080085fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8008600:	4b12      	ldr	r3, [pc, #72]	@ (800864c <MX_LPUART1_UART_Init+0x50>)
 8008602:	4a13      	ldr	r2, [pc, #76]	@ (8008650 <MX_LPUART1_UART_Init+0x54>)
 8008604:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8008606:	4b11      	ldr	r3, [pc, #68]	@ (800864c <MX_LPUART1_UART_Init+0x50>)
 8008608:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800860c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800860e:	4b0f      	ldr	r3, [pc, #60]	@ (800864c <MX_LPUART1_UART_Init+0x50>)
 8008610:	2200      	movs	r2, #0
 8008612:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8008614:	4b0d      	ldr	r3, [pc, #52]	@ (800864c <MX_LPUART1_UART_Init+0x50>)
 8008616:	2200      	movs	r2, #0
 8008618:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800861a:	4b0c      	ldr	r3, [pc, #48]	@ (800864c <MX_LPUART1_UART_Init+0x50>)
 800861c:	2200      	movs	r2, #0
 800861e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8008620:	4b0a      	ldr	r3, [pc, #40]	@ (800864c <MX_LPUART1_UART_Init+0x50>)
 8008622:	220c      	movs	r2, #12
 8008624:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008626:	4b09      	ldr	r3, [pc, #36]	@ (800864c <MX_LPUART1_UART_Init+0x50>)
 8008628:	2200      	movs	r2, #0
 800862a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800862c:	4b07      	ldr	r3, [pc, #28]	@ (800864c <MX_LPUART1_UART_Init+0x50>)
 800862e:	2200      	movs	r2, #0
 8008630:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008632:	4b06      	ldr	r3, [pc, #24]	@ (800864c <MX_LPUART1_UART_Init+0x50>)
 8008634:	2200      	movs	r2, #0
 8008636:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8008638:	4804      	ldr	r0, [pc, #16]	@ (800864c <MX_LPUART1_UART_Init+0x50>)
 800863a:	f002 f925 	bl	800a888 <HAL_UART_Init>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8008644:	f000 f8ea 	bl	800881c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8008648:	bf00      	nop
 800864a:	bd80      	pop	{r7, pc}
 800864c:	2000003c 	.word	0x2000003c
 8008650:	40008000 	.word	0x40008000

08008654 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008658:	4b14      	ldr	r3, [pc, #80]	@ (80086ac <MX_USART2_UART_Init+0x58>)
 800865a:	4a15      	ldr	r2, [pc, #84]	@ (80086b0 <MX_USART2_UART_Init+0x5c>)
 800865c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800865e:	4b13      	ldr	r3, [pc, #76]	@ (80086ac <MX_USART2_UART_Init+0x58>)
 8008660:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008664:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008666:	4b11      	ldr	r3, [pc, #68]	@ (80086ac <MX_USART2_UART_Init+0x58>)
 8008668:	2200      	movs	r2, #0
 800866a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800866c:	4b0f      	ldr	r3, [pc, #60]	@ (80086ac <MX_USART2_UART_Init+0x58>)
 800866e:	2200      	movs	r2, #0
 8008670:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008672:	4b0e      	ldr	r3, [pc, #56]	@ (80086ac <MX_USART2_UART_Init+0x58>)
 8008674:	2200      	movs	r2, #0
 8008676:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008678:	4b0c      	ldr	r3, [pc, #48]	@ (80086ac <MX_USART2_UART_Init+0x58>)
 800867a:	220c      	movs	r2, #12
 800867c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800867e:	4b0b      	ldr	r3, [pc, #44]	@ (80086ac <MX_USART2_UART_Init+0x58>)
 8008680:	2200      	movs	r2, #0
 8008682:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008684:	4b09      	ldr	r3, [pc, #36]	@ (80086ac <MX_USART2_UART_Init+0x58>)
 8008686:	2200      	movs	r2, #0
 8008688:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800868a:	4b08      	ldr	r3, [pc, #32]	@ (80086ac <MX_USART2_UART_Init+0x58>)
 800868c:	2200      	movs	r2, #0
 800868e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008690:	4b06      	ldr	r3, [pc, #24]	@ (80086ac <MX_USART2_UART_Init+0x58>)
 8008692:	2200      	movs	r2, #0
 8008694:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008696:	4805      	ldr	r0, [pc, #20]	@ (80086ac <MX_USART2_UART_Init+0x58>)
 8008698:	f002 f8f6 	bl	800a888 <HAL_UART_Init>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d001      	beq.n	80086a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80086a2:	f000 f8bb 	bl	800881c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80086a6:	bf00      	nop
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	200000c4 	.word	0x200000c4
 80086b0:	40004400 	.word	0x40004400

080086b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b08a      	sub	sp, #40	@ 0x28
 80086b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086ba:	f107 0314 	add.w	r3, r7, #20
 80086be:	2200      	movs	r2, #0
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	605a      	str	r2, [r3, #4]
 80086c4:	609a      	str	r2, [r3, #8]
 80086c6:	60da      	str	r2, [r3, #12]
 80086c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80086ca:	4b50      	ldr	r3, [pc, #320]	@ (800880c <MX_GPIO_Init+0x158>)
 80086cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086ce:	4a4f      	ldr	r2, [pc, #316]	@ (800880c <MX_GPIO_Init+0x158>)
 80086d0:	f043 0304 	orr.w	r3, r3, #4
 80086d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80086d6:	4b4d      	ldr	r3, [pc, #308]	@ (800880c <MX_GPIO_Init+0x158>)
 80086d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086da:	f003 0304 	and.w	r3, r3, #4
 80086de:	613b      	str	r3, [r7, #16]
 80086e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80086e2:	4b4a      	ldr	r3, [pc, #296]	@ (800880c <MX_GPIO_Init+0x158>)
 80086e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086e6:	4a49      	ldr	r2, [pc, #292]	@ (800880c <MX_GPIO_Init+0x158>)
 80086e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80086ee:	4b47      	ldr	r3, [pc, #284]	@ (800880c <MX_GPIO_Init+0x158>)
 80086f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086f6:	60fb      	str	r3, [r7, #12]
 80086f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80086fa:	4b44      	ldr	r3, [pc, #272]	@ (800880c <MX_GPIO_Init+0x158>)
 80086fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086fe:	4a43      	ldr	r2, [pc, #268]	@ (800880c <MX_GPIO_Init+0x158>)
 8008700:	f043 0301 	orr.w	r3, r3, #1
 8008704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008706:	4b41      	ldr	r3, [pc, #260]	@ (800880c <MX_GPIO_Init+0x158>)
 8008708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	60bb      	str	r3, [r7, #8]
 8008710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008712:	4b3e      	ldr	r3, [pc, #248]	@ (800880c <MX_GPIO_Init+0x158>)
 8008714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008716:	4a3d      	ldr	r2, [pc, #244]	@ (800880c <MX_GPIO_Init+0x158>)
 8008718:	f043 0302 	orr.w	r3, r3, #2
 800871c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800871e:	4b3b      	ldr	r3, [pc, #236]	@ (800880c <MX_GPIO_Init+0x158>)
 8008720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008722:	f003 0302 	and.w	r3, r3, #2
 8008726:	607b      	str	r3, [r7, #4]
 8008728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800872a:	4b38      	ldr	r3, [pc, #224]	@ (800880c <MX_GPIO_Init+0x158>)
 800872c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800872e:	4a37      	ldr	r2, [pc, #220]	@ (800880c <MX_GPIO_Init+0x158>)
 8008730:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008734:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008736:	4b35      	ldr	r3, [pc, #212]	@ (800880c <MX_GPIO_Init+0x158>)
 8008738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800873a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800873e:	603b      	str	r3, [r7, #0]
 8008740:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8008742:	f000 fd89 	bl	8009258 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8008746:	2200      	movs	r2, #0
 8008748:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 800874c:	4830      	ldr	r0, [pc, #192]	@ (8008810 <MX_GPIO_Init+0x15c>)
 800874e:	f000 fce3 	bl	8009118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8008752:	2200      	movs	r2, #0
 8008754:	f44f 5131 	mov.w	r1, #11328	@ 0x2c40
 8008758:	482e      	ldr	r0, [pc, #184]	@ (8008814 <MX_GPIO_Init+0x160>)
 800875a:	f000 fcdd 	bl	8009118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800875e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008764:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8008768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800876a:	2300      	movs	r3, #0
 800876c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800876e:	f107 0314 	add.w	r3, r7, #20
 8008772:	4619      	mov	r1, r3
 8008774:	4828      	ldr	r0, [pc, #160]	@ (8008818 <MX_GPIO_Init+0x164>)
 8008776:	f000 fb3d 	bl	8008df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800877a:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800877e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008780:	2301      	movs	r3, #1
 8008782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008784:	2300      	movs	r3, #0
 8008786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008788:	2300      	movs	r3, #0
 800878a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800878c:	f107 0314 	add.w	r3, r7, #20
 8008790:	4619      	mov	r1, r3
 8008792:	481f      	ldr	r0, [pc, #124]	@ (8008810 <MX_GPIO_Init+0x15c>)
 8008794:	f000 fb2e 	bl	8008df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 8008798:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 800879c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800879e:	2300      	movs	r3, #0
 80087a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087a2:	2300      	movs	r3, #0
 80087a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80087a6:	f107 0314 	add.w	r3, r7, #20
 80087aa:	4619      	mov	r1, r3
 80087ac:	4819      	ldr	r0, [pc, #100]	@ (8008814 <MX_GPIO_Init+0x160>)
 80087ae:	f000 fb21 	bl	8008df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 80087b2:	f44f 5331 	mov.w	r3, #11328	@ 0x2c40
 80087b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80087b8:	2301      	movs	r3, #1
 80087ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087bc:	2300      	movs	r3, #0
 80087be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087c0:	2300      	movs	r3, #0
 80087c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80087c4:	f107 0314 	add.w	r3, r7, #20
 80087c8:	4619      	mov	r1, r3
 80087ca:	4812      	ldr	r0, [pc, #72]	@ (8008814 <MX_GPIO_Init+0x160>)
 80087cc:	f000 fb12 	bl	8008df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80087d0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80087d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087d6:	2302      	movs	r3, #2
 80087d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087da:	2300      	movs	r3, #0
 80087dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087de:	2303      	movs	r3, #3
 80087e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80087e2:	230a      	movs	r3, #10
 80087e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087e6:	f107 0314 	add.w	r3, r7, #20
 80087ea:	4619      	mov	r1, r3
 80087ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80087f0:	f000 fb00 	bl	8008df4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80087f4:	2200      	movs	r2, #0
 80087f6:	2100      	movs	r1, #0
 80087f8:	2028      	movs	r0, #40	@ 0x28
 80087fa:	f000 fac4 	bl	8008d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80087fe:	2028      	movs	r0, #40	@ 0x28
 8008800:	f000 fadd 	bl	8008dbe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8008804:	bf00      	nop
 8008806:	3728      	adds	r7, #40	@ 0x28
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	40021000 	.word	0x40021000
 8008810:	48000400 	.word	0x48000400
 8008814:	48001800 	.word	0x48001800
 8008818:	48000800 	.word	0x48000800

0800881c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800881c:	b480      	push	{r7}
 800881e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008820:	b672      	cpsid	i
}
 8008822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008824:	bf00      	nop
 8008826:	e7fd      	b.n	8008824 <Error_Handler+0x8>

08008828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800882e:	4b0f      	ldr	r3, [pc, #60]	@ (800886c <HAL_MspInit+0x44>)
 8008830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008832:	4a0e      	ldr	r2, [pc, #56]	@ (800886c <HAL_MspInit+0x44>)
 8008834:	f043 0301 	orr.w	r3, r3, #1
 8008838:	6613      	str	r3, [r2, #96]	@ 0x60
 800883a:	4b0c      	ldr	r3, [pc, #48]	@ (800886c <HAL_MspInit+0x44>)
 800883c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800883e:	f003 0301 	and.w	r3, r3, #1
 8008842:	607b      	str	r3, [r7, #4]
 8008844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008846:	4b09      	ldr	r3, [pc, #36]	@ (800886c <HAL_MspInit+0x44>)
 8008848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800884a:	4a08      	ldr	r2, [pc, #32]	@ (800886c <HAL_MspInit+0x44>)
 800884c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008850:	6593      	str	r3, [r2, #88]	@ 0x58
 8008852:	4b06      	ldr	r3, [pc, #24]	@ (800886c <HAL_MspInit+0x44>)
 8008854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800885a:	603b      	str	r3, [r7, #0]
 800885c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800885e:	bf00      	nop
 8008860:	370c      	adds	r7, #12
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	40021000 	.word	0x40021000

08008870 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b0ae      	sub	sp, #184	@ 0xb8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008878:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800887c:	2200      	movs	r2, #0
 800887e:	601a      	str	r2, [r3, #0]
 8008880:	605a      	str	r2, [r3, #4]
 8008882:	609a      	str	r2, [r3, #8]
 8008884:	60da      	str	r2, [r3, #12]
 8008886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008888:	f107 0318 	add.w	r3, r7, #24
 800888c:	228c      	movs	r2, #140	@ 0x8c
 800888e:	2100      	movs	r1, #0
 8008890:	4618      	mov	r0, r3
 8008892:	f002 fda4 	bl	800b3de <memset>
  if(huart->Instance==LPUART1)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a43      	ldr	r2, [pc, #268]	@ (80089a8 <HAL_UART_MspInit+0x138>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d13e      	bne.n	800891e <HAL_UART_MspInit+0xae>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80088a0:	2320      	movs	r3, #32
 80088a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80088a4:	2300      	movs	r3, #0
 80088a6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80088a8:	f107 0318 	add.w	r3, r7, #24
 80088ac:	4618      	mov	r0, r3
 80088ae:	f001 fb21 	bl	8009ef4 <HAL_RCCEx_PeriphCLKConfig>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d001      	beq.n	80088bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80088b8:	f7ff ffb0 	bl	800881c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80088bc:	4b3b      	ldr	r3, [pc, #236]	@ (80089ac <HAL_UART_MspInit+0x13c>)
 80088be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088c0:	4a3a      	ldr	r2, [pc, #232]	@ (80089ac <HAL_UART_MspInit+0x13c>)
 80088c2:	f043 0301 	orr.w	r3, r3, #1
 80088c6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80088c8:	4b38      	ldr	r3, [pc, #224]	@ (80089ac <HAL_UART_MspInit+0x13c>)
 80088ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088cc:	f003 0301 	and.w	r3, r3, #1
 80088d0:	617b      	str	r3, [r7, #20]
 80088d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80088d4:	4b35      	ldr	r3, [pc, #212]	@ (80089ac <HAL_UART_MspInit+0x13c>)
 80088d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088d8:	4a34      	ldr	r2, [pc, #208]	@ (80089ac <HAL_UART_MspInit+0x13c>)
 80088da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80088e0:	4b32      	ldr	r3, [pc, #200]	@ (80089ac <HAL_UART_MspInit+0x13c>)
 80088e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088e8:	613b      	str	r3, [r7, #16]
 80088ea:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80088ec:	f000 fcb4 	bl	8009258 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80088f0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80088f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088f8:	2302      	movs	r3, #2
 80088fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088fe:	2300      	movs	r3, #0
 8008900:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008904:	2303      	movs	r3, #3
 8008906:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800890a:	2308      	movs	r3, #8
 800890c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008910:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8008914:	4619      	mov	r1, r3
 8008916:	4826      	ldr	r0, [pc, #152]	@ (80089b0 <HAL_UART_MspInit+0x140>)
 8008918:	f000 fa6c 	bl	8008df4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800891c:	e040      	b.n	80089a0 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART2)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a24      	ldr	r2, [pc, #144]	@ (80089b4 <HAL_UART_MspInit+0x144>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d13b      	bne.n	80089a0 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008928:	2302      	movs	r3, #2
 800892a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800892c:	2300      	movs	r3, #0
 800892e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008930:	f107 0318 	add.w	r3, r7, #24
 8008934:	4618      	mov	r0, r3
 8008936:	f001 fadd 	bl	8009ef4 <HAL_RCCEx_PeriphCLKConfig>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d001      	beq.n	8008944 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8008940:	f7ff ff6c 	bl	800881c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008944:	4b19      	ldr	r3, [pc, #100]	@ (80089ac <HAL_UART_MspInit+0x13c>)
 8008946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008948:	4a18      	ldr	r2, [pc, #96]	@ (80089ac <HAL_UART_MspInit+0x13c>)
 800894a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800894e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008950:	4b16      	ldr	r3, [pc, #88]	@ (80089ac <HAL_UART_MspInit+0x13c>)
 8008952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008958:	60fb      	str	r3, [r7, #12]
 800895a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800895c:	4b13      	ldr	r3, [pc, #76]	@ (80089ac <HAL_UART_MspInit+0x13c>)
 800895e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008960:	4a12      	ldr	r2, [pc, #72]	@ (80089ac <HAL_UART_MspInit+0x13c>)
 8008962:	f043 0301 	orr.w	r3, r3, #1
 8008966:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008968:	4b10      	ldr	r3, [pc, #64]	@ (80089ac <HAL_UART_MspInit+0x13c>)
 800896a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800896c:	f003 0301 	and.w	r3, r3, #1
 8008970:	60bb      	str	r3, [r7, #8]
 8008972:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008974:	230c      	movs	r3, #12
 8008976:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800897a:	2302      	movs	r3, #2
 800897c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008980:	2300      	movs	r3, #0
 8008982:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008986:	2303      	movs	r3, #3
 8008988:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800898c:	2307      	movs	r3, #7
 800898e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008992:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8008996:	4619      	mov	r1, r3
 8008998:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800899c:	f000 fa2a 	bl	8008df4 <HAL_GPIO_Init>
}
 80089a0:	bf00      	nop
 80089a2:	37b8      	adds	r7, #184	@ 0xb8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	40008000 	.word	0x40008000
 80089ac:	40021000 	.word	0x40021000
 80089b0:	48001800 	.word	0x48001800
 80089b4:	40004400 	.word	0x40004400

080089b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80089b8:	b480      	push	{r7}
 80089ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80089bc:	bf00      	nop
 80089be:	e7fd      	b.n	80089bc <NMI_Handler+0x4>

080089c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80089c0:	b480      	push	{r7}
 80089c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80089c4:	bf00      	nop
 80089c6:	e7fd      	b.n	80089c4 <HardFault_Handler+0x4>

080089c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80089c8:	b480      	push	{r7}
 80089ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80089cc:	bf00      	nop
 80089ce:	e7fd      	b.n	80089cc <MemManage_Handler+0x4>

080089d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80089d0:	b480      	push	{r7}
 80089d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80089d4:	bf00      	nop
 80089d6:	e7fd      	b.n	80089d4 <BusFault_Handler+0x4>

080089d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80089d8:	b480      	push	{r7}
 80089da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80089dc:	bf00      	nop
 80089de:	e7fd      	b.n	80089dc <UsageFault_Handler+0x4>

080089e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80089e0:	b480      	push	{r7}
 80089e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80089e4:	bf00      	nop
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80089ee:	b480      	push	{r7}
 80089f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80089f2:	bf00      	nop
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80089fc:	b480      	push	{r7}
 80089fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008a00:	bf00      	nop
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr

08008a0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008a0e:	f000 f89b 	bl	8008b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008a12:	bf00      	nop
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8008a1a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8008a1e:	f000 fb93 	bl	8009148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008a22:	bf00      	nop
 8008a24:	bd80      	pop	{r7, pc}
	...

08008a28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8008a2c:	4b06      	ldr	r3, [pc, #24]	@ (8008a48 <SystemInit+0x20>)
 8008a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a32:	4a05      	ldr	r2, [pc, #20]	@ (8008a48 <SystemInit+0x20>)
 8008a34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008a38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8008a3c:	bf00      	nop
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	e000ed00 	.word	0xe000ed00

08008a4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008a4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008a84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008a50:	f7ff ffea 	bl	8008a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008a54:	480c      	ldr	r0, [pc, #48]	@ (8008a88 <LoopForever+0x6>)
  ldr r1, =_edata
 8008a56:	490d      	ldr	r1, [pc, #52]	@ (8008a8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8008a58:	4a0d      	ldr	r2, [pc, #52]	@ (8008a90 <LoopForever+0xe>)
  movs r3, #0
 8008a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008a5c:	e002      	b.n	8008a64 <LoopCopyDataInit>

08008a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008a62:	3304      	adds	r3, #4

08008a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008a68:	d3f9      	bcc.n	8008a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8008a94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008a6c:	4c0a      	ldr	r4, [pc, #40]	@ (8008a98 <LoopForever+0x16>)
  movs r3, #0
 8008a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008a70:	e001      	b.n	8008a76 <LoopFillZerobss>

08008a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008a74:	3204      	adds	r2, #4

08008a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008a78:	d3fb      	bcc.n	8008a72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008a7a:	f002 fcb9 	bl	800b3f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008a7e:	f7ff fd4b 	bl	8008518 <main>

08008a82 <LoopForever>:

LoopForever:
    b LoopForever
 8008a82:	e7fe      	b.n	8008a82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008a84:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8008a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008a8c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8008a90:	0800b4a8 	.word	0x0800b4a8
  ldr r2, =_sbss
 8008a94:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8008a98:	20000150 	.word	0x20000150

08008a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008a9c:	e7fe      	b.n	8008a9c <ADC1_2_IRQHandler>

08008a9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b082      	sub	sp, #8
 8008aa2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008aa8:	2003      	movs	r0, #3
 8008aaa:	f000 f961 	bl	8008d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008aae:	2000      	movs	r0, #0
 8008ab0:	f000 f80e 	bl	8008ad0 <HAL_InitTick>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d002      	beq.n	8008ac0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	71fb      	strb	r3, [r7, #7]
 8008abe:	e001      	b.n	8008ac4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008ac0:	f7ff feb2 	bl	8008828 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008ac4:	79fb      	ldrb	r3, [r7, #7]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
	...

08008ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8008adc:	4b17      	ldr	r3, [pc, #92]	@ (8008b3c <HAL_InitTick+0x6c>)
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d023      	beq.n	8008b2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8008ae4:	4b16      	ldr	r3, [pc, #88]	@ (8008b40 <HAL_InitTick+0x70>)
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	4b14      	ldr	r3, [pc, #80]	@ (8008b3c <HAL_InitTick+0x6c>)
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	4619      	mov	r1, r3
 8008aee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 f96d 	bl	8008dda <HAL_SYSTICK_Config>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10f      	bne.n	8008b26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2b0f      	cmp	r3, #15
 8008b0a:	d809      	bhi.n	8008b20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	6879      	ldr	r1, [r7, #4]
 8008b10:	f04f 30ff 	mov.w	r0, #4294967295
 8008b14:	f000 f937 	bl	8008d86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008b18:	4a0a      	ldr	r2, [pc, #40]	@ (8008b44 <HAL_InitTick+0x74>)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6013      	str	r3, [r2, #0]
 8008b1e:	e007      	b.n	8008b30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	73fb      	strb	r3, [r7, #15]
 8008b24:	e004      	b.n	8008b30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	73fb      	strb	r3, [r7, #15]
 8008b2a:	e001      	b.n	8008b30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	2000001c 	.word	0x2000001c
 8008b40:	20000014 	.word	0x20000014
 8008b44:	20000018 	.word	0x20000018

08008b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008b4c:	4b06      	ldr	r3, [pc, #24]	@ (8008b68 <HAL_IncTick+0x20>)
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	461a      	mov	r2, r3
 8008b52:	4b06      	ldr	r3, [pc, #24]	@ (8008b6c <HAL_IncTick+0x24>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4413      	add	r3, r2
 8008b58:	4a04      	ldr	r2, [pc, #16]	@ (8008b6c <HAL_IncTick+0x24>)
 8008b5a:	6013      	str	r3, [r2, #0]
}
 8008b5c:	bf00      	nop
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	2000001c 	.word	0x2000001c
 8008b6c:	2000014c 	.word	0x2000014c

08008b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008b70:	b480      	push	{r7}
 8008b72:	af00      	add	r7, sp, #0
  return uwTick;
 8008b74:	4b03      	ldr	r3, [pc, #12]	@ (8008b84 <HAL_GetTick+0x14>)
 8008b76:	681b      	ldr	r3, [r3, #0]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	2000014c 	.word	0x2000014c

08008b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008b90:	f7ff ffee 	bl	8008b70 <HAL_GetTick>
 8008b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba0:	d005      	beq.n	8008bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8008ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8008bcc <HAL_Delay+0x44>)
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	4413      	add	r3, r2
 8008bac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008bae:	bf00      	nop
 8008bb0:	f7ff ffde 	bl	8008b70 <HAL_GetTick>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d8f7      	bhi.n	8008bb0 <HAL_Delay+0x28>
  {
  }
}
 8008bc0:	bf00      	nop
 8008bc2:	bf00      	nop
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	2000001c 	.word	0x2000001c

08008bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f003 0307 	and.w	r3, r3, #7
 8008bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008be0:	4b0c      	ldr	r3, [pc, #48]	@ (8008c14 <__NVIC_SetPriorityGrouping+0x44>)
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008bec:	4013      	ands	r3, r2
 8008bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008bf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008c02:	4a04      	ldr	r2, [pc, #16]	@ (8008c14 <__NVIC_SetPriorityGrouping+0x44>)
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	60d3      	str	r3, [r2, #12]
}
 8008c08:	bf00      	nop
 8008c0a:	3714      	adds	r7, #20
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr
 8008c14:	e000ed00 	.word	0xe000ed00

08008c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008c1c:	4b04      	ldr	r3, [pc, #16]	@ (8008c30 <__NVIC_GetPriorityGrouping+0x18>)
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	0a1b      	lsrs	r3, r3, #8
 8008c22:	f003 0307 	and.w	r3, r3, #7
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr
 8008c30:	e000ed00 	.word	0xe000ed00

08008c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	db0b      	blt.n	8008c5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008c46:	79fb      	ldrb	r3, [r7, #7]
 8008c48:	f003 021f 	and.w	r2, r3, #31
 8008c4c:	4907      	ldr	r1, [pc, #28]	@ (8008c6c <__NVIC_EnableIRQ+0x38>)
 8008c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c52:	095b      	lsrs	r3, r3, #5
 8008c54:	2001      	movs	r0, #1
 8008c56:	fa00 f202 	lsl.w	r2, r0, r2
 8008c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008c5e:	bf00      	nop
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	e000e100 	.word	0xe000e100

08008c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	4603      	mov	r3, r0
 8008c78:	6039      	str	r1, [r7, #0]
 8008c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	db0a      	blt.n	8008c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	490c      	ldr	r1, [pc, #48]	@ (8008cbc <__NVIC_SetPriority+0x4c>)
 8008c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c8e:	0112      	lsls	r2, r2, #4
 8008c90:	b2d2      	uxtb	r2, r2
 8008c92:	440b      	add	r3, r1
 8008c94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008c98:	e00a      	b.n	8008cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	b2da      	uxtb	r2, r3
 8008c9e:	4908      	ldr	r1, [pc, #32]	@ (8008cc0 <__NVIC_SetPriority+0x50>)
 8008ca0:	79fb      	ldrb	r3, [r7, #7]
 8008ca2:	f003 030f 	and.w	r3, r3, #15
 8008ca6:	3b04      	subs	r3, #4
 8008ca8:	0112      	lsls	r2, r2, #4
 8008caa:	b2d2      	uxtb	r2, r2
 8008cac:	440b      	add	r3, r1
 8008cae:	761a      	strb	r2, [r3, #24]
}
 8008cb0:	bf00      	nop
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr
 8008cbc:	e000e100 	.word	0xe000e100
 8008cc0:	e000ed00 	.word	0xe000ed00

08008cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b089      	sub	sp, #36	@ 0x24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f003 0307 	and.w	r3, r3, #7
 8008cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	f1c3 0307 	rsb	r3, r3, #7
 8008cde:	2b04      	cmp	r3, #4
 8008ce0:	bf28      	it	cs
 8008ce2:	2304      	movcs	r3, #4
 8008ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	3304      	adds	r3, #4
 8008cea:	2b06      	cmp	r3, #6
 8008cec:	d902      	bls.n	8008cf4 <NVIC_EncodePriority+0x30>
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	3b03      	subs	r3, #3
 8008cf2:	e000      	b.n	8008cf6 <NVIC_EncodePriority+0x32>
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8008d02:	43da      	mvns	r2, r3
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	401a      	ands	r2, r3
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	fa01 f303 	lsl.w	r3, r1, r3
 8008d16:	43d9      	mvns	r1, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d1c:	4313      	orrs	r3, r2
         );
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3724      	adds	r7, #36	@ 0x24
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
	...

08008d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	3b01      	subs	r3, #1
 8008d38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d3c:	d301      	bcc.n	8008d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e00f      	b.n	8008d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d42:	4a0a      	ldr	r2, [pc, #40]	@ (8008d6c <SysTick_Config+0x40>)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	3b01      	subs	r3, #1
 8008d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008d4a:	210f      	movs	r1, #15
 8008d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d50:	f7ff ff8e 	bl	8008c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d54:	4b05      	ldr	r3, [pc, #20]	@ (8008d6c <SysTick_Config+0x40>)
 8008d56:	2200      	movs	r2, #0
 8008d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d5a:	4b04      	ldr	r3, [pc, #16]	@ (8008d6c <SysTick_Config+0x40>)
 8008d5c:	2207      	movs	r2, #7
 8008d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	e000e010 	.word	0xe000e010

08008d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f7ff ff29 	bl	8008bd0 <__NVIC_SetPriorityGrouping>
}
 8008d7e:	bf00      	nop
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b086      	sub	sp, #24
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	60b9      	str	r1, [r7, #8]
 8008d90:	607a      	str	r2, [r7, #4]
 8008d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008d94:	2300      	movs	r3, #0
 8008d96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008d98:	f7ff ff3e 	bl	8008c18 <__NVIC_GetPriorityGrouping>
 8008d9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	68b9      	ldr	r1, [r7, #8]
 8008da2:	6978      	ldr	r0, [r7, #20]
 8008da4:	f7ff ff8e 	bl	8008cc4 <NVIC_EncodePriority>
 8008da8:	4602      	mov	r2, r0
 8008daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dae:	4611      	mov	r1, r2
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7ff ff5d 	bl	8008c70 <__NVIC_SetPriority>
}
 8008db6:	bf00      	nop
 8008db8:	3718      	adds	r7, #24
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b082      	sub	sp, #8
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7ff ff31 	bl	8008c34 <__NVIC_EnableIRQ>
}
 8008dd2:	bf00      	nop
 8008dd4:	3708      	adds	r7, #8
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b082      	sub	sp, #8
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f7ff ffa2 	bl	8008d2c <SysTick_Config>
 8008de8:	4603      	mov	r3, r0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
	...

08008df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b087      	sub	sp, #28
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e02:	e166      	b.n	80090d2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	2101      	movs	r1, #1
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e10:	4013      	ands	r3, r2
 8008e12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f000 8158 	beq.w	80090cc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	f003 0303 	and.w	r3, r3, #3
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d005      	beq.n	8008e34 <HAL_GPIO_Init+0x40>
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	f003 0303 	and.w	r3, r3, #3
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d130      	bne.n	8008e96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	005b      	lsls	r3, r3, #1
 8008e3e:	2203      	movs	r2, #3
 8008e40:	fa02 f303 	lsl.w	r3, r2, r3
 8008e44:	43db      	mvns	r3, r3
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	4013      	ands	r3, r2
 8008e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	68da      	ldr	r2, [r3, #12]
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	005b      	lsls	r3, r3, #1
 8008e54:	fa02 f303 	lsl.w	r3, r2, r3
 8008e58:	693a      	ldr	r2, [r7, #16]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e72:	43db      	mvns	r3, r3
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	4013      	ands	r3, r2
 8008e78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	091b      	lsrs	r3, r3, #4
 8008e80:	f003 0201 	and.w	r2, r3, #1
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	fa02 f303 	lsl.w	r3, r2, r3
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	693a      	ldr	r2, [r7, #16]
 8008e94:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	f003 0303 	and.w	r3, r3, #3
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	d017      	beq.n	8008ed2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	005b      	lsls	r3, r3, #1
 8008eac:	2203      	movs	r2, #3
 8008eae:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb2:	43db      	mvns	r3, r3
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	689a      	ldr	r2, [r3, #8]
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	005b      	lsls	r3, r3, #1
 8008ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	693a      	ldr	r2, [r7, #16]
 8008ed0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	f003 0303 	and.w	r3, r3, #3
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d123      	bne.n	8008f26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	08da      	lsrs	r2, r3, #3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	3208      	adds	r2, #8
 8008ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	f003 0307 	and.w	r3, r3, #7
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	220f      	movs	r2, #15
 8008ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8008efa:	43db      	mvns	r3, r3
 8008efc:	693a      	ldr	r2, [r7, #16]
 8008efe:	4013      	ands	r3, r2
 8008f00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	691a      	ldr	r2, [r3, #16]
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	f003 0307 	and.w	r3, r3, #7
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f12:	693a      	ldr	r2, [r7, #16]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	08da      	lsrs	r2, r3, #3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	3208      	adds	r2, #8
 8008f20:	6939      	ldr	r1, [r7, #16]
 8008f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	005b      	lsls	r3, r3, #1
 8008f30:	2203      	movs	r2, #3
 8008f32:	fa02 f303 	lsl.w	r3, r2, r3
 8008f36:	43db      	mvns	r3, r3
 8008f38:	693a      	ldr	r2, [r7, #16]
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	f003 0203 	and.w	r2, r3, #3
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	005b      	lsls	r3, r3, #1
 8008f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f000 80b2 	beq.w	80090cc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f68:	4b61      	ldr	r3, [pc, #388]	@ (80090f0 <HAL_GPIO_Init+0x2fc>)
 8008f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f6c:	4a60      	ldr	r2, [pc, #384]	@ (80090f0 <HAL_GPIO_Init+0x2fc>)
 8008f6e:	f043 0301 	orr.w	r3, r3, #1
 8008f72:	6613      	str	r3, [r2, #96]	@ 0x60
 8008f74:	4b5e      	ldr	r3, [pc, #376]	@ (80090f0 <HAL_GPIO_Init+0x2fc>)
 8008f76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f78:	f003 0301 	and.w	r3, r3, #1
 8008f7c:	60bb      	str	r3, [r7, #8]
 8008f7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008f80:	4a5c      	ldr	r2, [pc, #368]	@ (80090f4 <HAL_GPIO_Init+0x300>)
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	089b      	lsrs	r3, r3, #2
 8008f86:	3302      	adds	r3, #2
 8008f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	f003 0303 	and.w	r3, r3, #3
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	220f      	movs	r2, #15
 8008f98:	fa02 f303 	lsl.w	r3, r2, r3
 8008f9c:	43db      	mvns	r3, r3
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008faa:	d02b      	beq.n	8009004 <HAL_GPIO_Init+0x210>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a52      	ldr	r2, [pc, #328]	@ (80090f8 <HAL_GPIO_Init+0x304>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d025      	beq.n	8009000 <HAL_GPIO_Init+0x20c>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a51      	ldr	r2, [pc, #324]	@ (80090fc <HAL_GPIO_Init+0x308>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d01f      	beq.n	8008ffc <HAL_GPIO_Init+0x208>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a50      	ldr	r2, [pc, #320]	@ (8009100 <HAL_GPIO_Init+0x30c>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d019      	beq.n	8008ff8 <HAL_GPIO_Init+0x204>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a4f      	ldr	r2, [pc, #316]	@ (8009104 <HAL_GPIO_Init+0x310>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d013      	beq.n	8008ff4 <HAL_GPIO_Init+0x200>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a4e      	ldr	r2, [pc, #312]	@ (8009108 <HAL_GPIO_Init+0x314>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d00d      	beq.n	8008ff0 <HAL_GPIO_Init+0x1fc>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a4d      	ldr	r2, [pc, #308]	@ (800910c <HAL_GPIO_Init+0x318>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d007      	beq.n	8008fec <HAL_GPIO_Init+0x1f8>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a4c      	ldr	r2, [pc, #304]	@ (8009110 <HAL_GPIO_Init+0x31c>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d101      	bne.n	8008fe8 <HAL_GPIO_Init+0x1f4>
 8008fe4:	2307      	movs	r3, #7
 8008fe6:	e00e      	b.n	8009006 <HAL_GPIO_Init+0x212>
 8008fe8:	2308      	movs	r3, #8
 8008fea:	e00c      	b.n	8009006 <HAL_GPIO_Init+0x212>
 8008fec:	2306      	movs	r3, #6
 8008fee:	e00a      	b.n	8009006 <HAL_GPIO_Init+0x212>
 8008ff0:	2305      	movs	r3, #5
 8008ff2:	e008      	b.n	8009006 <HAL_GPIO_Init+0x212>
 8008ff4:	2304      	movs	r3, #4
 8008ff6:	e006      	b.n	8009006 <HAL_GPIO_Init+0x212>
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	e004      	b.n	8009006 <HAL_GPIO_Init+0x212>
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	e002      	b.n	8009006 <HAL_GPIO_Init+0x212>
 8009000:	2301      	movs	r3, #1
 8009002:	e000      	b.n	8009006 <HAL_GPIO_Init+0x212>
 8009004:	2300      	movs	r3, #0
 8009006:	697a      	ldr	r2, [r7, #20]
 8009008:	f002 0203 	and.w	r2, r2, #3
 800900c:	0092      	lsls	r2, r2, #2
 800900e:	4093      	lsls	r3, r2
 8009010:	693a      	ldr	r2, [r7, #16]
 8009012:	4313      	orrs	r3, r2
 8009014:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009016:	4937      	ldr	r1, [pc, #220]	@ (80090f4 <HAL_GPIO_Init+0x300>)
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	089b      	lsrs	r3, r3, #2
 800901c:	3302      	adds	r3, #2
 800901e:	693a      	ldr	r2, [r7, #16]
 8009020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009024:	4b3b      	ldr	r3, [pc, #236]	@ (8009114 <HAL_GPIO_Init+0x320>)
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	43db      	mvns	r3, r3
 800902e:	693a      	ldr	r2, [r7, #16]
 8009030:	4013      	ands	r3, r2
 8009032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800903c:	2b00      	cmp	r3, #0
 800903e:	d003      	beq.n	8009048 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8009040:	693a      	ldr	r2, [r7, #16]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	4313      	orrs	r3, r2
 8009046:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009048:	4a32      	ldr	r2, [pc, #200]	@ (8009114 <HAL_GPIO_Init+0x320>)
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800904e:	4b31      	ldr	r3, [pc, #196]	@ (8009114 <HAL_GPIO_Init+0x320>)
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	43db      	mvns	r3, r3
 8009058:	693a      	ldr	r2, [r7, #16]
 800905a:	4013      	ands	r3, r2
 800905c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009066:	2b00      	cmp	r3, #0
 8009068:	d003      	beq.n	8009072 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800906a:	693a      	ldr	r2, [r7, #16]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	4313      	orrs	r3, r2
 8009070:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009072:	4a28      	ldr	r2, [pc, #160]	@ (8009114 <HAL_GPIO_Init+0x320>)
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009078:	4b26      	ldr	r3, [pc, #152]	@ (8009114 <HAL_GPIO_Init+0x320>)
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	43db      	mvns	r3, r3
 8009082:	693a      	ldr	r2, [r7, #16]
 8009084:	4013      	ands	r3, r2
 8009086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d003      	beq.n	800909c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	4313      	orrs	r3, r2
 800909a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800909c:	4a1d      	ldr	r2, [pc, #116]	@ (8009114 <HAL_GPIO_Init+0x320>)
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80090a2:	4b1c      	ldr	r3, [pc, #112]	@ (8009114 <HAL_GPIO_Init+0x320>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	43db      	mvns	r3, r3
 80090ac:	693a      	ldr	r2, [r7, #16]
 80090ae:	4013      	ands	r3, r2
 80090b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d003      	beq.n	80090c6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80090c6:	4a13      	ldr	r2, [pc, #76]	@ (8009114 <HAL_GPIO_Init+0x320>)
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	3301      	adds	r3, #1
 80090d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	fa22 f303 	lsr.w	r3, r2, r3
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f47f ae91 	bne.w	8008e04 <HAL_GPIO_Init+0x10>
  }
}
 80090e2:	bf00      	nop
 80090e4:	bf00      	nop
 80090e6:	371c      	adds	r7, #28
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr
 80090f0:	40021000 	.word	0x40021000
 80090f4:	40010000 	.word	0x40010000
 80090f8:	48000400 	.word	0x48000400
 80090fc:	48000800 	.word	0x48000800
 8009100:	48000c00 	.word	0x48000c00
 8009104:	48001000 	.word	0x48001000
 8009108:	48001400 	.word	0x48001400
 800910c:	48001800 	.word	0x48001800
 8009110:	48001c00 	.word	0x48001c00
 8009114:	40010400 	.word	0x40010400

08009118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	460b      	mov	r3, r1
 8009122:	807b      	strh	r3, [r7, #2]
 8009124:	4613      	mov	r3, r2
 8009126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009128:	787b      	ldrb	r3, [r7, #1]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d003      	beq.n	8009136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800912e:	887a      	ldrh	r2, [r7, #2]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009134:	e002      	b.n	800913c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009136:	887a      	ldrh	r2, [r7, #2]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800913c:	bf00      	nop
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	4603      	mov	r3, r0
 8009150:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009152:	4b08      	ldr	r3, [pc, #32]	@ (8009174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009154:	695a      	ldr	r2, [r3, #20]
 8009156:	88fb      	ldrh	r3, [r7, #6]
 8009158:	4013      	ands	r3, r2
 800915a:	2b00      	cmp	r3, #0
 800915c:	d006      	beq.n	800916c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800915e:	4a05      	ldr	r2, [pc, #20]	@ (8009174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009160:	88fb      	ldrh	r3, [r7, #6]
 8009162:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009164:	88fb      	ldrh	r3, [r7, #6]
 8009166:	4618      	mov	r0, r3
 8009168:	f000 f806 	bl	8009178 <HAL_GPIO_EXTI_Callback>
  }
}
 800916c:	bf00      	nop
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	40010400 	.word	0x40010400

08009178 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	4603      	mov	r3, r0
 8009180:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009182:	bf00      	nop
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
	...

08009190 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009190:	b480      	push	{r7}
 8009192:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009194:	4b04      	ldr	r3, [pc, #16]	@ (80091a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800919c:	4618      	mov	r0, r3
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	40007000 	.word	0x40007000

080091ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091ba:	d130      	bne.n	800921e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80091bc:	4b23      	ldr	r3, [pc, #140]	@ (800924c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80091c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091c8:	d038      	beq.n	800923c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80091ca:	4b20      	ldr	r3, [pc, #128]	@ (800924c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80091d2:	4a1e      	ldr	r2, [pc, #120]	@ (800924c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80091d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80091d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80091da:	4b1d      	ldr	r3, [pc, #116]	@ (8009250 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2232      	movs	r2, #50	@ 0x32
 80091e0:	fb02 f303 	mul.w	r3, r2, r3
 80091e4:	4a1b      	ldr	r2, [pc, #108]	@ (8009254 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80091e6:	fba2 2303 	umull	r2, r3, r2, r3
 80091ea:	0c9b      	lsrs	r3, r3, #18
 80091ec:	3301      	adds	r3, #1
 80091ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80091f0:	e002      	b.n	80091f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	3b01      	subs	r3, #1
 80091f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80091f8:	4b14      	ldr	r3, [pc, #80]	@ (800924c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009204:	d102      	bne.n	800920c <HAL_PWREx_ControlVoltageScaling+0x60>
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1f2      	bne.n	80091f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800920c:	4b0f      	ldr	r3, [pc, #60]	@ (800924c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800920e:	695b      	ldr	r3, [r3, #20]
 8009210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009214:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009218:	d110      	bne.n	800923c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e00f      	b.n	800923e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800921e:	4b0b      	ldr	r3, [pc, #44]	@ (800924c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800922a:	d007      	beq.n	800923c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800922c:	4b07      	ldr	r3, [pc, #28]	@ (800924c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009234:	4a05      	ldr	r2, [pc, #20]	@ (800924c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009236:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800923a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	40007000 	.word	0x40007000
 8009250:	20000014 	.word	0x20000014
 8009254:	431bde83 	.word	0x431bde83

08009258 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8009258:	b480      	push	{r7}
 800925a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800925c:	4b05      	ldr	r3, [pc, #20]	@ (8009274 <HAL_PWREx_EnableVddIO2+0x1c>)
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	4a04      	ldr	r2, [pc, #16]	@ (8009274 <HAL_PWREx_EnableVddIO2+0x1c>)
 8009262:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009266:	6053      	str	r3, [r2, #4]
}
 8009268:	bf00      	nop
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	40007000 	.word	0x40007000

08009278 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b088      	sub	sp, #32
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d102      	bne.n	800928c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	f000 bc08 	b.w	8009a9c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800928c:	4b96      	ldr	r3, [pc, #600]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	f003 030c 	and.w	r3, r3, #12
 8009294:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009296:	4b94      	ldr	r3, [pc, #592]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	f003 0303 	and.w	r3, r3, #3
 800929e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 0310 	and.w	r3, r3, #16
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f000 80e4 	beq.w	8009476 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d007      	beq.n	80092c4 <HAL_RCC_OscConfig+0x4c>
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	2b0c      	cmp	r3, #12
 80092b8:	f040 808b 	bne.w	80093d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	f040 8087 	bne.w	80093d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80092c4:	4b88      	ldr	r3, [pc, #544]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 0302 	and.w	r3, r3, #2
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d005      	beq.n	80092dc <HAL_RCC_OscConfig+0x64>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d101      	bne.n	80092dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	e3df      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a1a      	ldr	r2, [r3, #32]
 80092e0:	4b81      	ldr	r3, [pc, #516]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f003 0308 	and.w	r3, r3, #8
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d004      	beq.n	80092f6 <HAL_RCC_OscConfig+0x7e>
 80092ec:	4b7e      	ldr	r3, [pc, #504]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80092f4:	e005      	b.n	8009302 <HAL_RCC_OscConfig+0x8a>
 80092f6:	4b7c      	ldr	r3, [pc, #496]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 80092f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80092fc:	091b      	lsrs	r3, r3, #4
 80092fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009302:	4293      	cmp	r3, r2
 8009304:	d223      	bcs.n	800934e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a1b      	ldr	r3, [r3, #32]
 800930a:	4618      	mov	r0, r3
 800930c:	f000 fd92 	bl	8009e34 <RCC_SetFlashLatencyFromMSIRange>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d001      	beq.n	800931a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e3c0      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800931a:	4b73      	ldr	r3, [pc, #460]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a72      	ldr	r2, [pc, #456]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 8009320:	f043 0308 	orr.w	r3, r3, #8
 8009324:	6013      	str	r3, [r2, #0]
 8009326:	4b70      	ldr	r3, [pc, #448]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6a1b      	ldr	r3, [r3, #32]
 8009332:	496d      	ldr	r1, [pc, #436]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 8009334:	4313      	orrs	r3, r2
 8009336:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009338:	4b6b      	ldr	r3, [pc, #428]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	69db      	ldr	r3, [r3, #28]
 8009344:	021b      	lsls	r3, r3, #8
 8009346:	4968      	ldr	r1, [pc, #416]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 8009348:	4313      	orrs	r3, r2
 800934a:	604b      	str	r3, [r1, #4]
 800934c:	e025      	b.n	800939a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800934e:	4b66      	ldr	r3, [pc, #408]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a65      	ldr	r2, [pc, #404]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 8009354:	f043 0308 	orr.w	r3, r3, #8
 8009358:	6013      	str	r3, [r2, #0]
 800935a:	4b63      	ldr	r3, [pc, #396]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a1b      	ldr	r3, [r3, #32]
 8009366:	4960      	ldr	r1, [pc, #384]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 8009368:	4313      	orrs	r3, r2
 800936a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800936c:	4b5e      	ldr	r3, [pc, #376]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	69db      	ldr	r3, [r3, #28]
 8009378:	021b      	lsls	r3, r3, #8
 800937a:	495b      	ldr	r1, [pc, #364]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 800937c:	4313      	orrs	r3, r2
 800937e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d109      	bne.n	800939a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a1b      	ldr	r3, [r3, #32]
 800938a:	4618      	mov	r0, r3
 800938c:	f000 fd52 	bl	8009e34 <RCC_SetFlashLatencyFromMSIRange>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	e380      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800939a:	f000 fc87 	bl	8009cac <HAL_RCC_GetSysClockFreq>
 800939e:	4602      	mov	r2, r0
 80093a0:	4b51      	ldr	r3, [pc, #324]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	091b      	lsrs	r3, r3, #4
 80093a6:	f003 030f 	and.w	r3, r3, #15
 80093aa:	4950      	ldr	r1, [pc, #320]	@ (80094ec <HAL_RCC_OscConfig+0x274>)
 80093ac:	5ccb      	ldrb	r3, [r1, r3]
 80093ae:	f003 031f 	and.w	r3, r3, #31
 80093b2:	fa22 f303 	lsr.w	r3, r2, r3
 80093b6:	4a4e      	ldr	r2, [pc, #312]	@ (80094f0 <HAL_RCC_OscConfig+0x278>)
 80093b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80093ba:	4b4e      	ldr	r3, [pc, #312]	@ (80094f4 <HAL_RCC_OscConfig+0x27c>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4618      	mov	r0, r3
 80093c0:	f7ff fb86 	bl	8008ad0 <HAL_InitTick>
 80093c4:	4603      	mov	r3, r0
 80093c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80093c8:	7bfb      	ldrb	r3, [r7, #15]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d052      	beq.n	8009474 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80093ce:	7bfb      	ldrb	r3, [r7, #15]
 80093d0:	e364      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	699b      	ldr	r3, [r3, #24]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d032      	beq.n	8009440 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80093da:	4b43      	ldr	r3, [pc, #268]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a42      	ldr	r2, [pc, #264]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 80093e0:	f043 0301 	orr.w	r3, r3, #1
 80093e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80093e6:	f7ff fbc3 	bl	8008b70 <HAL_GetTick>
 80093ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80093ec:	e008      	b.n	8009400 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80093ee:	f7ff fbbf 	bl	8008b70 <HAL_GetTick>
 80093f2:	4602      	mov	r2, r0
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	2b02      	cmp	r3, #2
 80093fa:	d901      	bls.n	8009400 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80093fc:	2303      	movs	r3, #3
 80093fe:	e34d      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009400:	4b39      	ldr	r3, [pc, #228]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 0302 	and.w	r3, r3, #2
 8009408:	2b00      	cmp	r3, #0
 800940a:	d0f0      	beq.n	80093ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800940c:	4b36      	ldr	r3, [pc, #216]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a35      	ldr	r2, [pc, #212]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 8009412:	f043 0308 	orr.w	r3, r3, #8
 8009416:	6013      	str	r3, [r2, #0]
 8009418:	4b33      	ldr	r3, [pc, #204]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a1b      	ldr	r3, [r3, #32]
 8009424:	4930      	ldr	r1, [pc, #192]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 8009426:	4313      	orrs	r3, r2
 8009428:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800942a:	4b2f      	ldr	r3, [pc, #188]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	69db      	ldr	r3, [r3, #28]
 8009436:	021b      	lsls	r3, r3, #8
 8009438:	492b      	ldr	r1, [pc, #172]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 800943a:	4313      	orrs	r3, r2
 800943c:	604b      	str	r3, [r1, #4]
 800943e:	e01a      	b.n	8009476 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009440:	4b29      	ldr	r3, [pc, #164]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a28      	ldr	r2, [pc, #160]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 8009446:	f023 0301 	bic.w	r3, r3, #1
 800944a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800944c:	f7ff fb90 	bl	8008b70 <HAL_GetTick>
 8009450:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009452:	e008      	b.n	8009466 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009454:	f7ff fb8c 	bl	8008b70 <HAL_GetTick>
 8009458:	4602      	mov	r2, r0
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	2b02      	cmp	r3, #2
 8009460:	d901      	bls.n	8009466 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e31a      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009466:	4b20      	ldr	r3, [pc, #128]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0302 	and.w	r3, r3, #2
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1f0      	bne.n	8009454 <HAL_RCC_OscConfig+0x1dc>
 8009472:	e000      	b.n	8009476 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009474:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f003 0301 	and.w	r3, r3, #1
 800947e:	2b00      	cmp	r3, #0
 8009480:	d073      	beq.n	800956a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	2b08      	cmp	r3, #8
 8009486:	d005      	beq.n	8009494 <HAL_RCC_OscConfig+0x21c>
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	2b0c      	cmp	r3, #12
 800948c:	d10e      	bne.n	80094ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	2b03      	cmp	r3, #3
 8009492:	d10b      	bne.n	80094ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009494:	4b14      	ldr	r3, [pc, #80]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800949c:	2b00      	cmp	r3, #0
 800949e:	d063      	beq.n	8009568 <HAL_RCC_OscConfig+0x2f0>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d15f      	bne.n	8009568 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e2f7      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094b4:	d106      	bne.n	80094c4 <HAL_RCC_OscConfig+0x24c>
 80094b6:	4b0c      	ldr	r3, [pc, #48]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a0b      	ldr	r2, [pc, #44]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 80094bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094c0:	6013      	str	r3, [r2, #0]
 80094c2:	e025      	b.n	8009510 <HAL_RCC_OscConfig+0x298>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80094cc:	d114      	bne.n	80094f8 <HAL_RCC_OscConfig+0x280>
 80094ce:	4b06      	ldr	r3, [pc, #24]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a05      	ldr	r2, [pc, #20]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 80094d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80094d8:	6013      	str	r3, [r2, #0]
 80094da:	4b03      	ldr	r3, [pc, #12]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a02      	ldr	r2, [pc, #8]	@ (80094e8 <HAL_RCC_OscConfig+0x270>)
 80094e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094e4:	6013      	str	r3, [r2, #0]
 80094e6:	e013      	b.n	8009510 <HAL_RCC_OscConfig+0x298>
 80094e8:	40021000 	.word	0x40021000
 80094ec:	0800b450 	.word	0x0800b450
 80094f0:	20000014 	.word	0x20000014
 80094f4:	20000018 	.word	0x20000018
 80094f8:	4ba0      	ldr	r3, [pc, #640]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a9f      	ldr	r2, [pc, #636]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 80094fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009502:	6013      	str	r3, [r2, #0]
 8009504:	4b9d      	ldr	r3, [pc, #628]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a9c      	ldr	r2, [pc, #624]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 800950a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800950e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d013      	beq.n	8009540 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009518:	f7ff fb2a 	bl	8008b70 <HAL_GetTick>
 800951c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800951e:	e008      	b.n	8009532 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009520:	f7ff fb26 	bl	8008b70 <HAL_GetTick>
 8009524:	4602      	mov	r2, r0
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	2b64      	cmp	r3, #100	@ 0x64
 800952c:	d901      	bls.n	8009532 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800952e:	2303      	movs	r3, #3
 8009530:	e2b4      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009532:	4b92      	ldr	r3, [pc, #584]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800953a:	2b00      	cmp	r3, #0
 800953c:	d0f0      	beq.n	8009520 <HAL_RCC_OscConfig+0x2a8>
 800953e:	e014      	b.n	800956a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009540:	f7ff fb16 	bl	8008b70 <HAL_GetTick>
 8009544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009546:	e008      	b.n	800955a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009548:	f7ff fb12 	bl	8008b70 <HAL_GetTick>
 800954c:	4602      	mov	r2, r0
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	1ad3      	subs	r3, r2, r3
 8009552:	2b64      	cmp	r3, #100	@ 0x64
 8009554:	d901      	bls.n	800955a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009556:	2303      	movs	r3, #3
 8009558:	e2a0      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800955a:	4b88      	ldr	r3, [pc, #544]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009562:	2b00      	cmp	r3, #0
 8009564:	d1f0      	bne.n	8009548 <HAL_RCC_OscConfig+0x2d0>
 8009566:	e000      	b.n	800956a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 0302 	and.w	r3, r3, #2
 8009572:	2b00      	cmp	r3, #0
 8009574:	d060      	beq.n	8009638 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	2b04      	cmp	r3, #4
 800957a:	d005      	beq.n	8009588 <HAL_RCC_OscConfig+0x310>
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	2b0c      	cmp	r3, #12
 8009580:	d119      	bne.n	80095b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	2b02      	cmp	r3, #2
 8009586:	d116      	bne.n	80095b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009588:	4b7c      	ldr	r3, [pc, #496]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009590:	2b00      	cmp	r3, #0
 8009592:	d005      	beq.n	80095a0 <HAL_RCC_OscConfig+0x328>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d101      	bne.n	80095a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e27d      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095a0:	4b76      	ldr	r3, [pc, #472]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	061b      	lsls	r3, r3, #24
 80095ae:	4973      	ldr	r1, [pc, #460]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 80095b0:	4313      	orrs	r3, r2
 80095b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80095b4:	e040      	b.n	8009638 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d023      	beq.n	8009606 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80095be:	4b6f      	ldr	r3, [pc, #444]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a6e      	ldr	r2, [pc, #440]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 80095c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095ca:	f7ff fad1 	bl	8008b70 <HAL_GetTick>
 80095ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80095d0:	e008      	b.n	80095e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095d2:	f7ff facd 	bl	8008b70 <HAL_GetTick>
 80095d6:	4602      	mov	r2, r0
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d901      	bls.n	80095e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80095e0:	2303      	movs	r3, #3
 80095e2:	e25b      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80095e4:	4b65      	ldr	r3, [pc, #404]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d0f0      	beq.n	80095d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095f0:	4b62      	ldr	r3, [pc, #392]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	061b      	lsls	r3, r3, #24
 80095fe:	495f      	ldr	r1, [pc, #380]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 8009600:	4313      	orrs	r3, r2
 8009602:	604b      	str	r3, [r1, #4]
 8009604:	e018      	b.n	8009638 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009606:	4b5d      	ldr	r3, [pc, #372]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a5c      	ldr	r2, [pc, #368]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 800960c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009612:	f7ff faad 	bl	8008b70 <HAL_GetTick>
 8009616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009618:	e008      	b.n	800962c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800961a:	f7ff faa9 	bl	8008b70 <HAL_GetTick>
 800961e:	4602      	mov	r2, r0
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	2b02      	cmp	r3, #2
 8009626:	d901      	bls.n	800962c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009628:	2303      	movs	r3, #3
 800962a:	e237      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800962c:	4b53      	ldr	r3, [pc, #332]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1f0      	bne.n	800961a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 0308 	and.w	r3, r3, #8
 8009640:	2b00      	cmp	r3, #0
 8009642:	d03c      	beq.n	80096be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	695b      	ldr	r3, [r3, #20]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d01c      	beq.n	8009686 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800964c:	4b4b      	ldr	r3, [pc, #300]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 800964e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009652:	4a4a      	ldr	r2, [pc, #296]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 8009654:	f043 0301 	orr.w	r3, r3, #1
 8009658:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800965c:	f7ff fa88 	bl	8008b70 <HAL_GetTick>
 8009660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009662:	e008      	b.n	8009676 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009664:	f7ff fa84 	bl	8008b70 <HAL_GetTick>
 8009668:	4602      	mov	r2, r0
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	2b02      	cmp	r3, #2
 8009670:	d901      	bls.n	8009676 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009672:	2303      	movs	r3, #3
 8009674:	e212      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009676:	4b41      	ldr	r3, [pc, #260]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 8009678:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800967c:	f003 0302 	and.w	r3, r3, #2
 8009680:	2b00      	cmp	r3, #0
 8009682:	d0ef      	beq.n	8009664 <HAL_RCC_OscConfig+0x3ec>
 8009684:	e01b      	b.n	80096be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009686:	4b3d      	ldr	r3, [pc, #244]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 8009688:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800968c:	4a3b      	ldr	r2, [pc, #236]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 800968e:	f023 0301 	bic.w	r3, r3, #1
 8009692:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009696:	f7ff fa6b 	bl	8008b70 <HAL_GetTick>
 800969a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800969c:	e008      	b.n	80096b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800969e:	f7ff fa67 	bl	8008b70 <HAL_GetTick>
 80096a2:	4602      	mov	r2, r0
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	1ad3      	subs	r3, r2, r3
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	d901      	bls.n	80096b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80096ac:	2303      	movs	r3, #3
 80096ae:	e1f5      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80096b0:	4b32      	ldr	r3, [pc, #200]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 80096b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80096b6:	f003 0302 	and.w	r3, r3, #2
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d1ef      	bne.n	800969e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f003 0304 	and.w	r3, r3, #4
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f000 80a6 	beq.w	8009818 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80096cc:	2300      	movs	r3, #0
 80096ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80096d0:	4b2a      	ldr	r3, [pc, #168]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 80096d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10d      	bne.n	80096f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80096dc:	4b27      	ldr	r3, [pc, #156]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 80096de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096e0:	4a26      	ldr	r2, [pc, #152]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 80096e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80096e8:	4b24      	ldr	r3, [pc, #144]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 80096ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096f0:	60bb      	str	r3, [r7, #8]
 80096f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80096f4:	2301      	movs	r3, #1
 80096f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80096f8:	4b21      	ldr	r3, [pc, #132]	@ (8009780 <HAL_RCC_OscConfig+0x508>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009700:	2b00      	cmp	r3, #0
 8009702:	d118      	bne.n	8009736 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009704:	4b1e      	ldr	r3, [pc, #120]	@ (8009780 <HAL_RCC_OscConfig+0x508>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a1d      	ldr	r2, [pc, #116]	@ (8009780 <HAL_RCC_OscConfig+0x508>)
 800970a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800970e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009710:	f7ff fa2e 	bl	8008b70 <HAL_GetTick>
 8009714:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009716:	e008      	b.n	800972a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009718:	f7ff fa2a 	bl	8008b70 <HAL_GetTick>
 800971c:	4602      	mov	r2, r0
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	1ad3      	subs	r3, r2, r3
 8009722:	2b02      	cmp	r3, #2
 8009724:	d901      	bls.n	800972a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8009726:	2303      	movs	r3, #3
 8009728:	e1b8      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800972a:	4b15      	ldr	r3, [pc, #84]	@ (8009780 <HAL_RCC_OscConfig+0x508>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009732:	2b00      	cmp	r3, #0
 8009734:	d0f0      	beq.n	8009718 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	2b01      	cmp	r3, #1
 800973c:	d108      	bne.n	8009750 <HAL_RCC_OscConfig+0x4d8>
 800973e:	4b0f      	ldr	r3, [pc, #60]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 8009740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009744:	4a0d      	ldr	r2, [pc, #52]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 8009746:	f043 0301 	orr.w	r3, r3, #1
 800974a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800974e:	e029      	b.n	80097a4 <HAL_RCC_OscConfig+0x52c>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	2b05      	cmp	r3, #5
 8009756:	d115      	bne.n	8009784 <HAL_RCC_OscConfig+0x50c>
 8009758:	4b08      	ldr	r3, [pc, #32]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 800975a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800975e:	4a07      	ldr	r2, [pc, #28]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 8009760:	f043 0304 	orr.w	r3, r3, #4
 8009764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009768:	4b04      	ldr	r3, [pc, #16]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 800976a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800976e:	4a03      	ldr	r2, [pc, #12]	@ (800977c <HAL_RCC_OscConfig+0x504>)
 8009770:	f043 0301 	orr.w	r3, r3, #1
 8009774:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009778:	e014      	b.n	80097a4 <HAL_RCC_OscConfig+0x52c>
 800977a:	bf00      	nop
 800977c:	40021000 	.word	0x40021000
 8009780:	40007000 	.word	0x40007000
 8009784:	4b9d      	ldr	r3, [pc, #628]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 8009786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800978a:	4a9c      	ldr	r2, [pc, #624]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 800978c:	f023 0301 	bic.w	r3, r3, #1
 8009790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009794:	4b99      	ldr	r3, [pc, #612]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 8009796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800979a:	4a98      	ldr	r2, [pc, #608]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 800979c:	f023 0304 	bic.w	r3, r3, #4
 80097a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d016      	beq.n	80097da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097ac:	f7ff f9e0 	bl	8008b70 <HAL_GetTick>
 80097b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097b2:	e00a      	b.n	80097ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097b4:	f7ff f9dc 	bl	8008b70 <HAL_GetTick>
 80097b8:	4602      	mov	r2, r0
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	1ad3      	subs	r3, r2, r3
 80097be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d901      	bls.n	80097ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80097c6:	2303      	movs	r3, #3
 80097c8:	e168      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097ca:	4b8c      	ldr	r3, [pc, #560]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 80097cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097d0:	f003 0302 	and.w	r3, r3, #2
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d0ed      	beq.n	80097b4 <HAL_RCC_OscConfig+0x53c>
 80097d8:	e015      	b.n	8009806 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097da:	f7ff f9c9 	bl	8008b70 <HAL_GetTick>
 80097de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80097e0:	e00a      	b.n	80097f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097e2:	f7ff f9c5 	bl	8008b70 <HAL_GetTick>
 80097e6:	4602      	mov	r2, r0
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d901      	bls.n	80097f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80097f4:	2303      	movs	r3, #3
 80097f6:	e151      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80097f8:	4b80      	ldr	r3, [pc, #512]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 80097fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097fe:	f003 0302 	and.w	r3, r3, #2
 8009802:	2b00      	cmp	r3, #0
 8009804:	d1ed      	bne.n	80097e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009806:	7ffb      	ldrb	r3, [r7, #31]
 8009808:	2b01      	cmp	r3, #1
 800980a:	d105      	bne.n	8009818 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800980c:	4b7b      	ldr	r3, [pc, #492]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 800980e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009810:	4a7a      	ldr	r2, [pc, #488]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 8009812:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009816:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f003 0320 	and.w	r3, r3, #32
 8009820:	2b00      	cmp	r3, #0
 8009822:	d03c      	beq.n	800989e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009828:	2b00      	cmp	r3, #0
 800982a:	d01c      	beq.n	8009866 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800982c:	4b73      	ldr	r3, [pc, #460]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 800982e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009832:	4a72      	ldr	r2, [pc, #456]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 8009834:	f043 0301 	orr.w	r3, r3, #1
 8009838:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800983c:	f7ff f998 	bl	8008b70 <HAL_GetTick>
 8009840:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009842:	e008      	b.n	8009856 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009844:	f7ff f994 	bl	8008b70 <HAL_GetTick>
 8009848:	4602      	mov	r2, r0
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	2b02      	cmp	r3, #2
 8009850:	d901      	bls.n	8009856 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8009852:	2303      	movs	r3, #3
 8009854:	e122      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009856:	4b69      	ldr	r3, [pc, #420]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 8009858:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800985c:	f003 0302 	and.w	r3, r3, #2
 8009860:	2b00      	cmp	r3, #0
 8009862:	d0ef      	beq.n	8009844 <HAL_RCC_OscConfig+0x5cc>
 8009864:	e01b      	b.n	800989e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009866:	4b65      	ldr	r3, [pc, #404]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 8009868:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800986c:	4a63      	ldr	r2, [pc, #396]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 800986e:	f023 0301 	bic.w	r3, r3, #1
 8009872:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009876:	f7ff f97b 	bl	8008b70 <HAL_GetTick>
 800987a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800987c:	e008      	b.n	8009890 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800987e:	f7ff f977 	bl	8008b70 <HAL_GetTick>
 8009882:	4602      	mov	r2, r0
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	1ad3      	subs	r3, r2, r3
 8009888:	2b02      	cmp	r3, #2
 800988a:	d901      	bls.n	8009890 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800988c:	2303      	movs	r3, #3
 800988e:	e105      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009890:	4b5a      	ldr	r3, [pc, #360]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 8009892:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009896:	f003 0302 	and.w	r3, r3, #2
 800989a:	2b00      	cmp	r3, #0
 800989c:	d1ef      	bne.n	800987e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f000 80f9 	beq.w	8009a9a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	f040 80cf 	bne.w	8009a50 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80098b2:	4b52      	ldr	r3, [pc, #328]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	f003 0203 	and.w	r2, r3, #3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d12c      	bne.n	8009920 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098d0:	3b01      	subs	r3, #1
 80098d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d123      	bne.n	8009920 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d11b      	bne.n	8009920 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098f2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d113      	bne.n	8009920 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009902:	085b      	lsrs	r3, r3, #1
 8009904:	3b01      	subs	r3, #1
 8009906:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009908:	429a      	cmp	r2, r3
 800990a:	d109      	bne.n	8009920 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009916:	085b      	lsrs	r3, r3, #1
 8009918:	3b01      	subs	r3, #1
 800991a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800991c:	429a      	cmp	r2, r3
 800991e:	d071      	beq.n	8009a04 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	2b0c      	cmp	r3, #12
 8009924:	d068      	beq.n	80099f8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009926:	4b35      	ldr	r3, [pc, #212]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800992e:	2b00      	cmp	r3, #0
 8009930:	d105      	bne.n	800993e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8009932:	4b32      	ldr	r3, [pc, #200]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800993a:	2b00      	cmp	r3, #0
 800993c:	d001      	beq.n	8009942 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e0ac      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009942:	4b2e      	ldr	r3, [pc, #184]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a2d      	ldr	r2, [pc, #180]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 8009948:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800994c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800994e:	f7ff f90f 	bl	8008b70 <HAL_GetTick>
 8009952:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009954:	e008      	b.n	8009968 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009956:	f7ff f90b 	bl	8008b70 <HAL_GetTick>
 800995a:	4602      	mov	r2, r0
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	1ad3      	subs	r3, r2, r3
 8009960:	2b02      	cmp	r3, #2
 8009962:	d901      	bls.n	8009968 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8009964:	2303      	movs	r3, #3
 8009966:	e099      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009968:	4b24      	ldr	r3, [pc, #144]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009970:	2b00      	cmp	r3, #0
 8009972:	d1f0      	bne.n	8009956 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009974:	4b21      	ldr	r3, [pc, #132]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 8009976:	68da      	ldr	r2, [r3, #12]
 8009978:	4b21      	ldr	r3, [pc, #132]	@ (8009a00 <HAL_RCC_OscConfig+0x788>)
 800997a:	4013      	ands	r3, r2
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009984:	3a01      	subs	r2, #1
 8009986:	0112      	lsls	r2, r2, #4
 8009988:	4311      	orrs	r1, r2
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800998e:	0212      	lsls	r2, r2, #8
 8009990:	4311      	orrs	r1, r2
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009996:	0852      	lsrs	r2, r2, #1
 8009998:	3a01      	subs	r2, #1
 800999a:	0552      	lsls	r2, r2, #21
 800999c:	4311      	orrs	r1, r2
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80099a2:	0852      	lsrs	r2, r2, #1
 80099a4:	3a01      	subs	r2, #1
 80099a6:	0652      	lsls	r2, r2, #25
 80099a8:	4311      	orrs	r1, r2
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80099ae:	06d2      	lsls	r2, r2, #27
 80099b0:	430a      	orrs	r2, r1
 80099b2:	4912      	ldr	r1, [pc, #72]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 80099b4:	4313      	orrs	r3, r2
 80099b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80099b8:	4b10      	ldr	r3, [pc, #64]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a0f      	ldr	r2, [pc, #60]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 80099be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80099c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80099c4:	4b0d      	ldr	r3, [pc, #52]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	4a0c      	ldr	r2, [pc, #48]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 80099ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80099ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80099d0:	f7ff f8ce 	bl	8008b70 <HAL_GetTick>
 80099d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80099d6:	e008      	b.n	80099ea <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099d8:	f7ff f8ca 	bl	8008b70 <HAL_GetTick>
 80099dc:	4602      	mov	r2, r0
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	2b02      	cmp	r3, #2
 80099e4:	d901      	bls.n	80099ea <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80099e6:	2303      	movs	r3, #3
 80099e8:	e058      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80099ea:	4b04      	ldr	r3, [pc, #16]	@ (80099fc <HAL_RCC_OscConfig+0x784>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d0f0      	beq.n	80099d8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80099f6:	e050      	b.n	8009a9a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	e04f      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
 80099fc:	40021000 	.word	0x40021000
 8009a00:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a04:	4b27      	ldr	r3, [pc, #156]	@ (8009aa4 <HAL_RCC_OscConfig+0x82c>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d144      	bne.n	8009a9a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009a10:	4b24      	ldr	r3, [pc, #144]	@ (8009aa4 <HAL_RCC_OscConfig+0x82c>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a23      	ldr	r2, [pc, #140]	@ (8009aa4 <HAL_RCC_OscConfig+0x82c>)
 8009a16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009a1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009a1c:	4b21      	ldr	r3, [pc, #132]	@ (8009aa4 <HAL_RCC_OscConfig+0x82c>)
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	4a20      	ldr	r2, [pc, #128]	@ (8009aa4 <HAL_RCC_OscConfig+0x82c>)
 8009a22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009a26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009a28:	f7ff f8a2 	bl	8008b70 <HAL_GetTick>
 8009a2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a2e:	e008      	b.n	8009a42 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a30:	f7ff f89e 	bl	8008b70 <HAL_GetTick>
 8009a34:	4602      	mov	r2, r0
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	1ad3      	subs	r3, r2, r3
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d901      	bls.n	8009a42 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e02c      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a42:	4b18      	ldr	r3, [pc, #96]	@ (8009aa4 <HAL_RCC_OscConfig+0x82c>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d0f0      	beq.n	8009a30 <HAL_RCC_OscConfig+0x7b8>
 8009a4e:	e024      	b.n	8009a9a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	2b0c      	cmp	r3, #12
 8009a54:	d01f      	beq.n	8009a96 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a56:	4b13      	ldr	r3, [pc, #76]	@ (8009aa4 <HAL_RCC_OscConfig+0x82c>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a12      	ldr	r2, [pc, #72]	@ (8009aa4 <HAL_RCC_OscConfig+0x82c>)
 8009a5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a62:	f7ff f885 	bl	8008b70 <HAL_GetTick>
 8009a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009a68:	e008      	b.n	8009a7c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a6a:	f7ff f881 	bl	8008b70 <HAL_GetTick>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	1ad3      	subs	r3, r2, r3
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	d901      	bls.n	8009a7c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8009a78:	2303      	movs	r3, #3
 8009a7a:	e00f      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009a7c:	4b09      	ldr	r3, [pc, #36]	@ (8009aa4 <HAL_RCC_OscConfig+0x82c>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1f0      	bne.n	8009a6a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009a88:	4b06      	ldr	r3, [pc, #24]	@ (8009aa4 <HAL_RCC_OscConfig+0x82c>)
 8009a8a:	68da      	ldr	r2, [r3, #12]
 8009a8c:	4905      	ldr	r1, [pc, #20]	@ (8009aa4 <HAL_RCC_OscConfig+0x82c>)
 8009a8e:	4b06      	ldr	r3, [pc, #24]	@ (8009aa8 <HAL_RCC_OscConfig+0x830>)
 8009a90:	4013      	ands	r3, r2
 8009a92:	60cb      	str	r3, [r1, #12]
 8009a94:	e001      	b.n	8009a9a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e000      	b.n	8009a9c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3720      	adds	r7, #32
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	40021000 	.word	0x40021000
 8009aa8:	feeefffc 	.word	0xfeeefffc

08009aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d101      	bne.n	8009ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	e0e7      	b.n	8009c90 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009ac0:	4b75      	ldr	r3, [pc, #468]	@ (8009c98 <HAL_RCC_ClockConfig+0x1ec>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f003 0307 	and.w	r3, r3, #7
 8009ac8:	683a      	ldr	r2, [r7, #0]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d910      	bls.n	8009af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ace:	4b72      	ldr	r3, [pc, #456]	@ (8009c98 <HAL_RCC_ClockConfig+0x1ec>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f023 0207 	bic.w	r2, r3, #7
 8009ad6:	4970      	ldr	r1, [pc, #448]	@ (8009c98 <HAL_RCC_ClockConfig+0x1ec>)
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	4313      	orrs	r3, r2
 8009adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ade:	4b6e      	ldr	r3, [pc, #440]	@ (8009c98 <HAL_RCC_ClockConfig+0x1ec>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f003 0307 	and.w	r3, r3, #7
 8009ae6:	683a      	ldr	r2, [r7, #0]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d001      	beq.n	8009af0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	e0cf      	b.n	8009c90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f003 0302 	and.w	r3, r3, #2
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d010      	beq.n	8009b1e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	689a      	ldr	r2, [r3, #8]
 8009b00:	4b66      	ldr	r3, [pc, #408]	@ (8009c9c <HAL_RCC_ClockConfig+0x1f0>)
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d908      	bls.n	8009b1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b0c:	4b63      	ldr	r3, [pc, #396]	@ (8009c9c <HAL_RCC_ClockConfig+0x1f0>)
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	4960      	ldr	r1, [pc, #384]	@ (8009c9c <HAL_RCC_ClockConfig+0x1f0>)
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f003 0301 	and.w	r3, r3, #1
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d04c      	beq.n	8009bc4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	2b03      	cmp	r3, #3
 8009b30:	d107      	bne.n	8009b42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b32:	4b5a      	ldr	r3, [pc, #360]	@ (8009c9c <HAL_RCC_ClockConfig+0x1f0>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d121      	bne.n	8009b82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e0a6      	b.n	8009c90 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	d107      	bne.n	8009b5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009b4a:	4b54      	ldr	r3, [pc, #336]	@ (8009c9c <HAL_RCC_ClockConfig+0x1f0>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d115      	bne.n	8009b82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e09a      	b.n	8009c90 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d107      	bne.n	8009b72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009b62:	4b4e      	ldr	r3, [pc, #312]	@ (8009c9c <HAL_RCC_ClockConfig+0x1f0>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f003 0302 	and.w	r3, r3, #2
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d109      	bne.n	8009b82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e08e      	b.n	8009c90 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009b72:	4b4a      	ldr	r3, [pc, #296]	@ (8009c9c <HAL_RCC_ClockConfig+0x1f0>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d101      	bne.n	8009b82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e086      	b.n	8009c90 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009b82:	4b46      	ldr	r3, [pc, #280]	@ (8009c9c <HAL_RCC_ClockConfig+0x1f0>)
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	f023 0203 	bic.w	r2, r3, #3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	4943      	ldr	r1, [pc, #268]	@ (8009c9c <HAL_RCC_ClockConfig+0x1f0>)
 8009b90:	4313      	orrs	r3, r2
 8009b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b94:	f7fe ffec 	bl	8008b70 <HAL_GetTick>
 8009b98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b9a:	e00a      	b.n	8009bb2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b9c:	f7fe ffe8 	bl	8008b70 <HAL_GetTick>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d901      	bls.n	8009bb2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	e06e      	b.n	8009c90 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009bb2:	4b3a      	ldr	r3, [pc, #232]	@ (8009c9c <HAL_RCC_ClockConfig+0x1f0>)
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	f003 020c 	and.w	r2, r3, #12
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d1eb      	bne.n	8009b9c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f003 0302 	and.w	r3, r3, #2
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d010      	beq.n	8009bf2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	689a      	ldr	r2, [r3, #8]
 8009bd4:	4b31      	ldr	r3, [pc, #196]	@ (8009c9c <HAL_RCC_ClockConfig+0x1f0>)
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d208      	bcs.n	8009bf2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009be0:	4b2e      	ldr	r3, [pc, #184]	@ (8009c9c <HAL_RCC_ClockConfig+0x1f0>)
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	492b      	ldr	r1, [pc, #172]	@ (8009c9c <HAL_RCC_ClockConfig+0x1f0>)
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009bf2:	4b29      	ldr	r3, [pc, #164]	@ (8009c98 <HAL_RCC_ClockConfig+0x1ec>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f003 0307 	and.w	r3, r3, #7
 8009bfa:	683a      	ldr	r2, [r7, #0]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d210      	bcs.n	8009c22 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c00:	4b25      	ldr	r3, [pc, #148]	@ (8009c98 <HAL_RCC_ClockConfig+0x1ec>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f023 0207 	bic.w	r2, r3, #7
 8009c08:	4923      	ldr	r1, [pc, #140]	@ (8009c98 <HAL_RCC_ClockConfig+0x1ec>)
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c10:	4b21      	ldr	r3, [pc, #132]	@ (8009c98 <HAL_RCC_ClockConfig+0x1ec>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f003 0307 	and.w	r3, r3, #7
 8009c18:	683a      	ldr	r2, [r7, #0]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d001      	beq.n	8009c22 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e036      	b.n	8009c90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f003 0304 	and.w	r3, r3, #4
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d008      	beq.n	8009c40 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8009c9c <HAL_RCC_ClockConfig+0x1f0>)
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	4918      	ldr	r1, [pc, #96]	@ (8009c9c <HAL_RCC_ClockConfig+0x1f0>)
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f003 0308 	and.w	r3, r3, #8
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d009      	beq.n	8009c60 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009c4c:	4b13      	ldr	r3, [pc, #76]	@ (8009c9c <HAL_RCC_ClockConfig+0x1f0>)
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	691b      	ldr	r3, [r3, #16]
 8009c58:	00db      	lsls	r3, r3, #3
 8009c5a:	4910      	ldr	r1, [pc, #64]	@ (8009c9c <HAL_RCC_ClockConfig+0x1f0>)
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009c60:	f000 f824 	bl	8009cac <HAL_RCC_GetSysClockFreq>
 8009c64:	4602      	mov	r2, r0
 8009c66:	4b0d      	ldr	r3, [pc, #52]	@ (8009c9c <HAL_RCC_ClockConfig+0x1f0>)
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	091b      	lsrs	r3, r3, #4
 8009c6c:	f003 030f 	and.w	r3, r3, #15
 8009c70:	490b      	ldr	r1, [pc, #44]	@ (8009ca0 <HAL_RCC_ClockConfig+0x1f4>)
 8009c72:	5ccb      	ldrb	r3, [r1, r3]
 8009c74:	f003 031f 	and.w	r3, r3, #31
 8009c78:	fa22 f303 	lsr.w	r3, r2, r3
 8009c7c:	4a09      	ldr	r2, [pc, #36]	@ (8009ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8009c7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009c80:	4b09      	ldr	r3, [pc, #36]	@ (8009ca8 <HAL_RCC_ClockConfig+0x1fc>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7fe ff23 	bl	8008ad0 <HAL_InitTick>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	72fb      	strb	r3, [r7, #11]

  return status;
 8009c8e:	7afb      	ldrb	r3, [r7, #11]
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3710      	adds	r7, #16
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	40022000 	.word	0x40022000
 8009c9c:	40021000 	.word	0x40021000
 8009ca0:	0800b450 	.word	0x0800b450
 8009ca4:	20000014 	.word	0x20000014
 8009ca8:	20000018 	.word	0x20000018

08009cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b089      	sub	sp, #36	@ 0x24
 8009cb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	61fb      	str	r3, [r7, #28]
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009cba:	4b3e      	ldr	r3, [pc, #248]	@ (8009db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	f003 030c 	and.w	r3, r3, #12
 8009cc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009cc4:	4b3b      	ldr	r3, [pc, #236]	@ (8009db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	f003 0303 	and.w	r3, r3, #3
 8009ccc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d005      	beq.n	8009ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	2b0c      	cmp	r3, #12
 8009cd8:	d121      	bne.n	8009d1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d11e      	bne.n	8009d1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009ce0:	4b34      	ldr	r3, [pc, #208]	@ (8009db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f003 0308 	and.w	r3, r3, #8
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d107      	bne.n	8009cfc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009cec:	4b31      	ldr	r3, [pc, #196]	@ (8009db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009cf2:	0a1b      	lsrs	r3, r3, #8
 8009cf4:	f003 030f 	and.w	r3, r3, #15
 8009cf8:	61fb      	str	r3, [r7, #28]
 8009cfa:	e005      	b.n	8009d08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8009db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	091b      	lsrs	r3, r3, #4
 8009d02:	f003 030f 	and.w	r3, r3, #15
 8009d06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009d08:	4a2b      	ldr	r2, [pc, #172]	@ (8009db8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10d      	bne.n	8009d34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009d1c:	e00a      	b.n	8009d34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	2b04      	cmp	r3, #4
 8009d22:	d102      	bne.n	8009d2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009d24:	4b25      	ldr	r3, [pc, #148]	@ (8009dbc <HAL_RCC_GetSysClockFreq+0x110>)
 8009d26:	61bb      	str	r3, [r7, #24]
 8009d28:	e004      	b.n	8009d34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	2b08      	cmp	r3, #8
 8009d2e:	d101      	bne.n	8009d34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009d30:	4b23      	ldr	r3, [pc, #140]	@ (8009dc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8009d32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	2b0c      	cmp	r3, #12
 8009d38:	d134      	bne.n	8009da4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8009db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	f003 0303 	and.w	r3, r3, #3
 8009d42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	d003      	beq.n	8009d52 <HAL_RCC_GetSysClockFreq+0xa6>
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	2b03      	cmp	r3, #3
 8009d4e:	d003      	beq.n	8009d58 <HAL_RCC_GetSysClockFreq+0xac>
 8009d50:	e005      	b.n	8009d5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009d52:	4b1a      	ldr	r3, [pc, #104]	@ (8009dbc <HAL_RCC_GetSysClockFreq+0x110>)
 8009d54:	617b      	str	r3, [r7, #20]
      break;
 8009d56:	e005      	b.n	8009d64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009d58:	4b19      	ldr	r3, [pc, #100]	@ (8009dc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8009d5a:	617b      	str	r3, [r7, #20]
      break;
 8009d5c:	e002      	b.n	8009d64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	617b      	str	r3, [r7, #20]
      break;
 8009d62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009d64:	4b13      	ldr	r3, [pc, #76]	@ (8009db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	091b      	lsrs	r3, r3, #4
 8009d6a:	f003 0307 	and.w	r3, r3, #7
 8009d6e:	3301      	adds	r3, #1
 8009d70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009d72:	4b10      	ldr	r3, [pc, #64]	@ (8009db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	0a1b      	lsrs	r3, r3, #8
 8009d78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d7c:	697a      	ldr	r2, [r7, #20]
 8009d7e:	fb03 f202 	mul.w	r2, r3, r2
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8009db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	0e5b      	lsrs	r3, r3, #25
 8009d90:	f003 0303 	and.w	r3, r3, #3
 8009d94:	3301      	adds	r3, #1
 8009d96:	005b      	lsls	r3, r3, #1
 8009d98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009d9a:	697a      	ldr	r2, [r7, #20]
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009da2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009da4:	69bb      	ldr	r3, [r7, #24]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3724      	adds	r7, #36	@ 0x24
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	40021000 	.word	0x40021000
 8009db8:	0800b468 	.word	0x0800b468
 8009dbc:	00f42400 	.word	0x00f42400
 8009dc0:	007a1200 	.word	0x007a1200

08009dc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009dc8:	4b03      	ldr	r3, [pc, #12]	@ (8009dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8009dca:	681b      	ldr	r3, [r3, #0]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
 8009dd6:	bf00      	nop
 8009dd8:	20000014 	.word	0x20000014

08009ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009de0:	f7ff fff0 	bl	8009dc4 <HAL_RCC_GetHCLKFreq>
 8009de4:	4602      	mov	r2, r0
 8009de6:	4b06      	ldr	r3, [pc, #24]	@ (8009e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	0a1b      	lsrs	r3, r3, #8
 8009dec:	f003 0307 	and.w	r3, r3, #7
 8009df0:	4904      	ldr	r1, [pc, #16]	@ (8009e04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009df2:	5ccb      	ldrb	r3, [r1, r3]
 8009df4:	f003 031f 	and.w	r3, r3, #31
 8009df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	40021000 	.word	0x40021000
 8009e04:	0800b460 	.word	0x0800b460

08009e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009e0c:	f7ff ffda 	bl	8009dc4 <HAL_RCC_GetHCLKFreq>
 8009e10:	4602      	mov	r2, r0
 8009e12:	4b06      	ldr	r3, [pc, #24]	@ (8009e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	0adb      	lsrs	r3, r3, #11
 8009e18:	f003 0307 	and.w	r3, r3, #7
 8009e1c:	4904      	ldr	r1, [pc, #16]	@ (8009e30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009e1e:	5ccb      	ldrb	r3, [r1, r3]
 8009e20:	f003 031f 	and.w	r3, r3, #31
 8009e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	40021000 	.word	0x40021000
 8009e30:	0800b460 	.word	0x0800b460

08009e34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009e40:	4b2a      	ldr	r3, [pc, #168]	@ (8009eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d003      	beq.n	8009e54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009e4c:	f7ff f9a0 	bl	8009190 <HAL_PWREx_GetVoltageRange>
 8009e50:	6178      	str	r0, [r7, #20]
 8009e52:	e014      	b.n	8009e7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009e54:	4b25      	ldr	r3, [pc, #148]	@ (8009eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e58:	4a24      	ldr	r2, [pc, #144]	@ (8009eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009e5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e60:	4b22      	ldr	r3, [pc, #136]	@ (8009eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e68:	60fb      	str	r3, [r7, #12]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009e6c:	f7ff f990 	bl	8009190 <HAL_PWREx_GetVoltageRange>
 8009e70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009e72:	4b1e      	ldr	r3, [pc, #120]	@ (8009eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e76:	4a1d      	ldr	r2, [pc, #116]	@ (8009eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009e78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e7c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e84:	d10b      	bne.n	8009e9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2b80      	cmp	r3, #128	@ 0x80
 8009e8a:	d919      	bls.n	8009ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2ba0      	cmp	r3, #160	@ 0xa0
 8009e90:	d902      	bls.n	8009e98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009e92:	2302      	movs	r3, #2
 8009e94:	613b      	str	r3, [r7, #16]
 8009e96:	e013      	b.n	8009ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009e98:	2301      	movs	r3, #1
 8009e9a:	613b      	str	r3, [r7, #16]
 8009e9c:	e010      	b.n	8009ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2b80      	cmp	r3, #128	@ 0x80
 8009ea2:	d902      	bls.n	8009eaa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009ea4:	2303      	movs	r3, #3
 8009ea6:	613b      	str	r3, [r7, #16]
 8009ea8:	e00a      	b.n	8009ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2b80      	cmp	r3, #128	@ 0x80
 8009eae:	d102      	bne.n	8009eb6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009eb0:	2302      	movs	r3, #2
 8009eb2:	613b      	str	r3, [r7, #16]
 8009eb4:	e004      	b.n	8009ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b70      	cmp	r3, #112	@ 0x70
 8009eba:	d101      	bne.n	8009ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8009ef0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f023 0207 	bic.w	r2, r3, #7
 8009ec8:	4909      	ldr	r1, [pc, #36]	@ (8009ef0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009ed0:	4b07      	ldr	r3, [pc, #28]	@ (8009ef0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 0307 	and.w	r3, r3, #7
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d001      	beq.n	8009ee2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e000      	b.n	8009ee4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3718      	adds	r7, #24
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	40021000 	.word	0x40021000
 8009ef0:	40022000 	.word	0x40022000

08009ef4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b086      	sub	sp, #24
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009efc:	2300      	movs	r3, #0
 8009efe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009f00:	2300      	movs	r3, #0
 8009f02:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d041      	beq.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009f14:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009f18:	d02a      	beq.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009f1a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009f1e:	d824      	bhi.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009f20:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009f24:	d008      	beq.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009f26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009f2a:	d81e      	bhi.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00a      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009f30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f34:	d010      	beq.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009f36:	e018      	b.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009f38:	4b86      	ldr	r3, [pc, #536]	@ (800a154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	4a85      	ldr	r2, [pc, #532]	@ (800a154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f42:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009f44:	e015      	b.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	3304      	adds	r3, #4
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f000 facd 	bl	800a4ec <RCCEx_PLLSAI1_Config>
 8009f52:	4603      	mov	r3, r0
 8009f54:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009f56:	e00c      	b.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	3320      	adds	r3, #32
 8009f5c:	2100      	movs	r1, #0
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f000 fbb6 	bl	800a6d0 <RCCEx_PLLSAI2_Config>
 8009f64:	4603      	mov	r3, r0
 8009f66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009f68:	e003      	b.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	74fb      	strb	r3, [r7, #19]
      break;
 8009f6e:	e000      	b.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009f70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f72:	7cfb      	ldrb	r3, [r7, #19]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10b      	bne.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009f78:	4b76      	ldr	r3, [pc, #472]	@ (800a154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f7e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009f86:	4973      	ldr	r1, [pc, #460]	@ (800a154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8009f8e:	e001      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f90:	7cfb      	ldrb	r3, [r7, #19]
 8009f92:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d041      	beq.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fa4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009fa8:	d02a      	beq.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8009faa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009fae:	d824      	bhi.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009fb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fb4:	d008      	beq.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009fb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fba:	d81e      	bhi.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d00a      	beq.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009fc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009fc4:	d010      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009fc6:	e018      	b.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009fc8:	4b62      	ldr	r3, [pc, #392]	@ (800a154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	4a61      	ldr	r2, [pc, #388]	@ (800a154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009fd2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009fd4:	e015      	b.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	3304      	adds	r3, #4
 8009fda:	2100      	movs	r1, #0
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f000 fa85 	bl	800a4ec <RCCEx_PLLSAI1_Config>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009fe6:	e00c      	b.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	3320      	adds	r3, #32
 8009fec:	2100      	movs	r1, #0
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f000 fb6e 	bl	800a6d0 <RCCEx_PLLSAI2_Config>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009ff8:	e003      	b.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	74fb      	strb	r3, [r7, #19]
      break;
 8009ffe:	e000      	b.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800a000:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a002:	7cfb      	ldrb	r3, [r7, #19]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d10b      	bne.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a008:	4b52      	ldr	r3, [pc, #328]	@ (800a154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a00a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a00e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a016:	494f      	ldr	r1, [pc, #316]	@ (800a154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a018:	4313      	orrs	r3, r2
 800a01a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800a01e:	e001      	b.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a020:	7cfb      	ldrb	r3, [r7, #19]
 800a022:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f000 80a0 	beq.w	800a172 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a032:	2300      	movs	r3, #0
 800a034:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a036:	4b47      	ldr	r3, [pc, #284]	@ (800a154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a03a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d101      	bne.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800a042:	2301      	movs	r3, #1
 800a044:	e000      	b.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800a046:	2300      	movs	r3, #0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00d      	beq.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a04c:	4b41      	ldr	r3, [pc, #260]	@ (800a154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a04e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a050:	4a40      	ldr	r2, [pc, #256]	@ (800a154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a052:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a056:	6593      	str	r3, [r2, #88]	@ 0x58
 800a058:	4b3e      	ldr	r3, [pc, #248]	@ (800a154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a05a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a05c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a060:	60bb      	str	r3, [r7, #8]
 800a062:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a064:	2301      	movs	r3, #1
 800a066:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a068:	4b3b      	ldr	r3, [pc, #236]	@ (800a158 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a3a      	ldr	r2, [pc, #232]	@ (800a158 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a06e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a072:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a074:	f7fe fd7c 	bl	8008b70 <HAL_GetTick>
 800a078:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a07a:	e009      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a07c:	f7fe fd78 	bl	8008b70 <HAL_GetTick>
 800a080:	4602      	mov	r2, r0
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	1ad3      	subs	r3, r2, r3
 800a086:	2b02      	cmp	r3, #2
 800a088:	d902      	bls.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800a08a:	2303      	movs	r3, #3
 800a08c:	74fb      	strb	r3, [r7, #19]
        break;
 800a08e:	e005      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a090:	4b31      	ldr	r3, [pc, #196]	@ (800a158 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d0ef      	beq.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800a09c:	7cfb      	ldrb	r3, [r7, #19]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d15c      	bne.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a0a2:	4b2c      	ldr	r3, [pc, #176]	@ (800a154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a0a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d01f      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0ba:	697a      	ldr	r2, [r7, #20]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d019      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a0c0:	4b24      	ldr	r3, [pc, #144]	@ (800a154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a0c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a0ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a0cc:	4b21      	ldr	r3, [pc, #132]	@ (800a154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a0ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0d2:	4a20      	ldr	r2, [pc, #128]	@ (800a154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a0d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a0d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a0dc:	4b1d      	ldr	r3, [pc, #116]	@ (800a154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a0de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0e2:	4a1c      	ldr	r2, [pc, #112]	@ (800a154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a0e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a0e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a0ec:	4a19      	ldr	r2, [pc, #100]	@ (800a154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	f003 0301 	and.w	r3, r3, #1
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d016      	beq.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0fe:	f7fe fd37 	bl	8008b70 <HAL_GetTick>
 800a102:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a104:	e00b      	b.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a106:	f7fe fd33 	bl	8008b70 <HAL_GetTick>
 800a10a:	4602      	mov	r2, r0
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	1ad3      	subs	r3, r2, r3
 800a110:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a114:	4293      	cmp	r3, r2
 800a116:	d902      	bls.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800a118:	2303      	movs	r3, #3
 800a11a:	74fb      	strb	r3, [r7, #19]
            break;
 800a11c:	e006      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a11e:	4b0d      	ldr	r3, [pc, #52]	@ (800a154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a124:	f003 0302 	and.w	r3, r3, #2
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d0ec      	beq.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800a12c:	7cfb      	ldrb	r3, [r7, #19]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10c      	bne.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a132:	4b08      	ldr	r3, [pc, #32]	@ (800a154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a138:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a142:	4904      	ldr	r1, [pc, #16]	@ (800a154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a144:	4313      	orrs	r3, r2
 800a146:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800a14a:	e009      	b.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a14c:	7cfb      	ldrb	r3, [r7, #19]
 800a14e:	74bb      	strb	r3, [r7, #18]
 800a150:	e006      	b.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800a152:	bf00      	nop
 800a154:	40021000 	.word	0x40021000
 800a158:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a15c:	7cfb      	ldrb	r3, [r7, #19]
 800a15e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a160:	7c7b      	ldrb	r3, [r7, #17]
 800a162:	2b01      	cmp	r3, #1
 800a164:	d105      	bne.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a166:	4ba6      	ldr	r3, [pc, #664]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a16a:	4aa5      	ldr	r2, [pc, #660]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a16c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a170:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f003 0301 	and.w	r3, r3, #1
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00a      	beq.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a17e:	4ba0      	ldr	r3, [pc, #640]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a184:	f023 0203 	bic.w	r2, r3, #3
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a18c:	499c      	ldr	r1, [pc, #624]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a18e:	4313      	orrs	r3, r2
 800a190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f003 0302 	and.w	r3, r3, #2
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00a      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a1a0:	4b97      	ldr	r3, [pc, #604]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a1a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1a6:	f023 020c 	bic.w	r2, r3, #12
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1ae:	4994      	ldr	r1, [pc, #592]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f003 0304 	and.w	r3, r3, #4
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00a      	beq.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a1c2:	4b8f      	ldr	r3, [pc, #572]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a1c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1d0:	498b      	ldr	r1, [pc, #556]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 0308 	and.w	r3, r3, #8
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d00a      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a1e4:	4b86      	ldr	r3, [pc, #536]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a1e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1f2:	4983      	ldr	r1, [pc, #524]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f003 0310 	and.w	r3, r3, #16
 800a202:	2b00      	cmp	r3, #0
 800a204:	d00a      	beq.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a206:	4b7e      	ldr	r3, [pc, #504]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a20c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a214:	497a      	ldr	r1, [pc, #488]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a216:	4313      	orrs	r3, r2
 800a218:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 0320 	and.w	r3, r3, #32
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00a      	beq.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a228:	4b75      	ldr	r3, [pc, #468]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a22a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a22e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a236:	4972      	ldr	r1, [pc, #456]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a238:	4313      	orrs	r3, r2
 800a23a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00a      	beq.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a24a:	4b6d      	ldr	r3, [pc, #436]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a24c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a250:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a258:	4969      	ldr	r1, [pc, #420]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a25a:	4313      	orrs	r3, r2
 800a25c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00a      	beq.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a26c:	4b64      	ldr	r3, [pc, #400]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a26e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a272:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a27a:	4961      	ldr	r1, [pc, #388]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a27c:	4313      	orrs	r3, r2
 800a27e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00a      	beq.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a28e:	4b5c      	ldr	r3, [pc, #368]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a294:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a29c:	4958      	ldr	r1, [pc, #352]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00a      	beq.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a2b0:	4b53      	ldr	r3, [pc, #332]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a2b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2be:	4950      	ldr	r1, [pc, #320]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00a      	beq.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a2d2:	4b4b      	ldr	r3, [pc, #300]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a2d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2e0:	4947      	ldr	r1, [pc, #284]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d00a      	beq.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a2f4:	4b42      	ldr	r3, [pc, #264]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a2f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a2fa:	f023 0203 	bic.w	r2, r3, #3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a302:	493f      	ldr	r1, [pc, #252]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a304:	4313      	orrs	r3, r2
 800a306:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a312:	2b00      	cmp	r3, #0
 800a314:	d028      	beq.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a316:	4b3a      	ldr	r3, [pc, #232]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a31c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a324:	4936      	ldr	r1, [pc, #216]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a326:	4313      	orrs	r3, r2
 800a328:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a330:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a334:	d106      	bne.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a336:	4b32      	ldr	r3, [pc, #200]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	4a31      	ldr	r2, [pc, #196]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a33c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a340:	60d3      	str	r3, [r2, #12]
 800a342:	e011      	b.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a348:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a34c:	d10c      	bne.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	3304      	adds	r3, #4
 800a352:	2101      	movs	r1, #1
 800a354:	4618      	mov	r0, r3
 800a356:	f000 f8c9 	bl	800a4ec <RCCEx_PLLSAI1_Config>
 800a35a:	4603      	mov	r3, r0
 800a35c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a35e:	7cfb      	ldrb	r3, [r7, #19]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d001      	beq.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800a364:	7cfb      	ldrb	r3, [r7, #19]
 800a366:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a370:	2b00      	cmp	r3, #0
 800a372:	d028      	beq.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a374:	4b22      	ldr	r3, [pc, #136]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a37a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a382:	491f      	ldr	r1, [pc, #124]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a384:	4313      	orrs	r3, r2
 800a386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a38e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a392:	d106      	bne.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a394:	4b1a      	ldr	r3, [pc, #104]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	4a19      	ldr	r2, [pc, #100]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a39a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a39e:	60d3      	str	r3, [r2, #12]
 800a3a0:	e011      	b.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a3aa:	d10c      	bne.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	3304      	adds	r3, #4
 800a3b0:	2101      	movs	r1, #1
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f000 f89a 	bl	800a4ec <RCCEx_PLLSAI1_Config>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a3bc:	7cfb      	ldrb	r3, [r7, #19]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800a3c2:	7cfb      	ldrb	r3, [r7, #19]
 800a3c4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d02a      	beq.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a3d2:	4b0b      	ldr	r3, [pc, #44]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a3d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3d8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a3e0:	4907      	ldr	r1, [pc, #28]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a3ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3f0:	d108      	bne.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a3f2:	4b03      	ldr	r3, [pc, #12]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	4a02      	ldr	r2, [pc, #8]	@ (800a400 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a3f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a3fc:	60d3      	str	r3, [r2, #12]
 800a3fe:	e013      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800a400:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a408:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a40c:	d10c      	bne.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	3304      	adds	r3, #4
 800a412:	2101      	movs	r1, #1
 800a414:	4618      	mov	r0, r3
 800a416:	f000 f869 	bl	800a4ec <RCCEx_PLLSAI1_Config>
 800a41a:	4603      	mov	r3, r0
 800a41c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a41e:	7cfb      	ldrb	r3, [r7, #19]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d001      	beq.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800a424:	7cfb      	ldrb	r3, [r7, #19]
 800a426:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a430:	2b00      	cmp	r3, #0
 800a432:	d02f      	beq.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a434:	4b2c      	ldr	r3, [pc, #176]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a43a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a442:	4929      	ldr	r1, [pc, #164]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a444:	4313      	orrs	r3, r2
 800a446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a44e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a452:	d10d      	bne.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	3304      	adds	r3, #4
 800a458:	2102      	movs	r1, #2
 800a45a:	4618      	mov	r0, r3
 800a45c:	f000 f846 	bl	800a4ec <RCCEx_PLLSAI1_Config>
 800a460:	4603      	mov	r3, r0
 800a462:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a464:	7cfb      	ldrb	r3, [r7, #19]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d014      	beq.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800a46a:	7cfb      	ldrb	r3, [r7, #19]
 800a46c:	74bb      	strb	r3, [r7, #18]
 800a46e:	e011      	b.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a474:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a478:	d10c      	bne.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	3320      	adds	r3, #32
 800a47e:	2102      	movs	r1, #2
 800a480:	4618      	mov	r0, r3
 800a482:	f000 f925 	bl	800a6d0 <RCCEx_PLLSAI2_Config>
 800a486:	4603      	mov	r3, r0
 800a488:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a48a:	7cfb      	ldrb	r3, [r7, #19]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d001      	beq.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800a490:	7cfb      	ldrb	r3, [r7, #19]
 800a492:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00b      	beq.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a4a0:	4b11      	ldr	r3, [pc, #68]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a4a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4a6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4b0:	490d      	ldr	r1, [pc, #52]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d00b      	beq.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a4c4:	4b08      	ldr	r3, [pc, #32]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a4c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4d4:	4904      	ldr	r1, [pc, #16]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a4dc:	7cbb      	ldrb	r3, [r7, #18]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3718      	adds	r7, #24
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	40021000 	.word	0x40021000

0800a4ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a4fa:	4b74      	ldr	r3, [pc, #464]	@ (800a6cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	f003 0303 	and.w	r3, r3, #3
 800a502:	2b00      	cmp	r3, #0
 800a504:	d018      	beq.n	800a538 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a506:	4b71      	ldr	r3, [pc, #452]	@ (800a6cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	f003 0203 	and.w	r2, r3, #3
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	429a      	cmp	r2, r3
 800a514:	d10d      	bne.n	800a532 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
       ||
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d009      	beq.n	800a532 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a51e:	4b6b      	ldr	r3, [pc, #428]	@ (800a6cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	091b      	lsrs	r3, r3, #4
 800a524:	f003 0307 	and.w	r3, r3, #7
 800a528:	1c5a      	adds	r2, r3, #1
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	685b      	ldr	r3, [r3, #4]
       ||
 800a52e:	429a      	cmp	r2, r3
 800a530:	d047      	beq.n	800a5c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	73fb      	strb	r3, [r7, #15]
 800a536:	e044      	b.n	800a5c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2b03      	cmp	r3, #3
 800a53e:	d018      	beq.n	800a572 <RCCEx_PLLSAI1_Config+0x86>
 800a540:	2b03      	cmp	r3, #3
 800a542:	d825      	bhi.n	800a590 <RCCEx_PLLSAI1_Config+0xa4>
 800a544:	2b01      	cmp	r3, #1
 800a546:	d002      	beq.n	800a54e <RCCEx_PLLSAI1_Config+0x62>
 800a548:	2b02      	cmp	r3, #2
 800a54a:	d009      	beq.n	800a560 <RCCEx_PLLSAI1_Config+0x74>
 800a54c:	e020      	b.n	800a590 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a54e:	4b5f      	ldr	r3, [pc, #380]	@ (800a6cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 0302 	and.w	r3, r3, #2
 800a556:	2b00      	cmp	r3, #0
 800a558:	d11d      	bne.n	800a596 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a55e:	e01a      	b.n	800a596 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a560:	4b5a      	ldr	r3, [pc, #360]	@ (800a6cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d116      	bne.n	800a59a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a56c:	2301      	movs	r3, #1
 800a56e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a570:	e013      	b.n	800a59a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a572:	4b56      	ldr	r3, [pc, #344]	@ (800a6cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10f      	bne.n	800a59e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a57e:	4b53      	ldr	r3, [pc, #332]	@ (800a6cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a586:	2b00      	cmp	r3, #0
 800a588:	d109      	bne.n	800a59e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a58e:	e006      	b.n	800a59e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a590:	2301      	movs	r3, #1
 800a592:	73fb      	strb	r3, [r7, #15]
      break;
 800a594:	e004      	b.n	800a5a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a596:	bf00      	nop
 800a598:	e002      	b.n	800a5a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a59a:	bf00      	nop
 800a59c:	e000      	b.n	800a5a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a59e:	bf00      	nop
    }

    if(status == HAL_OK)
 800a5a0:	7bfb      	ldrb	r3, [r7, #15]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d10d      	bne.n	800a5c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a5a6:	4b49      	ldr	r3, [pc, #292]	@ (800a6cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6819      	ldr	r1, [r3, #0]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	011b      	lsls	r3, r3, #4
 800a5ba:	430b      	orrs	r3, r1
 800a5bc:	4943      	ldr	r1, [pc, #268]	@ (800a6cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a5c2:	7bfb      	ldrb	r3, [r7, #15]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d17c      	bne.n	800a6c2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a5c8:	4b40      	ldr	r3, [pc, #256]	@ (800a6cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a3f      	ldr	r2, [pc, #252]	@ (800a6cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a5d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5d4:	f7fe facc 	bl	8008b70 <HAL_GetTick>
 800a5d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a5da:	e009      	b.n	800a5f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a5dc:	f7fe fac8 	bl	8008b70 <HAL_GetTick>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	1ad3      	subs	r3, r2, r3
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	d902      	bls.n	800a5f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a5ea:	2303      	movs	r3, #3
 800a5ec:	73fb      	strb	r3, [r7, #15]
        break;
 800a5ee:	e005      	b.n	800a5fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a5f0:	4b36      	ldr	r3, [pc, #216]	@ (800a6cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1ef      	bne.n	800a5dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d15f      	bne.n	800a6c2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d110      	bne.n	800a62a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a608:	4b30      	ldr	r3, [pc, #192]	@ (800a6cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800a60a:	691b      	ldr	r3, [r3, #16]
 800a60c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800a610:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	6892      	ldr	r2, [r2, #8]
 800a618:	0211      	lsls	r1, r2, #8
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	68d2      	ldr	r2, [r2, #12]
 800a61e:	06d2      	lsls	r2, r2, #27
 800a620:	430a      	orrs	r2, r1
 800a622:	492a      	ldr	r1, [pc, #168]	@ (800a6cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800a624:	4313      	orrs	r3, r2
 800a626:	610b      	str	r3, [r1, #16]
 800a628:	e027      	b.n	800a67a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d112      	bne.n	800a656 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a630:	4b26      	ldr	r3, [pc, #152]	@ (800a6cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800a638:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	6892      	ldr	r2, [r2, #8]
 800a640:	0211      	lsls	r1, r2, #8
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	6912      	ldr	r2, [r2, #16]
 800a646:	0852      	lsrs	r2, r2, #1
 800a648:	3a01      	subs	r2, #1
 800a64a:	0552      	lsls	r2, r2, #21
 800a64c:	430a      	orrs	r2, r1
 800a64e:	491f      	ldr	r1, [pc, #124]	@ (800a6cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800a650:	4313      	orrs	r3, r2
 800a652:	610b      	str	r3, [r1, #16]
 800a654:	e011      	b.n	800a67a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a656:	4b1d      	ldr	r3, [pc, #116]	@ (800a6cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800a65e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	6892      	ldr	r2, [r2, #8]
 800a666:	0211      	lsls	r1, r2, #8
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	6952      	ldr	r2, [r2, #20]
 800a66c:	0852      	lsrs	r2, r2, #1
 800a66e:	3a01      	subs	r2, #1
 800a670:	0652      	lsls	r2, r2, #25
 800a672:	430a      	orrs	r2, r1
 800a674:	4915      	ldr	r1, [pc, #84]	@ (800a6cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800a676:	4313      	orrs	r3, r2
 800a678:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a67a:	4b14      	ldr	r3, [pc, #80]	@ (800a6cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a13      	ldr	r2, [pc, #76]	@ (800a6cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800a680:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a684:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a686:	f7fe fa73 	bl	8008b70 <HAL_GetTick>
 800a68a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a68c:	e009      	b.n	800a6a2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a68e:	f7fe fa6f 	bl	8008b70 <HAL_GetTick>
 800a692:	4602      	mov	r2, r0
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	1ad3      	subs	r3, r2, r3
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d902      	bls.n	800a6a2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800a69c:	2303      	movs	r3, #3
 800a69e:	73fb      	strb	r3, [r7, #15]
          break;
 800a6a0:	e005      	b.n	800a6ae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a6a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a6cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d0ef      	beq.n	800a68e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800a6ae:	7bfb      	ldrb	r3, [r7, #15]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d106      	bne.n	800a6c2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a6b4:	4b05      	ldr	r3, [pc, #20]	@ (800a6cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800a6b6:	691a      	ldr	r2, [r3, #16]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	699b      	ldr	r3, [r3, #24]
 800a6bc:	4903      	ldr	r1, [pc, #12]	@ (800a6cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a6c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3710      	adds	r7, #16
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	40021000 	.word	0x40021000

0800a6d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a6de:	4b69      	ldr	r3, [pc, #420]	@ (800a884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	f003 0303 	and.w	r3, r3, #3
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d018      	beq.n	800a71c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a6ea:	4b66      	ldr	r3, [pc, #408]	@ (800a884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a6ec:	68db      	ldr	r3, [r3, #12]
 800a6ee:	f003 0203 	and.w	r2, r3, #3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d10d      	bne.n	800a716 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
       ||
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d009      	beq.n	800a716 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a702:	4b60      	ldr	r3, [pc, #384]	@ (800a884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	091b      	lsrs	r3, r3, #4
 800a708:	f003 0307 	and.w	r3, r3, #7
 800a70c:	1c5a      	adds	r2, r3, #1
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	685b      	ldr	r3, [r3, #4]
       ||
 800a712:	429a      	cmp	r2, r3
 800a714:	d047      	beq.n	800a7a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a716:	2301      	movs	r3, #1
 800a718:	73fb      	strb	r3, [r7, #15]
 800a71a:	e044      	b.n	800a7a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2b03      	cmp	r3, #3
 800a722:	d018      	beq.n	800a756 <RCCEx_PLLSAI2_Config+0x86>
 800a724:	2b03      	cmp	r3, #3
 800a726:	d825      	bhi.n	800a774 <RCCEx_PLLSAI2_Config+0xa4>
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d002      	beq.n	800a732 <RCCEx_PLLSAI2_Config+0x62>
 800a72c:	2b02      	cmp	r3, #2
 800a72e:	d009      	beq.n	800a744 <RCCEx_PLLSAI2_Config+0x74>
 800a730:	e020      	b.n	800a774 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a732:	4b54      	ldr	r3, [pc, #336]	@ (800a884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f003 0302 	and.w	r3, r3, #2
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d11d      	bne.n	800a77a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a742:	e01a      	b.n	800a77a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a744:	4b4f      	ldr	r3, [pc, #316]	@ (800a884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d116      	bne.n	800a77e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800a750:	2301      	movs	r3, #1
 800a752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a754:	e013      	b.n	800a77e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a756:	4b4b      	ldr	r3, [pc, #300]	@ (800a884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d10f      	bne.n	800a782 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a762:	4b48      	ldr	r3, [pc, #288]	@ (800a884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d109      	bne.n	800a782 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800a76e:	2301      	movs	r3, #1
 800a770:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a772:	e006      	b.n	800a782 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	73fb      	strb	r3, [r7, #15]
      break;
 800a778:	e004      	b.n	800a784 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a77a:	bf00      	nop
 800a77c:	e002      	b.n	800a784 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a77e:	bf00      	nop
 800a780:	e000      	b.n	800a784 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a782:	bf00      	nop
    }

    if(status == HAL_OK)
 800a784:	7bfb      	ldrb	r3, [r7, #15]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10d      	bne.n	800a7a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a78a:	4b3e      	ldr	r3, [pc, #248]	@ (800a884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6819      	ldr	r1, [r3, #0]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	3b01      	subs	r3, #1
 800a79c:	011b      	lsls	r3, r3, #4
 800a79e:	430b      	orrs	r3, r1
 800a7a0:	4938      	ldr	r1, [pc, #224]	@ (800a884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a7a6:	7bfb      	ldrb	r3, [r7, #15]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d166      	bne.n	800a87a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a7ac:	4b35      	ldr	r3, [pc, #212]	@ (800a884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a34      	ldr	r2, [pc, #208]	@ (800a884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a7b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a7b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7b8:	f7fe f9da 	bl	8008b70 <HAL_GetTick>
 800a7bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a7be:	e009      	b.n	800a7d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a7c0:	f7fe f9d6 	bl	8008b70 <HAL_GetTick>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	d902      	bls.n	800a7d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	73fb      	strb	r3, [r7, #15]
        break;
 800a7d2:	e005      	b.n	800a7e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a7d4:	4b2b      	ldr	r3, [pc, #172]	@ (800a884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d1ef      	bne.n	800a7c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a7e0:	7bfb      	ldrb	r3, [r7, #15]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d149      	bne.n	800a87a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d110      	bne.n	800a80e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a7ec:	4b25      	ldr	r3, [pc, #148]	@ (800a884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a7ee:	695b      	ldr	r3, [r3, #20]
 800a7f0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800a7f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	6892      	ldr	r2, [r2, #8]
 800a7fc:	0211      	lsls	r1, r2, #8
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	68d2      	ldr	r2, [r2, #12]
 800a802:	06d2      	lsls	r2, r2, #27
 800a804:	430a      	orrs	r2, r1
 800a806:	491f      	ldr	r1, [pc, #124]	@ (800a884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a808:	4313      	orrs	r3, r2
 800a80a:	614b      	str	r3, [r1, #20]
 800a80c:	e011      	b.n	800a832 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a80e:	4b1d      	ldr	r3, [pc, #116]	@ (800a884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a810:	695b      	ldr	r3, [r3, #20]
 800a812:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800a816:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	6892      	ldr	r2, [r2, #8]
 800a81e:	0211      	lsls	r1, r2, #8
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	6912      	ldr	r2, [r2, #16]
 800a824:	0852      	lsrs	r2, r2, #1
 800a826:	3a01      	subs	r2, #1
 800a828:	0652      	lsls	r2, r2, #25
 800a82a:	430a      	orrs	r2, r1
 800a82c:	4915      	ldr	r1, [pc, #84]	@ (800a884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a82e:	4313      	orrs	r3, r2
 800a830:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a832:	4b14      	ldr	r3, [pc, #80]	@ (800a884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a13      	ldr	r2, [pc, #76]	@ (800a884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a83c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a83e:	f7fe f997 	bl	8008b70 <HAL_GetTick>
 800a842:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a844:	e009      	b.n	800a85a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a846:	f7fe f993 	bl	8008b70 <HAL_GetTick>
 800a84a:	4602      	mov	r2, r0
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	1ad3      	subs	r3, r2, r3
 800a850:	2b02      	cmp	r3, #2
 800a852:	d902      	bls.n	800a85a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800a854:	2303      	movs	r3, #3
 800a856:	73fb      	strb	r3, [r7, #15]
          break;
 800a858:	e005      	b.n	800a866 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a85a:	4b0a      	ldr	r3, [pc, #40]	@ (800a884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a862:	2b00      	cmp	r3, #0
 800a864:	d0ef      	beq.n	800a846 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800a866:	7bfb      	ldrb	r3, [r7, #15]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d106      	bne.n	800a87a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a86c:	4b05      	ldr	r3, [pc, #20]	@ (800a884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a86e:	695a      	ldr	r2, [r3, #20]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	695b      	ldr	r3, [r3, #20]
 800a874:	4903      	ldr	r1, [pc, #12]	@ (800a884 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a876:	4313      	orrs	r3, r2
 800a878:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}
 800a884:	40021000 	.word	0x40021000

0800a888 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d101      	bne.n	800a89a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a896:	2301      	movs	r3, #1
 800a898:	e040      	b.n	800a91c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d106      	bne.n	800a8b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f7fd ffe0 	bl	8008870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2224      	movs	r2, #36	@ 0x24
 800a8b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f022 0201 	bic.w	r2, r2, #1
 800a8c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d002      	beq.n	800a8d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 fb6a 	bl	800afa8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 f8af 	bl	800aa38 <UART_SetConfig>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d101      	bne.n	800a8e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	e01b      	b.n	800a91c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	685a      	ldr	r2, [r3, #4]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a8f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	689a      	ldr	r2, [r3, #8]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a902:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f042 0201 	orr.w	r2, r2, #1
 800a912:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 fbe9 	bl	800b0ec <UART_CheckIdleState>
 800a91a:	4603      	mov	r3, r0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3708      	adds	r7, #8
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b08a      	sub	sp, #40	@ 0x28
 800a928:	af02      	add	r7, sp, #8
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	603b      	str	r3, [r7, #0]
 800a930:	4613      	mov	r3, r2
 800a932:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a938:	2b20      	cmp	r3, #32
 800a93a:	d177      	bne.n	800aa2c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d002      	beq.n	800a948 <HAL_UART_Transmit+0x24>
 800a942:	88fb      	ldrh	r3, [r7, #6]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d101      	bne.n	800a94c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	e070      	b.n	800aa2e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2200      	movs	r2, #0
 800a950:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2221      	movs	r2, #33	@ 0x21
 800a958:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a95a:	f7fe f909 	bl	8008b70 <HAL_GetTick>
 800a95e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	88fa      	ldrh	r2, [r7, #6]
 800a964:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	88fa      	ldrh	r2, [r7, #6]
 800a96c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a978:	d108      	bne.n	800a98c <HAL_UART_Transmit+0x68>
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	691b      	ldr	r3, [r3, #16]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d104      	bne.n	800a98c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a982:	2300      	movs	r3, #0
 800a984:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	61bb      	str	r3, [r7, #24]
 800a98a:	e003      	b.n	800a994 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a990:	2300      	movs	r3, #0
 800a992:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a994:	e02f      	b.n	800a9f6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	9300      	str	r3, [sp, #0]
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	2200      	movs	r2, #0
 800a99e:	2180      	movs	r1, #128	@ 0x80
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f000 fc4b 	bl	800b23c <UART_WaitOnFlagUntilTimeout>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d004      	beq.n	800a9b6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2220      	movs	r2, #32
 800a9b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	e03b      	b.n	800aa2e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10b      	bne.n	800a9d4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	881a      	ldrh	r2, [r3, #0]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a9c8:	b292      	uxth	r2, r2
 800a9ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	3302      	adds	r3, #2
 800a9d0:	61bb      	str	r3, [r7, #24]
 800a9d2:	e007      	b.n	800a9e4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	781a      	ldrb	r2, [r3, #0]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	3b01      	subs	r3, #1
 800a9ee:	b29a      	uxth	r2, r3
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d1c9      	bne.n	800a996 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	9300      	str	r3, [sp, #0]
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	2140      	movs	r1, #64	@ 0x40
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f000 fc15 	bl	800b23c <UART_WaitOnFlagUntilTimeout>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d004      	beq.n	800aa22 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2220      	movs	r2, #32
 800aa1c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800aa1e:	2303      	movs	r3, #3
 800aa20:	e005      	b.n	800aa2e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2220      	movs	r2, #32
 800aa26:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	e000      	b.n	800aa2e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800aa2c:	2302      	movs	r3, #2
  }
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3720      	adds	r7, #32
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
	...

0800aa38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa3c:	b08a      	sub	sp, #40	@ 0x28
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa42:	2300      	movs	r3, #0
 800aa44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	689a      	ldr	r2, [r3, #8]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	431a      	orrs	r2, r3
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	695b      	ldr	r3, [r3, #20]
 800aa56:	431a      	orrs	r2, r3
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	69db      	ldr	r3, [r3, #28]
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	4ba4      	ldr	r3, [pc, #656]	@ (800acf8 <UART_SetConfig+0x2c0>)
 800aa68:	4013      	ands	r3, r2
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	6812      	ldr	r2, [r2, #0]
 800aa6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aa70:	430b      	orrs	r3, r1
 800aa72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	68da      	ldr	r2, [r3, #12]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	430a      	orrs	r2, r1
 800aa88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	699b      	ldr	r3, [r3, #24]
 800aa8e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a99      	ldr	r2, [pc, #612]	@ (800acfc <UART_SetConfig+0x2c4>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d004      	beq.n	800aaa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6a1b      	ldr	r3, [r3, #32]
 800aa9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	689b      	ldr	r3, [r3, #8]
 800aaaa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aab4:	430a      	orrs	r2, r1
 800aab6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a90      	ldr	r2, [pc, #576]	@ (800ad00 <UART_SetConfig+0x2c8>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d126      	bne.n	800ab10 <UART_SetConfig+0xd8>
 800aac2:	4b90      	ldr	r3, [pc, #576]	@ (800ad04 <UART_SetConfig+0x2cc>)
 800aac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aac8:	f003 0303 	and.w	r3, r3, #3
 800aacc:	2b03      	cmp	r3, #3
 800aace:	d81b      	bhi.n	800ab08 <UART_SetConfig+0xd0>
 800aad0:	a201      	add	r2, pc, #4	@ (adr r2, 800aad8 <UART_SetConfig+0xa0>)
 800aad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad6:	bf00      	nop
 800aad8:	0800aae9 	.word	0x0800aae9
 800aadc:	0800aaf9 	.word	0x0800aaf9
 800aae0:	0800aaf1 	.word	0x0800aaf1
 800aae4:	0800ab01 	.word	0x0800ab01
 800aae8:	2301      	movs	r3, #1
 800aaea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aaee:	e116      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800aaf0:	2302      	movs	r3, #2
 800aaf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aaf6:	e112      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800aaf8:	2304      	movs	r3, #4
 800aafa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aafe:	e10e      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800ab00:	2308      	movs	r3, #8
 800ab02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab06:	e10a      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800ab08:	2310      	movs	r3, #16
 800ab0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab0e:	e106      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a7c      	ldr	r2, [pc, #496]	@ (800ad08 <UART_SetConfig+0x2d0>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d138      	bne.n	800ab8c <UART_SetConfig+0x154>
 800ab1a:	4b7a      	ldr	r3, [pc, #488]	@ (800ad04 <UART_SetConfig+0x2cc>)
 800ab1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab20:	f003 030c 	and.w	r3, r3, #12
 800ab24:	2b0c      	cmp	r3, #12
 800ab26:	d82d      	bhi.n	800ab84 <UART_SetConfig+0x14c>
 800ab28:	a201      	add	r2, pc, #4	@ (adr r2, 800ab30 <UART_SetConfig+0xf8>)
 800ab2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab2e:	bf00      	nop
 800ab30:	0800ab65 	.word	0x0800ab65
 800ab34:	0800ab85 	.word	0x0800ab85
 800ab38:	0800ab85 	.word	0x0800ab85
 800ab3c:	0800ab85 	.word	0x0800ab85
 800ab40:	0800ab75 	.word	0x0800ab75
 800ab44:	0800ab85 	.word	0x0800ab85
 800ab48:	0800ab85 	.word	0x0800ab85
 800ab4c:	0800ab85 	.word	0x0800ab85
 800ab50:	0800ab6d 	.word	0x0800ab6d
 800ab54:	0800ab85 	.word	0x0800ab85
 800ab58:	0800ab85 	.word	0x0800ab85
 800ab5c:	0800ab85 	.word	0x0800ab85
 800ab60:	0800ab7d 	.word	0x0800ab7d
 800ab64:	2300      	movs	r3, #0
 800ab66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab6a:	e0d8      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800ab6c:	2302      	movs	r3, #2
 800ab6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab72:	e0d4      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800ab74:	2304      	movs	r3, #4
 800ab76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab7a:	e0d0      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800ab7c:	2308      	movs	r3, #8
 800ab7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab82:	e0cc      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800ab84:	2310      	movs	r3, #16
 800ab86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab8a:	e0c8      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a5e      	ldr	r2, [pc, #376]	@ (800ad0c <UART_SetConfig+0x2d4>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d125      	bne.n	800abe2 <UART_SetConfig+0x1aa>
 800ab96:	4b5b      	ldr	r3, [pc, #364]	@ (800ad04 <UART_SetConfig+0x2cc>)
 800ab98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab9c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800aba0:	2b30      	cmp	r3, #48	@ 0x30
 800aba2:	d016      	beq.n	800abd2 <UART_SetConfig+0x19a>
 800aba4:	2b30      	cmp	r3, #48	@ 0x30
 800aba6:	d818      	bhi.n	800abda <UART_SetConfig+0x1a2>
 800aba8:	2b20      	cmp	r3, #32
 800abaa:	d00a      	beq.n	800abc2 <UART_SetConfig+0x18a>
 800abac:	2b20      	cmp	r3, #32
 800abae:	d814      	bhi.n	800abda <UART_SetConfig+0x1a2>
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <UART_SetConfig+0x182>
 800abb4:	2b10      	cmp	r3, #16
 800abb6:	d008      	beq.n	800abca <UART_SetConfig+0x192>
 800abb8:	e00f      	b.n	800abda <UART_SetConfig+0x1a2>
 800abba:	2300      	movs	r3, #0
 800abbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800abc0:	e0ad      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800abc2:	2302      	movs	r3, #2
 800abc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800abc8:	e0a9      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800abca:	2304      	movs	r3, #4
 800abcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800abd0:	e0a5      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800abd2:	2308      	movs	r3, #8
 800abd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800abd8:	e0a1      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800abda:	2310      	movs	r3, #16
 800abdc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800abe0:	e09d      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a4a      	ldr	r2, [pc, #296]	@ (800ad10 <UART_SetConfig+0x2d8>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d125      	bne.n	800ac38 <UART_SetConfig+0x200>
 800abec:	4b45      	ldr	r3, [pc, #276]	@ (800ad04 <UART_SetConfig+0x2cc>)
 800abee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abf2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800abf6:	2bc0      	cmp	r3, #192	@ 0xc0
 800abf8:	d016      	beq.n	800ac28 <UART_SetConfig+0x1f0>
 800abfa:	2bc0      	cmp	r3, #192	@ 0xc0
 800abfc:	d818      	bhi.n	800ac30 <UART_SetConfig+0x1f8>
 800abfe:	2b80      	cmp	r3, #128	@ 0x80
 800ac00:	d00a      	beq.n	800ac18 <UART_SetConfig+0x1e0>
 800ac02:	2b80      	cmp	r3, #128	@ 0x80
 800ac04:	d814      	bhi.n	800ac30 <UART_SetConfig+0x1f8>
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d002      	beq.n	800ac10 <UART_SetConfig+0x1d8>
 800ac0a:	2b40      	cmp	r3, #64	@ 0x40
 800ac0c:	d008      	beq.n	800ac20 <UART_SetConfig+0x1e8>
 800ac0e:	e00f      	b.n	800ac30 <UART_SetConfig+0x1f8>
 800ac10:	2300      	movs	r3, #0
 800ac12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ac16:	e082      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800ac18:	2302      	movs	r3, #2
 800ac1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ac1e:	e07e      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800ac20:	2304      	movs	r3, #4
 800ac22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ac26:	e07a      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800ac28:	2308      	movs	r3, #8
 800ac2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ac2e:	e076      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800ac30:	2310      	movs	r3, #16
 800ac32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ac36:	e072      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a35      	ldr	r2, [pc, #212]	@ (800ad14 <UART_SetConfig+0x2dc>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d12a      	bne.n	800ac98 <UART_SetConfig+0x260>
 800ac42:	4b30      	ldr	r3, [pc, #192]	@ (800ad04 <UART_SetConfig+0x2cc>)
 800ac44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac50:	d01a      	beq.n	800ac88 <UART_SetConfig+0x250>
 800ac52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac56:	d81b      	bhi.n	800ac90 <UART_SetConfig+0x258>
 800ac58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac5c:	d00c      	beq.n	800ac78 <UART_SetConfig+0x240>
 800ac5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac62:	d815      	bhi.n	800ac90 <UART_SetConfig+0x258>
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d003      	beq.n	800ac70 <UART_SetConfig+0x238>
 800ac68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac6c:	d008      	beq.n	800ac80 <UART_SetConfig+0x248>
 800ac6e:	e00f      	b.n	800ac90 <UART_SetConfig+0x258>
 800ac70:	2300      	movs	r3, #0
 800ac72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ac76:	e052      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800ac78:	2302      	movs	r3, #2
 800ac7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ac7e:	e04e      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800ac80:	2304      	movs	r3, #4
 800ac82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ac86:	e04a      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800ac88:	2308      	movs	r3, #8
 800ac8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ac8e:	e046      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800ac90:	2310      	movs	r3, #16
 800ac92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ac96:	e042      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a17      	ldr	r2, [pc, #92]	@ (800acfc <UART_SetConfig+0x2c4>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d13a      	bne.n	800ad18 <UART_SetConfig+0x2e0>
 800aca2:	4b18      	ldr	r3, [pc, #96]	@ (800ad04 <UART_SetConfig+0x2cc>)
 800aca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aca8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800acac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800acb0:	d01a      	beq.n	800ace8 <UART_SetConfig+0x2b0>
 800acb2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800acb6:	d81b      	bhi.n	800acf0 <UART_SetConfig+0x2b8>
 800acb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800acbc:	d00c      	beq.n	800acd8 <UART_SetConfig+0x2a0>
 800acbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800acc2:	d815      	bhi.n	800acf0 <UART_SetConfig+0x2b8>
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d003      	beq.n	800acd0 <UART_SetConfig+0x298>
 800acc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800accc:	d008      	beq.n	800ace0 <UART_SetConfig+0x2a8>
 800acce:	e00f      	b.n	800acf0 <UART_SetConfig+0x2b8>
 800acd0:	2300      	movs	r3, #0
 800acd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800acd6:	e022      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800acd8:	2302      	movs	r3, #2
 800acda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800acde:	e01e      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800ace0:	2304      	movs	r3, #4
 800ace2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ace6:	e01a      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800ace8:	2308      	movs	r3, #8
 800acea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800acee:	e016      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800acf0:	2310      	movs	r3, #16
 800acf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800acf6:	e012      	b.n	800ad1e <UART_SetConfig+0x2e6>
 800acf8:	efff69f3 	.word	0xefff69f3
 800acfc:	40008000 	.word	0x40008000
 800ad00:	40013800 	.word	0x40013800
 800ad04:	40021000 	.word	0x40021000
 800ad08:	40004400 	.word	0x40004400
 800ad0c:	40004800 	.word	0x40004800
 800ad10:	40004c00 	.word	0x40004c00
 800ad14:	40005000 	.word	0x40005000
 800ad18:	2310      	movs	r3, #16
 800ad1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a9f      	ldr	r2, [pc, #636]	@ (800afa0 <UART_SetConfig+0x568>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d17a      	bne.n	800ae1e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ad28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ad2c:	2b08      	cmp	r3, #8
 800ad2e:	d824      	bhi.n	800ad7a <UART_SetConfig+0x342>
 800ad30:	a201      	add	r2, pc, #4	@ (adr r2, 800ad38 <UART_SetConfig+0x300>)
 800ad32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad36:	bf00      	nop
 800ad38:	0800ad5d 	.word	0x0800ad5d
 800ad3c:	0800ad7b 	.word	0x0800ad7b
 800ad40:	0800ad65 	.word	0x0800ad65
 800ad44:	0800ad7b 	.word	0x0800ad7b
 800ad48:	0800ad6b 	.word	0x0800ad6b
 800ad4c:	0800ad7b 	.word	0x0800ad7b
 800ad50:	0800ad7b 	.word	0x0800ad7b
 800ad54:	0800ad7b 	.word	0x0800ad7b
 800ad58:	0800ad73 	.word	0x0800ad73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad5c:	f7ff f83e 	bl	8009ddc <HAL_RCC_GetPCLK1Freq>
 800ad60:	61f8      	str	r0, [r7, #28]
        break;
 800ad62:	e010      	b.n	800ad86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad64:	4b8f      	ldr	r3, [pc, #572]	@ (800afa4 <UART_SetConfig+0x56c>)
 800ad66:	61fb      	str	r3, [r7, #28]
        break;
 800ad68:	e00d      	b.n	800ad86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad6a:	f7fe ff9f 	bl	8009cac <HAL_RCC_GetSysClockFreq>
 800ad6e:	61f8      	str	r0, [r7, #28]
        break;
 800ad70:	e009      	b.n	800ad86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad76:	61fb      	str	r3, [r7, #28]
        break;
 800ad78:	e005      	b.n	800ad86 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800ad84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f000 80fb 	beq.w	800af84 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	685a      	ldr	r2, [r3, #4]
 800ad92:	4613      	mov	r3, r2
 800ad94:	005b      	lsls	r3, r3, #1
 800ad96:	4413      	add	r3, r2
 800ad98:	69fa      	ldr	r2, [r7, #28]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d305      	bcc.n	800adaa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ada4:	69fa      	ldr	r2, [r7, #28]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d903      	bls.n	800adb2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800adb0:	e0e8      	b.n	800af84 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	2200      	movs	r2, #0
 800adb6:	461c      	mov	r4, r3
 800adb8:	4615      	mov	r5, r2
 800adba:	f04f 0200 	mov.w	r2, #0
 800adbe:	f04f 0300 	mov.w	r3, #0
 800adc2:	022b      	lsls	r3, r5, #8
 800adc4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800adc8:	0222      	lsls	r2, r4, #8
 800adca:	68f9      	ldr	r1, [r7, #12]
 800adcc:	6849      	ldr	r1, [r1, #4]
 800adce:	0849      	lsrs	r1, r1, #1
 800add0:	2000      	movs	r0, #0
 800add2:	4688      	mov	r8, r1
 800add4:	4681      	mov	r9, r0
 800add6:	eb12 0a08 	adds.w	sl, r2, r8
 800adda:	eb43 0b09 	adc.w	fp, r3, r9
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	603b      	str	r3, [r7, #0]
 800ade6:	607a      	str	r2, [r7, #4]
 800ade8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adec:	4650      	mov	r0, sl
 800adee:	4659      	mov	r1, fp
 800adf0:	f7fd f9fc 	bl	80081ec <__aeabi_uldivmod>
 800adf4:	4602      	mov	r2, r0
 800adf6:	460b      	mov	r3, r1
 800adf8:	4613      	mov	r3, r2
 800adfa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae02:	d308      	bcc.n	800ae16 <UART_SetConfig+0x3de>
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae0a:	d204      	bcs.n	800ae16 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	69ba      	ldr	r2, [r7, #24]
 800ae12:	60da      	str	r2, [r3, #12]
 800ae14:	e0b6      	b.n	800af84 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800ae1c:	e0b2      	b.n	800af84 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	69db      	ldr	r3, [r3, #28]
 800ae22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae26:	d15e      	bne.n	800aee6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800ae28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ae2c:	2b08      	cmp	r3, #8
 800ae2e:	d828      	bhi.n	800ae82 <UART_SetConfig+0x44a>
 800ae30:	a201      	add	r2, pc, #4	@ (adr r2, 800ae38 <UART_SetConfig+0x400>)
 800ae32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae36:	bf00      	nop
 800ae38:	0800ae5d 	.word	0x0800ae5d
 800ae3c:	0800ae65 	.word	0x0800ae65
 800ae40:	0800ae6d 	.word	0x0800ae6d
 800ae44:	0800ae83 	.word	0x0800ae83
 800ae48:	0800ae73 	.word	0x0800ae73
 800ae4c:	0800ae83 	.word	0x0800ae83
 800ae50:	0800ae83 	.word	0x0800ae83
 800ae54:	0800ae83 	.word	0x0800ae83
 800ae58:	0800ae7b 	.word	0x0800ae7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae5c:	f7fe ffbe 	bl	8009ddc <HAL_RCC_GetPCLK1Freq>
 800ae60:	61f8      	str	r0, [r7, #28]
        break;
 800ae62:	e014      	b.n	800ae8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae64:	f7fe ffd0 	bl	8009e08 <HAL_RCC_GetPCLK2Freq>
 800ae68:	61f8      	str	r0, [r7, #28]
        break;
 800ae6a:	e010      	b.n	800ae8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae6c:	4b4d      	ldr	r3, [pc, #308]	@ (800afa4 <UART_SetConfig+0x56c>)
 800ae6e:	61fb      	str	r3, [r7, #28]
        break;
 800ae70:	e00d      	b.n	800ae8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae72:	f7fe ff1b 	bl	8009cac <HAL_RCC_GetSysClockFreq>
 800ae76:	61f8      	str	r0, [r7, #28]
        break;
 800ae78:	e009      	b.n	800ae8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae7e:	61fb      	str	r3, [r7, #28]
        break;
 800ae80:	e005      	b.n	800ae8e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800ae82:	2300      	movs	r3, #0
 800ae84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800ae8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d077      	beq.n	800af84 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ae94:	69fb      	ldr	r3, [r7, #28]
 800ae96:	005a      	lsls	r2, r3, #1
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	085b      	lsrs	r3, r3, #1
 800ae9e:	441a      	add	r2, r3
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aea8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	2b0f      	cmp	r3, #15
 800aeae:	d916      	bls.n	800aede <UART_SetConfig+0x4a6>
 800aeb0:	69bb      	ldr	r3, [r7, #24]
 800aeb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aeb6:	d212      	bcs.n	800aede <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aeb8:	69bb      	ldr	r3, [r7, #24]
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	f023 030f 	bic.w	r3, r3, #15
 800aec0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	085b      	lsrs	r3, r3, #1
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	f003 0307 	and.w	r3, r3, #7
 800aecc:	b29a      	uxth	r2, r3
 800aece:	8afb      	ldrh	r3, [r7, #22]
 800aed0:	4313      	orrs	r3, r2
 800aed2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	8afa      	ldrh	r2, [r7, #22]
 800aeda:	60da      	str	r2, [r3, #12]
 800aedc:	e052      	b.n	800af84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800aede:	2301      	movs	r3, #1
 800aee0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800aee4:	e04e      	b.n	800af84 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aee6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aeea:	2b08      	cmp	r3, #8
 800aeec:	d827      	bhi.n	800af3e <UART_SetConfig+0x506>
 800aeee:	a201      	add	r2, pc, #4	@ (adr r2, 800aef4 <UART_SetConfig+0x4bc>)
 800aef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef4:	0800af19 	.word	0x0800af19
 800aef8:	0800af21 	.word	0x0800af21
 800aefc:	0800af29 	.word	0x0800af29
 800af00:	0800af3f 	.word	0x0800af3f
 800af04:	0800af2f 	.word	0x0800af2f
 800af08:	0800af3f 	.word	0x0800af3f
 800af0c:	0800af3f 	.word	0x0800af3f
 800af10:	0800af3f 	.word	0x0800af3f
 800af14:	0800af37 	.word	0x0800af37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af18:	f7fe ff60 	bl	8009ddc <HAL_RCC_GetPCLK1Freq>
 800af1c:	61f8      	str	r0, [r7, #28]
        break;
 800af1e:	e014      	b.n	800af4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af20:	f7fe ff72 	bl	8009e08 <HAL_RCC_GetPCLK2Freq>
 800af24:	61f8      	str	r0, [r7, #28]
        break;
 800af26:	e010      	b.n	800af4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af28:	4b1e      	ldr	r3, [pc, #120]	@ (800afa4 <UART_SetConfig+0x56c>)
 800af2a:	61fb      	str	r3, [r7, #28]
        break;
 800af2c:	e00d      	b.n	800af4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af2e:	f7fe febd 	bl	8009cac <HAL_RCC_GetSysClockFreq>
 800af32:	61f8      	str	r0, [r7, #28]
        break;
 800af34:	e009      	b.n	800af4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af3a:	61fb      	str	r3, [r7, #28]
        break;
 800af3c:	e005      	b.n	800af4a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800af3e:	2300      	movs	r3, #0
 800af40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800af42:	2301      	movs	r3, #1
 800af44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800af48:	bf00      	nop
    }

    if (pclk != 0U)
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d019      	beq.n	800af84 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	085a      	lsrs	r2, r3, #1
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	441a      	add	r2, r3
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af62:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af64:	69bb      	ldr	r3, [r7, #24]
 800af66:	2b0f      	cmp	r3, #15
 800af68:	d909      	bls.n	800af7e <UART_SetConfig+0x546>
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af70:	d205      	bcs.n	800af7e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	b29a      	uxth	r2, r3
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	60da      	str	r2, [r3, #12]
 800af7c:	e002      	b.n	800af84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800af7e:	2301      	movs	r3, #1
 800af80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2200      	movs	r2, #0
 800af88:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2200      	movs	r2, #0
 800af8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800af90:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800af94:	4618      	mov	r0, r3
 800af96:	3728      	adds	r7, #40	@ 0x28
 800af98:	46bd      	mov	sp, r7
 800af9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af9e:	bf00      	nop
 800afa0:	40008000 	.word	0x40008000
 800afa4:	00f42400 	.word	0x00f42400

0800afa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afb4:	f003 0308 	and.w	r3, r3, #8
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00a      	beq.n	800afd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	430a      	orrs	r2, r1
 800afd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afd6:	f003 0301 	and.w	r3, r3, #1
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d00a      	beq.n	800aff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	430a      	orrs	r2, r1
 800aff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aff8:	f003 0302 	and.w	r3, r3, #2
 800affc:	2b00      	cmp	r3, #0
 800affe:	d00a      	beq.n	800b016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	430a      	orrs	r2, r1
 800b014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b01a:	f003 0304 	and.w	r3, r3, #4
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00a      	beq.n	800b038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	430a      	orrs	r2, r1
 800b036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b03c:	f003 0310 	and.w	r3, r3, #16
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00a      	beq.n	800b05a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	430a      	orrs	r2, r1
 800b058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b05e:	f003 0320 	and.w	r3, r3, #32
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00a      	beq.n	800b07c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	430a      	orrs	r2, r1
 800b07a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b084:	2b00      	cmp	r3, #0
 800b086:	d01a      	beq.n	800b0be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	430a      	orrs	r2, r1
 800b09c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b0a6:	d10a      	bne.n	800b0be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	430a      	orrs	r2, r1
 800b0bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00a      	beq.n	800b0e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	430a      	orrs	r2, r1
 800b0de:	605a      	str	r2, [r3, #4]
  }
}
 800b0e0:	bf00      	nop
 800b0e2:	370c      	adds	r7, #12
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b098      	sub	sp, #96	@ 0x60
 800b0f0:	af02      	add	r7, sp, #8
 800b0f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b0fc:	f7fd fd38 	bl	8008b70 <HAL_GetTick>
 800b100:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f003 0308 	and.w	r3, r3, #8
 800b10c:	2b08      	cmp	r3, #8
 800b10e:	d12e      	bne.n	800b16e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b110:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b114:	9300      	str	r3, [sp, #0]
 800b116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b118:	2200      	movs	r2, #0
 800b11a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 f88c 	bl	800b23c <UART_WaitOnFlagUntilTimeout>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d021      	beq.n	800b16e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b132:	e853 3f00 	ldrex	r3, [r3]
 800b136:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b13a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b13e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	461a      	mov	r2, r3
 800b146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b148:	647b      	str	r3, [r7, #68]	@ 0x44
 800b14a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b14e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b150:	e841 2300 	strex	r3, r2, [r1]
 800b154:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d1e6      	bne.n	800b12a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2220      	movs	r2, #32
 800b160:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b16a:	2303      	movs	r3, #3
 800b16c:	e062      	b.n	800b234 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f003 0304 	and.w	r3, r3, #4
 800b178:	2b04      	cmp	r3, #4
 800b17a:	d149      	bne.n	800b210 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b17c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b180:	9300      	str	r3, [sp, #0]
 800b182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b184:	2200      	movs	r2, #0
 800b186:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f856 	bl	800b23c <UART_WaitOnFlagUntilTimeout>
 800b190:	4603      	mov	r3, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d03c      	beq.n	800b210 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b19e:	e853 3f00 	ldrex	r3, [r3]
 800b1a2:	623b      	str	r3, [r7, #32]
   return(result);
 800b1a4:	6a3b      	ldr	r3, [r7, #32]
 800b1a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b1aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800b1b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b1ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1bc:	e841 2300 	strex	r3, r2, [r1]
 800b1c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d1e6      	bne.n	800b196 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	3308      	adds	r3, #8
 800b1ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	e853 3f00 	ldrex	r3, [r3]
 800b1d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f023 0301 	bic.w	r3, r3, #1
 800b1de:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	3308      	adds	r3, #8
 800b1e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b1e8:	61fa      	str	r2, [r7, #28]
 800b1ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ec:	69b9      	ldr	r1, [r7, #24]
 800b1ee:	69fa      	ldr	r2, [r7, #28]
 800b1f0:	e841 2300 	strex	r3, r2, [r1]
 800b1f4:	617b      	str	r3, [r7, #20]
   return(result);
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d1e5      	bne.n	800b1c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2220      	movs	r2, #32
 800b200:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b20c:	2303      	movs	r3, #3
 800b20e:	e011      	b.n	800b234 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2220      	movs	r2, #32
 800b214:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2220      	movs	r2, #32
 800b21a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b232:	2300      	movs	r3, #0
}
 800b234:	4618      	mov	r0, r3
 800b236:	3758      	adds	r7, #88	@ 0x58
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	603b      	str	r3, [r7, #0]
 800b248:	4613      	mov	r3, r2
 800b24a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b24c:	e04f      	b.n	800b2ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b24e:	69bb      	ldr	r3, [r7, #24]
 800b250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b254:	d04b      	beq.n	800b2ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b256:	f7fd fc8b 	bl	8008b70 <HAL_GetTick>
 800b25a:	4602      	mov	r2, r0
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	1ad3      	subs	r3, r2, r3
 800b260:	69ba      	ldr	r2, [r7, #24]
 800b262:	429a      	cmp	r2, r3
 800b264:	d302      	bcc.n	800b26c <UART_WaitOnFlagUntilTimeout+0x30>
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d101      	bne.n	800b270 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b26c:	2303      	movs	r3, #3
 800b26e:	e04e      	b.n	800b30e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f003 0304 	and.w	r3, r3, #4
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d037      	beq.n	800b2ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	2b80      	cmp	r3, #128	@ 0x80
 800b282:	d034      	beq.n	800b2ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	2b40      	cmp	r3, #64	@ 0x40
 800b288:	d031      	beq.n	800b2ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	69db      	ldr	r3, [r3, #28]
 800b290:	f003 0308 	and.w	r3, r3, #8
 800b294:	2b08      	cmp	r3, #8
 800b296:	d110      	bne.n	800b2ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2208      	movs	r2, #8
 800b29e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f000 f838 	bl	800b316 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2208      	movs	r2, #8
 800b2aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	e029      	b.n	800b30e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	69db      	ldr	r3, [r3, #28]
 800b2c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b2c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2c8:	d111      	bne.n	800b2ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b2d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f000 f81e 	bl	800b316 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2220      	movs	r2, #32
 800b2de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b2ea:	2303      	movs	r3, #3
 800b2ec:	e00f      	b.n	800b30e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	69da      	ldr	r2, [r3, #28]
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	4013      	ands	r3, r2
 800b2f8:	68ba      	ldr	r2, [r7, #8]
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	bf0c      	ite	eq
 800b2fe:	2301      	moveq	r3, #1
 800b300:	2300      	movne	r3, #0
 800b302:	b2db      	uxtb	r3, r3
 800b304:	461a      	mov	r2, r3
 800b306:	79fb      	ldrb	r3, [r7, #7]
 800b308:	429a      	cmp	r2, r3
 800b30a:	d0a0      	beq.n	800b24e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3710      	adds	r7, #16
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b316:	b480      	push	{r7}
 800b318:	b095      	sub	sp, #84	@ 0x54
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b326:	e853 3f00 	ldrex	r3, [r3]
 800b32a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b32e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b332:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	461a      	mov	r2, r3
 800b33a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b33c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b33e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b340:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b342:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b344:	e841 2300 	strex	r3, r2, [r1]
 800b348:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b34a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d1e6      	bne.n	800b31e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	3308      	adds	r3, #8
 800b356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b358:	6a3b      	ldr	r3, [r7, #32]
 800b35a:	e853 3f00 	ldrex	r3, [r3]
 800b35e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	f023 0301 	bic.w	r3, r3, #1
 800b366:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	3308      	adds	r3, #8
 800b36e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b370:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b372:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b374:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b376:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b378:	e841 2300 	strex	r3, r2, [r1]
 800b37c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b380:	2b00      	cmp	r3, #0
 800b382:	d1e5      	bne.n	800b350 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d118      	bne.n	800b3be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	e853 3f00 	ldrex	r3, [r3]
 800b398:	60bb      	str	r3, [r7, #8]
   return(result);
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	f023 0310 	bic.w	r3, r3, #16
 800b3a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3aa:	61bb      	str	r3, [r7, #24]
 800b3ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ae:	6979      	ldr	r1, [r7, #20]
 800b3b0:	69ba      	ldr	r2, [r7, #24]
 800b3b2:	e841 2300 	strex	r3, r2, [r1]
 800b3b6:	613b      	str	r3, [r7, #16]
   return(result);
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d1e6      	bne.n	800b38c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2220      	movs	r2, #32
 800b3c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b3d2:	bf00      	nop
 800b3d4:	3754      	adds	r7, #84	@ 0x54
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr

0800b3de <memset>:
 800b3de:	4402      	add	r2, r0
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d100      	bne.n	800b3e8 <memset+0xa>
 800b3e6:	4770      	bx	lr
 800b3e8:	f803 1b01 	strb.w	r1, [r3], #1
 800b3ec:	e7f9      	b.n	800b3e2 <memset+0x4>
	...

0800b3f0 <__libc_init_array>:
 800b3f0:	b570      	push	{r4, r5, r6, lr}
 800b3f2:	4d0d      	ldr	r5, [pc, #52]	@ (800b428 <__libc_init_array+0x38>)
 800b3f4:	4c0d      	ldr	r4, [pc, #52]	@ (800b42c <__libc_init_array+0x3c>)
 800b3f6:	1b64      	subs	r4, r4, r5
 800b3f8:	10a4      	asrs	r4, r4, #2
 800b3fa:	2600      	movs	r6, #0
 800b3fc:	42a6      	cmp	r6, r4
 800b3fe:	d109      	bne.n	800b414 <__libc_init_array+0x24>
 800b400:	4d0b      	ldr	r5, [pc, #44]	@ (800b430 <__libc_init_array+0x40>)
 800b402:	4c0c      	ldr	r4, [pc, #48]	@ (800b434 <__libc_init_array+0x44>)
 800b404:	f000 f818 	bl	800b438 <_init>
 800b408:	1b64      	subs	r4, r4, r5
 800b40a:	10a4      	asrs	r4, r4, #2
 800b40c:	2600      	movs	r6, #0
 800b40e:	42a6      	cmp	r6, r4
 800b410:	d105      	bne.n	800b41e <__libc_init_array+0x2e>
 800b412:	bd70      	pop	{r4, r5, r6, pc}
 800b414:	f855 3b04 	ldr.w	r3, [r5], #4
 800b418:	4798      	blx	r3
 800b41a:	3601      	adds	r6, #1
 800b41c:	e7ee      	b.n	800b3fc <__libc_init_array+0xc>
 800b41e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b422:	4798      	blx	r3
 800b424:	3601      	adds	r6, #1
 800b426:	e7f2      	b.n	800b40e <__libc_init_array+0x1e>
 800b428:	0800b4a0 	.word	0x0800b4a0
 800b42c:	0800b4a0 	.word	0x0800b4a0
 800b430:	0800b4a0 	.word	0x0800b4a0
 800b434:	0800b4a4 	.word	0x0800b4a4

0800b438 <_init>:
 800b438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b43a:	bf00      	nop
 800b43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b43e:	bc08      	pop	{r3}
 800b440:	469e      	mov	lr, r3
 800b442:	4770      	bx	lr

0800b444 <_fini>:
 800b444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b446:	bf00      	nop
 800b448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b44a:	bc08      	pop	{r3}
 800b44c:	469e      	mov	lr, r3
 800b44e:	4770      	bx	lr
